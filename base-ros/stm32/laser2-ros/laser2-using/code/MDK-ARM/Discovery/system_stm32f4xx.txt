; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\system_stm32f4xx.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\system_stm32f4xx.crf ..\src\system_stm32f4xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;360      */
;;;361    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;362    {
;;;363    /******************************************************************************/
;;;364    /*            PLL (clocked by HSE) used as System clock source                */
;;;365    /******************************************************************************/
;;;366      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;367      
;;;368      /* Enable HSE */
;;;369      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000008  4876              LDR      r0,|L1.484|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  4974              LDR      r1,|L1.484|
000012  6008              STR      r0,[r1,#0]
;;;370     
;;;371      /* Wait till HSE is ready and if Time out is reached exit */
;;;372      do
000014  bf00              NOP      
                  |L1.22|
;;;373      {
;;;374        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000016  4873              LDR      r0,|L1.484|
000018  6800              LDR      r0,[r0,#0]
00001a  f4003000          AND      r0,r0,#0x20000
00001e  9000              STR      r0,[sp,#0]
;;;375        StartUpCounter++;
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;376      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  b918              CBNZ     r0,|L1.50|
00002a  9801              LDR      r0,[sp,#4]
00002c  f5b06fa0          CMP      r0,#0x500
000030  d1f1              BNE      |L1.22|
                  |L1.50|
;;;377    
;;;378      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  486c              LDR      r0,|L1.484|
000034  6800              LDR      r0,[r0,#0]
000036  f4003000          AND      r0,r0,#0x20000
00003a  b110              CBZ      r0,|L1.66|
;;;379      {
;;;380        HSEStatus = (uint32_t)0x01;
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L1.70|
                  |L1.66|
;;;381      }
;;;382      else
;;;383      {
;;;384        HSEStatus = (uint32_t)0x00;
000042  2000              MOVS     r0,#0
000044  9000              STR      r0,[sp,#0]
                  |L1.70|
;;;385      }
;;;386    
;;;387      if (HSEStatus == (uint32_t)0x01)
000046  9800              LDR      r0,[sp,#0]
000048  2801              CMP      r0,#1
00004a  d146              BNE      |L1.218|
;;;388      {
;;;389        /* Enable high performance mode, System frequency up to 168 MHz */
;;;390        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
00004c  4865              LDR      r0,|L1.484|
00004e  3040              ADDS     r0,r0,#0x40
000050  6800              LDR      r0,[r0,#0]
000052  f0405080          ORR      r0,r0,#0x10000000
000056  4963              LDR      r1,|L1.484|
000058  3140              ADDS     r1,r1,#0x40
00005a  6008              STR      r0,[r1,#0]
;;;391        PWR->CR |= PWR_CR_PMODE;
00005c  4862              LDR      r0,|L1.488|
00005e  6800              LDR      r0,[r0,#0]
000060  f4404080          ORR      r0,r0,#0x4000
000064  4960              LDR      r1,|L1.488|
000066  6008              STR      r0,[r1,#0]
;;;392        
;;;393        /* HCLK = SYSCLK / 1*/
;;;394        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000068  485e              LDR      r0,|L1.484|
00006a  3008              ADDS     r0,r0,#8
00006c  6800              LDR      r0,[r0,#0]
00006e  495d              LDR      r1,|L1.484|
000070  3108              ADDS     r1,r1,#8
000072  6008              STR      r0,[r1,#0]
;;;395          
;;;396        /* PCLK2 = HCLK / 2*/
;;;397        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000074  4608              MOV      r0,r1
000076  6800              LDR      r0,[r0,#0]
000078  f4404000          ORR      r0,r0,#0x8000
00007c  6008              STR      r0,[r1,#0]
;;;398        
;;;399        /* PCLK1 = HCLK / 4*/
;;;400        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00007e  4608              MOV      r0,r1
000080  6800              LDR      r0,[r0,#0]
000082  f44050a0          ORR      r0,r0,#0x1400
000086  6008              STR      r0,[r1,#0]
;;;401    
;;;402        /* Configure the main PLL */
;;;403        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000088  4858              LDR      r0,|L1.492|
00008a  1f09              SUBS     r1,r1,#4
00008c  6008              STR      r0,[r1,#0]
;;;404                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;405    
;;;406        /* Enable the main PLL */
;;;407        RCC->CR |= RCC_CR_PLLON;
00008e  1f08              SUBS     r0,r1,#4
000090  6800              LDR      r0,[r0,#0]
000092  f0407080          ORR      r0,r0,#0x1000000
000096  1f09              SUBS     r1,r1,#4
000098  6008              STR      r0,[r1,#0]
;;;408    
;;;409        /* Wait till the main PLL is ready */
;;;410        while((RCC->CR & RCC_CR_PLLRDY) == 0)
00009a  bf00              NOP      
                  |L1.156|
00009c  4851              LDR      r0,|L1.484|
00009e  6800              LDR      r0,[r0,#0]
0000a0  f0007000          AND      r0,r0,#0x2000000
0000a4  2800              CMP      r0,#0
0000a6  d0f9              BEQ      |L1.156|
;;;411        {
;;;412        }
;;;413       
;;;414        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;415        FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
0000a8  f2406005          MOV      r0,#0x605
0000ac  4950              LDR      r1,|L1.496|
0000ae  6008              STR      r0,[r1,#0]
;;;416    
;;;417        /* Select the main PLL as system clock source */
;;;418        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
0000b0  484c              LDR      r0,|L1.484|
0000b2  3008              ADDS     r0,r0,#8
0000b4  6800              LDR      r0,[r0,#0]
0000b6  f0200003          BIC      r0,r0,#3
0000ba  494a              LDR      r1,|L1.484|
0000bc  3108              ADDS     r1,r1,#8
0000be  6008              STR      r0,[r1,#0]
;;;419        RCC->CFGR |= RCC_CFGR_SW_PLL;
0000c0  4608              MOV      r0,r1
0000c2  6800              LDR      r0,[r0,#0]
0000c4  f0400002          ORR      r0,r0,#2
0000c8  6008              STR      r0,[r1,#0]
;;;420    
;;;421        /* Wait till the main PLL is used as system clock source */
;;;422        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
0000ca  bf00              NOP      
                  |L1.204|
0000cc  4845              LDR      r0,|L1.484|
0000ce  3008              ADDS     r0,r0,#8
0000d0  6800              LDR      r0,[r0,#0]
0000d2  f000000c          AND      r0,r0,#0xc
0000d6  2808              CMP      r0,#8
0000d8  d1f8              BNE      |L1.204|
                  |L1.218|
;;;423        {
;;;424        }
;;;425      }
;;;426      else
;;;427      { /* If HSE fails to start-up, the application will have wrong clock
;;;428             configuration. User can add here some code to deal with this error */
;;;429      }
;;;430    }
0000da  bd0c              POP      {r2,r3,pc}
;;;431    
                          ENDP

                  SystemInit PROC
;;;226      */
;;;227    void SystemInit(void)
0000dc  b510              PUSH     {r4,lr}
;;;228    {
;;;229      /* FPU settings ------------------------------------------------------------*/
;;;230      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;231        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
0000de  4845              LDR      r0,|L1.500|
0000e0  6800              LDR      r0,[r0,#0]
0000e2  f4400070          ORR      r0,r0,#0xf00000
0000e6  4943              LDR      r1,|L1.500|
0000e8  6008              STR      r0,[r1,#0]
;;;232      #endif
;;;233    
;;;234      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;235      /* Set HSION bit */
;;;236      RCC->CR |= (uint32_t)0x00000001;
0000ea  483e              LDR      r0,|L1.484|
0000ec  6800              LDR      r0,[r0,#0]
0000ee  f0400001          ORR      r0,r0,#1
0000f2  493c              LDR      r1,|L1.484|
0000f4  6008              STR      r0,[r1,#0]
;;;237    
;;;238      /* Reset CFGR register */
;;;239      RCC->CFGR = 0x00000000;
0000f6  2000              MOVS     r0,#0
0000f8  493a              LDR      r1,|L1.484|
0000fa  3108              ADDS     r1,r1,#8
0000fc  6008              STR      r0,[r1,#0]
;;;240    
;;;241      /* Reset HSEON, CSSON and PLLON bits */
;;;242      RCC->CR &= (uint32_t)0xFEF6FFFF;
0000fe  4839              LDR      r0,|L1.484|
000100  6800              LDR      r0,[r0,#0]
000102  493d              LDR      r1,|L1.504|
000104  4008              ANDS     r0,r0,r1
000106  4937              LDR      r1,|L1.484|
000108  6008              STR      r0,[r1,#0]
;;;243    
;;;244      /* Reset PLLCFGR register */
;;;245      RCC->PLLCFGR = 0x24003010;
00010a  483c              LDR      r0,|L1.508|
00010c  1d09              ADDS     r1,r1,#4
00010e  6008              STR      r0,[r1,#0]
;;;246    
;;;247      /* Reset HSEBYP bit */
;;;248      RCC->CR &= (uint32_t)0xFFFBFFFF;
000110  1f08              SUBS     r0,r1,#4
000112  6800              LDR      r0,[r0,#0]
000114  f4202080          BIC      r0,r0,#0x40000
000118  1f09              SUBS     r1,r1,#4
00011a  6008              STR      r0,[r1,#0]
;;;249    
;;;250      /* Disable all interrupts */
;;;251      RCC->CIR = 0x00000000;
00011c  2000              MOVS     r0,#0
00011e  4931              LDR      r1,|L1.484|
000120  310c              ADDS     r1,r1,#0xc
000122  6008              STR      r0,[r1,#0]
;;;252    
;;;253    #ifdef DATA_IN_ExtSRAM
;;;254      SystemInit_ExtMemCtl(); 
;;;255    #endif /* DATA_IN_ExtSRAM */
;;;256             
;;;257      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;258         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;259      SetSysClock();
000124  f7fffffe          BL       SetSysClock
;;;260    
;;;261      /* Configure the Vector Table location add offset address ------------------*/
;;;262    #ifdef VECT_TAB_SRAM
;;;263      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;264    #else
;;;265      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
000128  f04f6000          MOV      r0,#0x8000000
00012c  4931              LDR      r1,|L1.500|
00012e  3980              SUBS     r1,r1,#0x80
000130  6008              STR      r0,[r1,#0]
;;;266    #endif
;;;267    }
000132  bd10              POP      {r4,pc}
;;;268    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;304      */
;;;305    void SystemCoreClockUpdate(void)
000134  b570              PUSH     {r4-r6,lr}
;;;306    {
;;;307      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
000136  2000              MOVS     r0,#0
000138  2200              MOVS     r2,#0
00013a  2302              MOVS     r3,#2
00013c  2400              MOVS     r4,#0
00013e  2102              MOVS     r1,#2
;;;308      
;;;309      /* Get SYSCLK source -------------------------------------------------------*/
;;;310      tmp = RCC->CFGR & RCC_CFGR_SWS;
000140  4d28              LDR      r5,|L1.484|
000142  3508              ADDS     r5,r5,#8
000144  682d              LDR      r5,[r5,#0]
000146  f005000c          AND      r0,r5,#0xc
;;;311    
;;;312      switch (tmp)
00014a  b120              CBZ      r0,|L1.342|
00014c  2804              CMP      r0,#4
00014e  d006              BEQ      |L1.350|
000150  2808              CMP      r0,#8
000152  d134              BNE      |L1.446|
000154  e007              B        |L1.358|
                  |L1.342|
;;;313      {
;;;314        case 0x00:  /* HSI used as system clock source */
;;;315          SystemCoreClock = HSI_VALUE;
000156  4d2a              LDR      r5,|L1.512|
000158  4e2a              LDR      r6,|L1.516|
00015a  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;316          break;
00015c  e033              B        |L1.454|
                  |L1.350|
;;;317        case 0x04:  /* HSE used as system clock source */
;;;318          SystemCoreClock = HSE_VALUE;
00015e  4d2a              LDR      r5,|L1.520|
000160  4e28              LDR      r6,|L1.516|
000162  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;319          break;
000164  e02f              B        |L1.454|
                  |L1.358|
;;;320        case 0x08:  /* PLL used as system clock source */
;;;321    
;;;322          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;323             SYSCLK = PLL_VCO / PLL_P
;;;324             */    
;;;325          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000166  4d1f              LDR      r5,|L1.484|
000168  1d2d              ADDS     r5,r5,#4
00016a  682d              LDR      r5,[r5,#0]
00016c  f3c55480          UBFX     r4,r5,#22,#1
;;;326          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
000170  4d1c              LDR      r5,|L1.484|
000172  1d2d              ADDS     r5,r5,#4
000174  682d              LDR      r5,[r5,#0]
000176  f005013f          AND      r1,r5,#0x3f
;;;327          
;;;328          if (pllsource != 0)
00017a  b154              CBZ      r4,|L1.402|
;;;329          {
;;;330            /* HSE used as PLL clock source */
;;;331            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
00017c  4d22              LDR      r5,|L1.520|
00017e  fbb5f5f1          UDIV     r5,r5,r1
000182  4e18              LDR      r6,|L1.484|
000184  1d36              ADDS     r6,r6,#4
000186  6836              LDR      r6,[r6,#0]
000188  f3c61688          UBFX     r6,r6,#6,#9
00018c  fb05f206          MUL      r2,r5,r6
000190  e009              B        |L1.422|
                  |L1.402|
;;;332          }
;;;333          else
;;;334          {
;;;335            /* HSI used as PLL clock source */
;;;336            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
000192  4d1b              LDR      r5,|L1.512|
000194  fbb5f5f1          UDIV     r5,r5,r1
000198  4e12              LDR      r6,|L1.484|
00019a  1d36              ADDS     r6,r6,#4
00019c  6836              LDR      r6,[r6,#0]
00019e  f3c61688          UBFX     r6,r6,#6,#9
0001a2  fb05f206          MUL      r2,r5,r6
                  |L1.422|
;;;337          }
;;;338    
;;;339          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
0001a6  4d0f              LDR      r5,|L1.484|
0001a8  1d2d              ADDS     r5,r5,#4
0001aa  682d              LDR      r5,[r5,#0]
0001ac  f3c54501          UBFX     r5,r5,#16,#2
0001b0  1c6d              ADDS     r5,r5,#1
0001b2  006b              LSLS     r3,r5,#1
;;;340          SystemCoreClock = pllvco/pllp;
0001b4  fbb2f5f3          UDIV     r5,r2,r3
0001b8  4e12              LDR      r6,|L1.516|
0001ba  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;341          break;
0001bc  e003              B        |L1.454|
                  |L1.446|
;;;342        default:
;;;343          SystemCoreClock = HSI_VALUE;
0001be  4d10              LDR      r5,|L1.512|
0001c0  4e10              LDR      r6,|L1.516|
0001c2  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;344          break;
0001c4  bf00              NOP      
                  |L1.454|
0001c6  bf00              NOP                            ;316
;;;345      }
;;;346      /* Compute HCLK frequency --------------------------------------------------*/
;;;347      /* Get HCLK prescaler */
;;;348      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
0001c8  4d06              LDR      r5,|L1.484|
0001ca  3508              ADDS     r5,r5,#8
0001cc  682d              LDR      r5,[r5,#0]
0001ce  f3c51503          UBFX     r5,r5,#4,#4
0001d2  4e0e              LDR      r6,|L1.524|
0001d4  5d70              LDRB     r0,[r6,r5]
;;;349      /* HCLK frequency */
;;;350      SystemCoreClock >>= tmp;
0001d6  4d0b              LDR      r5,|L1.516|
0001d8  682d              LDR      r5,[r5,#0]  ; SystemCoreClock
0001da  40c5              LSRS     r5,r5,r0
0001dc  4e09              LDR      r6,|L1.516|
0001de  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;351    }
0001e0  bd70              POP      {r4-r6,pc}
;;;352    
                          ENDP

0001e2  0000              DCW      0x0000
                  |L1.484|
                          DCD      0x40023800
                  |L1.488|
                          DCD      0x40007000
                  |L1.492|
                          DCD      0x07405408
                  |L1.496|
                          DCD      0x40023c00
                  |L1.500|
                          DCD      0xe000ed88
                  |L1.504|
                          DCD      0xfef6ffff
                  |L1.508|
                          DCD      0x24003010
                  |L1.512|
                          DCD      0x00f42400
                  |L1.516|
                          DCD      SystemCoreClock
                  |L1.520|
                          DCD      0x007a1200
                  |L1.524|
                          DCD      AHBPrescTable

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\src\\system_stm32f4xx.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 114 "..\\..\\libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 128
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

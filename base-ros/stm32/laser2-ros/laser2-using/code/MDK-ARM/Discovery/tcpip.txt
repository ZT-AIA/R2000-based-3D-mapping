; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\tcpip.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\tcpip.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\tcpip.crf ..\..\libraries\lwip-1.4.1\src\api\tcpip.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  tcpip_thread PROC
;;;73     static void
;;;74     tcpip_thread(void *arg)
000000  b508              PUSH     {r3,lr}
;;;75     {
;;;76       struct tcpip_msg *msg;
;;;77       LWIP_UNUSED_ARG(arg);
;;;78     
;;;79       if (tcpip_init_done != NULL) {
000002  48be              LDR      r0,|L1.764|
000004  6800              LDR      r0,[r0,#0]  ; tcpip_init_done
000006  b120              CBZ      r0,|L1.18|
;;;80         tcpip_init_done(tcpip_init_done_arg);
000008  48bd              LDR      r0,|L1.768|
00000a  6800              LDR      r0,[r0,#0]  ; tcpip_init_done_arg
00000c  49bb              LDR      r1,|L1.764|
00000e  6809              LDR      r1,[r1,#0]  ; tcpip_init_done
000010  4788              BLX      r1
                  |L1.18|
;;;81       }
;;;82     
;;;83       LOCK_TCPIP_CORE();
;;;84       while (1) {                          /* MAIN Loop */
000012  e05f              B        |L1.212|
                  |L1.20|
;;;85         UNLOCK_TCPIP_CORE();
;;;86         LWIP_TCPIP_THREAD_ALIVE();
;;;87         /* wait for a message, timeouts are processed while waiting */
;;;88         sys_timeouts_mbox_fetch(&mbox, (void **)&msg);
000014  4669              MOV      r1,sp
000016  48bb              LDR      r0,|L1.772|
000018  f7fffffe          BL       sys_timeouts_mbox_fetch
;;;89         LOCK_TCPIP_CORE();
;;;90         switch (msg->type) {
00001c  9800              LDR      r0,[sp,#0]
00001e  7800              LDRB     r0,[r0,#0]
000020  2806              CMP      r0,#6
000022  d251              BCS      |L1.200|
000024  e8dff000          TBB      [pc,r0]
000028  030d2632          DCB      0x03,0x0d,0x26,0x32
00002c  3e49              DCB      0x3e,0x49
;;;91     #if LWIP_NETCONN
;;;92         case TCPIP_MSG_API:
;;;93           LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: API message %p\n", (void *)msg));
00002e  bf00              NOP      
000030  bf00              NOP      
;;;94           msg->msg.apimsg->function(&(msg->msg.apimsg->msg));
000032  9a00              LDR      r2,[sp,#0]
000034  6892              LDR      r2,[r2,#8]
000036  1d10              ADDS     r0,r2,#4
000038  9a00              LDR      r2,[sp,#0]
00003a  6892              LDR      r2,[r2,#8]
00003c  6811              LDR      r1,[r2,#0]
00003e  4788              BLX      r1
;;;95           break;
000040  e047              B        |L1.210|
;;;96     #endif /* LWIP_NETCONN */
;;;97     
;;;98     #if !LWIP_TCPIP_CORE_LOCKING_INPUT
;;;99         case TCPIP_MSG_INPKT:
;;;100          LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
000042  bf00              NOP      
000044  bf00              NOP      
;;;101    #if LWIP_ETHERNET
;;;102          if (msg->msg.inp.netif->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
000046  9800              LDR      r0,[sp,#0]
000048  68c0              LDR      r0,[r0,#0xc]
00004a  f890002d          LDRB     r0,[r0,#0x2d]
00004e  f0000060          AND      r0,r0,#0x60
000052  b128              CBZ      r0,|L1.96|
;;;103            ethernet_input(msg->msg.inp.p, msg->msg.inp.netif);
000054  9a00              LDR      r2,[sp,#0]
000056  e9d20102          LDRD     r0,r1,[r2,#8]
00005a  f7fffffe          BL       ethernet_input
00005e  e004              B        |L1.106|
                  |L1.96|
;;;104          } else
;;;105    #endif /* LWIP_ETHERNET */
;;;106          {
;;;107            ip_input(msg->msg.inp.p, msg->msg.inp.netif);
000060  9a00              LDR      r2,[sp,#0]
000062  e9d20102          LDRD     r0,r1,[r2,#8]
000066  f7fffffe          BL       ip_input
                  |L1.106|
;;;108          }
;;;109          memp_free(MEMP_TCPIP_MSG_INPKT, msg);
00006a  2008              MOVS     r0,#8
00006c  9900              LDR      r1,[sp,#0]
00006e  f7fffffe          BL       memp_free
;;;110          break;
000072  e02e              B        |L1.210|
;;;111    #endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
;;;112    
;;;113    #if LWIP_NETIF_API
;;;114        case TCPIP_MSG_NETIFAPI:
;;;115          LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: Netif API message %p\n", (void *)msg));
;;;116          msg->msg.netifapimsg->function(&(msg->msg.netifapimsg->msg));
;;;117          break;
;;;118    #endif /* LWIP_NETIF_API */
;;;119    
;;;120    #if LWIP_TCPIP_TIMEOUT
;;;121        case TCPIP_MSG_TIMEOUT:
;;;122          LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));
000074  bf00              NOP      
000076  bf00              NOP      
;;;123          sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
000078  9b00              LDR      r3,[sp,#0]
00007a  3308              ADDS     r3,r3,#8
00007c  cb07              LDM      r3!,{r0-r2}
00007e  f7fffffe          BL       sys_timeout
;;;124          memp_free(MEMP_TCPIP_MSG_API, msg);
000082  2007              MOVS     r0,#7
000084  9900              LDR      r1,[sp,#0]
000086  f7fffffe          BL       memp_free
;;;125          break;
00008a  e022              B        |L1.210|
;;;126        case TCPIP_MSG_UNTIMEOUT:
;;;127          LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
00008c  bf00              NOP      
00008e  bf00              NOP      
;;;128          sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
000090  9a00              LDR      r2,[sp,#0]
000092  e9d20103          LDRD     r0,r1,[r2,#0xc]
000096  f7fffffe          BL       sys_untimeout
;;;129          memp_free(MEMP_TCPIP_MSG_API, msg);
00009a  2007              MOVS     r0,#7
00009c  9900              LDR      r1,[sp,#0]
00009e  f7fffffe          BL       memp_free
;;;130          break;
0000a2  e016              B        |L1.210|
;;;131    #endif /* LWIP_TCPIP_TIMEOUT */
;;;132    
;;;133        case TCPIP_MSG_CALLBACK:
;;;134          LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
0000a4  bf00              NOP      
0000a6  bf00              NOP      
;;;135          msg->msg.cb.function(msg->msg.cb.ctx);
0000a8  9a00              LDR      r2,[sp,#0]
0000aa  e9d21002          LDRD     r1,r0,[r2,#8]
0000ae  4788              BLX      r1
;;;136          memp_free(MEMP_TCPIP_MSG_API, msg);
0000b0  2007              MOVS     r0,#7
0000b2  9900              LDR      r1,[sp,#0]
0000b4  f7fffffe          BL       memp_free
;;;137          break;
0000b8  e00b              B        |L1.210|
;;;138    
;;;139        case TCPIP_MSG_CALLBACK_STATIC:
;;;140          LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
0000ba  bf00              NOP      
0000bc  bf00              NOP      
;;;141          msg->msg.cb.function(msg->msg.cb.ctx);
0000be  9a00              LDR      r2,[sp,#0]
0000c0  e9d21002          LDRD     r1,r0,[r2,#8]
0000c4  4788              BLX      r1
;;;142          break;
0000c6  e004              B        |L1.210|
                  |L1.200|
;;;143    
;;;144        default:
;;;145          LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
0000c8  bf00              NOP      
0000ca  bf00              NOP      
;;;146          LWIP_ASSERT("tcpip_thread: invalid message", 0);
0000cc  bf00              NOP      
0000ce  bf00              NOP      
;;;147          break;
0000d0  bf00              NOP      
                  |L1.210|
0000d2  bf00              NOP                            ;95
                  |L1.212|
0000d4  e79e              B        |L1.20|
;;;148        }
;;;149      }
;;;150    }
;;;151    
                          ENDP

                  tcpip_input PROC
;;;160    err_t
;;;161    tcpip_input(struct pbuf *p, struct netif *inp)
0000d6  b570              PUSH     {r4-r6,lr}
;;;162    {
0000d8  4605              MOV      r5,r0
0000da  460e              MOV      r6,r1
;;;163    #if LWIP_TCPIP_CORE_LOCKING_INPUT
;;;164      err_t ret;
;;;165      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_input: PACKET %p/%p\n", (void *)p, (void *)inp));
;;;166      LOCK_TCPIP_CORE();
;;;167    #if LWIP_ETHERNET
;;;168      if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
;;;169        ret = ethernet_input(p, inp);
;;;170      } else
;;;171    #endif /* LWIP_ETHERNET */
;;;172      {
;;;173        ret = ip_input(p, inp);
;;;174      }
;;;175      UNLOCK_TCPIP_CORE();
;;;176      return ret;
;;;177    #else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
;;;178      struct tcpip_msg *msg;
;;;179    
;;;180      if (!sys_mbox_valid(&mbox)) {
0000dc  4889              LDR      r0,|L1.772|
0000de  6800              LDR      r0,[r0,#0]  ; mbox
0000e0  b108              CBZ      r0,|L1.230|
0000e2  2001              MOVS     r0,#1
0000e4  e000              B        |L1.232|
                  |L1.230|
0000e6  2000              MOVS     r0,#0
                  |L1.232|
0000e8  b910              CBNZ     r0,|L1.240|
;;;181        return ERR_VAL;
0000ea  f06f0005          MVN      r0,#5
                  |L1.238|
;;;182      }
;;;183      msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
;;;184      if (msg == NULL) {
;;;185        return ERR_MEM;
;;;186      }
;;;187    
;;;188      msg->type = TCPIP_MSG_INPKT;
;;;189      msg->msg.inp.p = p;
;;;190      msg->msg.inp.netif = inp;
;;;191      if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
;;;192        memp_free(MEMP_TCPIP_MSG_INPKT, msg);
;;;193        return ERR_MEM;
;;;194      }
;;;195      return ERR_OK;
;;;196    #endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
;;;197    }
0000ee  bd70              POP      {r4-r6,pc}
                  |L1.240|
0000f0  2008              MOVS     r0,#8                 ;183
0000f2  f7fffffe          BL       memp_malloc
0000f6  4604              MOV      r4,r0                 ;183
0000f8  b914              CBNZ     r4,|L1.256|
0000fa  f04f30ff          MOV      r0,#0xffffffff        ;185
0000fe  e7f6              B        |L1.238|
                  |L1.256|
000100  2001              MOVS     r0,#1                 ;188
000102  7020              STRB     r0,[r4,#0]            ;188
000104  60a5              STR      r5,[r4,#8]            ;189
000106  60e6              STR      r6,[r4,#0xc]          ;190
000108  4621              MOV      r1,r4                 ;191
00010a  487e              LDR      r0,|L1.772|
00010c  f7fffffe          BL       sys_mbox_trypost
000110  b130              CBZ      r0,|L1.288|
000112  4621              MOV      r1,r4                 ;192
000114  2008              MOVS     r0,#8                 ;192
000116  f7fffffe          BL       memp_free
00011a  f04f30ff          MOV      r0,#0xffffffff        ;193
00011e  e7e6              B        |L1.238|
                  |L1.288|
000120  2000              MOVS     r0,#0                 ;195
000122  e7e4              B        |L1.238|
;;;198    
                          ENDP

                  tcpip_callback_with_block PROC
;;;210    err_t
;;;211    tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
000124  e92d41f0          PUSH     {r4-r8,lr}
;;;212    {
000128  4605              MOV      r5,r0
00012a  460e              MOV      r6,r1
00012c  4617              MOV      r7,r2
;;;213      struct tcpip_msg *msg;
;;;214    
;;;215      if (sys_mbox_valid(&mbox)) {
00012e  4875              LDR      r0,|L1.772|
000130  6800              LDR      r0,[r0,#0]  ; mbox
000132  b108              CBZ      r0,|L1.312|
000134  2001              MOVS     r0,#1
000136  e000              B        |L1.314|
                  |L1.312|
000138  2000              MOVS     r0,#0
                  |L1.314|
00013a  b300              CBZ      r0,|L1.382|
;;;216        msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
00013c  2007              MOVS     r0,#7
00013e  f7fffffe          BL       memp_malloc
000142  4604              MOV      r4,r0
;;;217        if (msg == NULL) {
000144  b91c              CBNZ     r4,|L1.334|
;;;218          return ERR_MEM;
000146  f04f30ff          MOV      r0,#0xffffffff
                  |L1.330|
;;;219        }
;;;220    
;;;221        msg->type = TCPIP_MSG_CALLBACK;
;;;222        msg->msg.cb.function = function;
;;;223        msg->msg.cb.ctx = ctx;
;;;224        if (block) {
;;;225          sys_mbox_post(&mbox, msg);
;;;226        } else {
;;;227          if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
;;;228            memp_free(MEMP_TCPIP_MSG_API, msg);
;;;229            return ERR_MEM;
;;;230          }
;;;231        }
;;;232        return ERR_OK;
;;;233      }
;;;234      return ERR_VAL;
;;;235    }
00014a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.334|
00014e  2004              MOVS     r0,#4                 ;221
000150  7020              STRB     r0,[r4,#0]            ;221
000152  60a5              STR      r5,[r4,#8]            ;222
000154  60e6              STR      r6,[r4,#0xc]          ;223
000156  b127              CBZ      r7,|L1.354|
000158  4621              MOV      r1,r4                 ;225
00015a  486a              LDR      r0,|L1.772|
00015c  f7fffffe          BL       sys_mbox_post
000160  e00b              B        |L1.378|
                  |L1.354|
000162  4621              MOV      r1,r4                 ;227
000164  4867              LDR      r0,|L1.772|
000166  f7fffffe          BL       sys_mbox_trypost
00016a  b130              CBZ      r0,|L1.378|
00016c  4621              MOV      r1,r4                 ;228
00016e  2007              MOVS     r0,#7                 ;228
000170  f7fffffe          BL       memp_free
000174  f04f30ff          MOV      r0,#0xffffffff        ;229
000178  e7e7              B        |L1.330|
                  |L1.378|
00017a  2000              MOVS     r0,#0                 ;232
00017c  e7e5              B        |L1.330|
                  |L1.382|
00017e  f06f0005          MVN      r0,#5                 ;234
000182  e7e2              B        |L1.330|
;;;236    
                          ENDP

                  tcpip_timeout PROC
;;;246    err_t
;;;247    tcpip_timeout(u32_t msecs, sys_timeout_handler h, void *arg)
000184  e92d41f0          PUSH     {r4-r8,lr}
;;;248    {
000188  4605              MOV      r5,r0
00018a  460e              MOV      r6,r1
00018c  4617              MOV      r7,r2
;;;249      struct tcpip_msg *msg;
;;;250    
;;;251      if (sys_mbox_valid(&mbox)) {
00018e  485d              LDR      r0,|L1.772|
000190  6800              LDR      r0,[r0,#0]  ; mbox
000192  b108              CBZ      r0,|L1.408|
000194  2001              MOVS     r0,#1
000196  e000              B        |L1.410|
                  |L1.408|
000198  2000              MOVS     r0,#0
                  |L1.410|
00019a  b198              CBZ      r0,|L1.452|
;;;252        msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
00019c  2007              MOVS     r0,#7
00019e  f7fffffe          BL       memp_malloc
0001a2  4604              MOV      r4,r0
;;;253        if (msg == NULL) {
0001a4  b91c              CBNZ     r4,|L1.430|
;;;254          return ERR_MEM;
0001a6  f04f30ff          MOV      r0,#0xffffffff
                  |L1.426|
;;;255        }
;;;256    
;;;257        msg->type = TCPIP_MSG_TIMEOUT;
;;;258        msg->msg.tmo.msecs = msecs;
;;;259        msg->msg.tmo.h = h;
;;;260        msg->msg.tmo.arg = arg;
;;;261        sys_mbox_post(&mbox, msg);
;;;262        return ERR_OK;
;;;263      }
;;;264      return ERR_VAL;
;;;265    }
0001aa  e8bd81f0          POP      {r4-r8,pc}
                  |L1.430|
0001ae  2002              MOVS     r0,#2                 ;257
0001b0  7020              STRB     r0,[r4,#0]            ;257
0001b2  60a5              STR      r5,[r4,#8]            ;258
0001b4  60e6              STR      r6,[r4,#0xc]          ;259
0001b6  6127              STR      r7,[r4,#0x10]         ;260
0001b8  4621              MOV      r1,r4                 ;261
0001ba  4852              LDR      r0,|L1.772|
0001bc  f7fffffe          BL       sys_mbox_post
0001c0  2000              MOVS     r0,#0                 ;262
0001c2  e7f2              B        |L1.426|
                  |L1.452|
0001c4  f06f0005          MVN      r0,#5                 ;264
0001c8  e7ef              B        |L1.426|
;;;266    
                          ENDP

                  tcpip_untimeout PROC
;;;275    err_t
;;;276    tcpip_untimeout(sys_timeout_handler h, void *arg)
0001ca  b570              PUSH     {r4-r6,lr}
;;;277    {
0001cc  4605              MOV      r5,r0
0001ce  460e              MOV      r6,r1
;;;278      struct tcpip_msg *msg;
;;;279    
;;;280      if (sys_mbox_valid(&mbox)) {
0001d0  484c              LDR      r0,|L1.772|
0001d2  6800              LDR      r0,[r0,#0]  ; mbox
0001d4  b108              CBZ      r0,|L1.474|
0001d6  2001              MOVS     r0,#1
0001d8  e000              B        |L1.476|
                  |L1.474|
0001da  2000              MOVS     r0,#0
                  |L1.476|
0001dc  b188              CBZ      r0,|L1.514|
;;;281        msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
0001de  2007              MOVS     r0,#7
0001e0  f7fffffe          BL       memp_malloc
0001e4  4604              MOV      r4,r0
;;;282        if (msg == NULL) {
0001e6  b914              CBNZ     r4,|L1.494|
;;;283          return ERR_MEM;
0001e8  f04f30ff          MOV      r0,#0xffffffff
                  |L1.492|
;;;284        }
;;;285    
;;;286        msg->type = TCPIP_MSG_UNTIMEOUT;
;;;287        msg->msg.tmo.h = h;
;;;288        msg->msg.tmo.arg = arg;
;;;289        sys_mbox_post(&mbox, msg);
;;;290        return ERR_OK;
;;;291      }
;;;292      return ERR_VAL;
;;;293    }
0001ec  bd70              POP      {r4-r6,pc}
                  |L1.494|
0001ee  2003              MOVS     r0,#3                 ;286
0001f0  7020              STRB     r0,[r4,#0]            ;286
0001f2  60e5              STR      r5,[r4,#0xc]          ;287
0001f4  6126              STR      r6,[r4,#0x10]         ;288
0001f6  4621              MOV      r1,r4                 ;289
0001f8  4842              LDR      r0,|L1.772|
0001fa  f7fffffe          BL       sys_mbox_post
0001fe  2000              MOVS     r0,#0                 ;290
000200  e7f4              B        |L1.492|
                  |L1.514|
000202  f06f0005          MVN      r0,#5                 ;292
000206  e7f1              B        |L1.492|
;;;294    #endif /* LWIP_TCPIP_TIMEOUT */
                          ENDP

                  tcpip_apimsg PROC
;;;305    err_t
;;;306    tcpip_apimsg(struct api_msg *apimsg)
000208  b510              PUSH     {r4,lr}
;;;307    {
00020a  b086              SUB      sp,sp,#0x18
00020c  4604              MOV      r4,r0
;;;308      struct tcpip_msg msg;
;;;309    #ifdef LWIP_DEBUG
;;;310      /* catch functions that don't set err */
;;;311      apimsg->msg.err = ERR_VAL;
00020e  21fa              MOVS     r1,#0xfa
000210  7221              STRB     r1,[r4,#8]
;;;312    #endif
;;;313      
;;;314      if (sys_mbox_valid(&mbox)) {
000212  483c              LDR      r0,|L1.772|
000214  6800              LDR      r0,[r0,#0]  ; mbox
000216  b108              CBZ      r0,|L1.540|
000218  2001              MOVS     r0,#1
00021a  e000              B        |L1.542|
                  |L1.540|
00021c  2000              MOVS     r0,#0
                  |L1.542|
00021e  b188              CBZ      r0,|L1.580|
;;;315        msg.type = TCPIP_MSG_API;
000220  2000              MOVS     r0,#0
000222  f88d0004          STRB     r0,[sp,#4]
;;;316        msg.msg.apimsg = apimsg;
000226  9403              STR      r4,[sp,#0xc]
;;;317        sys_mbox_post(&mbox, &msg);
000228  a901              ADD      r1,sp,#4
00022a  4836              LDR      r0,|L1.772|
00022c  f7fffffe          BL       sys_mbox_post
;;;318        sys_arch_sem_wait(&apimsg->msg.conn->op_completed, 0);
000230  6861              LDR      r1,[r4,#4]
000232  f101000c          ADD      r0,r1,#0xc
000236  2100              MOVS     r1,#0
000238  f7fffffe          BL       sys_arch_sem_wait
;;;319        return apimsg->msg.err;
00023c  f9940008          LDRSB    r0,[r4,#8]
                  |L1.576|
;;;320      }
;;;321      return ERR_VAL;
;;;322    }
000240  b006              ADD      sp,sp,#0x18
000242  bd10              POP      {r4,pc}
                  |L1.580|
000244  f06f0005          MVN      r0,#5                 ;321
000248  e7fa              B        |L1.576|
;;;323    
                          ENDP

                  tcpip_callbackmsg_new PROC
;;;407     */
;;;408    struct tcpip_callback_msg* tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
00024a  b570              PUSH     {r4-r6,lr}
;;;409    {
00024c  4605              MOV      r5,r0
00024e  460e              MOV      r6,r1
;;;410      struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
000250  2007              MOVS     r0,#7
000252  f7fffffe          BL       memp_malloc
000256  4604              MOV      r4,r0
;;;411      if (msg == NULL) {
000258  b90c              CBNZ     r4,|L1.606|
;;;412        return NULL;
00025a  2000              MOVS     r0,#0
                  |L1.604|
;;;413      }
;;;414      msg->type = TCPIP_MSG_CALLBACK_STATIC;
;;;415      msg->msg.cb.function = function;
;;;416      msg->msg.cb.ctx = ctx;
;;;417      return (struct tcpip_callback_msg*)msg;
;;;418    }
00025c  bd70              POP      {r4-r6,pc}
                  |L1.606|
00025e  2005              MOVS     r0,#5                 ;414
000260  7020              STRB     r0,[r4,#0]            ;414
000262  60a5              STR      r5,[r4,#8]            ;415
000264  60e6              STR      r6,[r4,#0xc]          ;416
000266  4620              MOV      r0,r4                 ;417
000268  e7f8              B        |L1.604|
;;;419    
                          ENDP

                  tcpip_callbackmsg_delete PROC
;;;424     */
;;;425    void tcpip_callbackmsg_delete(struct tcpip_callback_msg* msg)
00026a  b510              PUSH     {r4,lr}
;;;426    {
00026c  4604              MOV      r4,r0
;;;427      memp_free(MEMP_TCPIP_MSG_API, msg);
00026e  4621              MOV      r1,r4
000270  2007              MOVS     r0,#7
000272  f7fffffe          BL       memp_free
;;;428    }
000276  bd10              POP      {r4,pc}
;;;429    
                          ENDP

                  tcpip_trycallback PROC
;;;437    err_t
;;;438    tcpip_trycallback(struct tcpip_callback_msg* msg)
000278  b510              PUSH     {r4,lr}
;;;439    {
00027a  4604              MOV      r4,r0
;;;440      if (!sys_mbox_valid(&mbox)) {
00027c  4821              LDR      r0,|L1.772|
00027e  6800              LDR      r0,[r0,#0]  ; mbox
000280  b108              CBZ      r0,|L1.646|
000282  2001              MOVS     r0,#1
000284  e000              B        |L1.648|
                  |L1.646|
000286  2000              MOVS     r0,#0
                  |L1.648|
000288  b910              CBNZ     r0,|L1.656|
;;;441        return ERR_VAL;
00028a  f06f0005          MVN      r0,#5
                  |L1.654|
;;;442      }
;;;443      return sys_mbox_trypost(&mbox, msg);
;;;444    }
00028e  bd10              POP      {r4,pc}
                  |L1.656|
000290  4621              MOV      r1,r4                 ;443
000292  481c              LDR      r0,|L1.772|
000294  f7fffffe          BL       sys_mbox_trypost
000298  e7f9              B        |L1.654|
;;;445    
                          ENDP

                  tcpip_init PROC
;;;454    void
;;;455    tcpip_init(tcpip_init_done_fn initfunc, void *arg)
00029a  b538              PUSH     {r3-r5,lr}
;;;456    {
00029c  4604              MOV      r4,r0
00029e  460d              MOV      r5,r1
;;;457      lwip_init();
0002a0  f7fffffe          BL       lwip_init
;;;458    
;;;459      tcpip_init_done = initfunc;
0002a4  4815              LDR      r0,|L1.764|
0002a6  6004              STR      r4,[r0,#0]  ; tcpip_init_done
;;;460      tcpip_init_done_arg = arg;
0002a8  4815              LDR      r0,|L1.768|
0002aa  6005              STR      r5,[r0,#0]  ; tcpip_init_done_arg
;;;461      if(sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
0002ac  2110              MOVS     r1,#0x10
0002ae  4815              LDR      r0,|L1.772|
0002b0  f7fffffe          BL       sys_mbox_new
0002b4  b108              CBZ      r0,|L1.698|
;;;462        LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
0002b6  bf00              NOP      
0002b8  bf00              NOP      
                  |L1.698|
;;;463      }
;;;464    #if LWIP_TCPIP_CORE_LOCKING
;;;465      if(sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
;;;466        LWIP_ASSERT("failed to create lock_tcpip_core", 0);
;;;467      }
;;;468    #endif /* LWIP_TCPIP_CORE_LOCKING */
;;;469    
;;;470      sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
0002ba  2002              MOVS     r0,#2
0002bc  0243              LSLS     r3,r0,#9
0002be  2200              MOVS     r2,#0
0002c0  4911              LDR      r1,|L1.776|
0002c2  9000              STR      r0,[sp,#0]
0002c4  a011              ADR      r0,|L1.780|
0002c6  f7fffffe          BL       sys_thread_new
;;;471    }
0002ca  bd38              POP      {r3-r5,pc}
;;;472    
                          ENDP

                  pbuf_free_int PROC
;;;479    static void
;;;480    pbuf_free_int(void *p)
0002cc  b570              PUSH     {r4-r6,lr}
;;;481    {
0002ce  4604              MOV      r4,r0
;;;482      struct pbuf *q = (struct pbuf *)p;
0002d0  4625              MOV      r5,r4
;;;483      pbuf_free(q);
0002d2  4628              MOV      r0,r5
0002d4  f7fffffe          BL       pbuf_free
;;;484    }
0002d8  bd70              POP      {r4-r6,pc}
;;;485    
                          ENDP

                  pbuf_free_callback PROC
;;;492    err_t
;;;493    pbuf_free_callback(struct pbuf *p)
0002da  b510              PUSH     {r4,lr}
;;;494    {
0002dc  4604              MOV      r4,r0
;;;495      return tcpip_callback_with_block(pbuf_free_int, p, 0);
0002de  2200              MOVS     r2,#0
0002e0  4621              MOV      r1,r4
0002e2  480c              LDR      r0,|L1.788|
0002e4  f7fffffe          BL       tcpip_callback_with_block
;;;496    }
0002e8  bd10              POP      {r4,pc}
;;;497    
                          ENDP

                  mem_free_callback PROC
;;;505    err_t
;;;506    mem_free_callback(void *m)
0002ea  b510              PUSH     {r4,lr}
;;;507    {
0002ec  4604              MOV      r4,r0
;;;508      return tcpip_callback_with_block(mem_free, m, 0);
0002ee  2200              MOVS     r2,#0
0002f0  4621              MOV      r1,r4
0002f2  4809              LDR      r0,|L1.792|
0002f4  f7fffffe          BL       tcpip_callback_with_block
;;;509    }
0002f8  bd10              POP      {r4,pc}
;;;510    
                          ENDP

0002fa  0000              DCW      0x0000
                  |L1.764|
                          DCD      tcpip_init_done
                  |L1.768|
                          DCD      tcpip_init_done_arg
                  |L1.772|
                          DCD      mbox
                  |L1.776|
                          DCD      tcpip_thread
                  |L1.780|
00030c  54435049          DCB      "TCPIP",0
000310  5000    
000312  00                DCB      0
000313  00                DCB      0
                  |L1.788|
                          DCD      pbuf_free_int
                  |L1.792|
                          DCD      mem_free

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  mbox
                          %        92

                          AREA ||.data||, DATA, ALIGN=2

                  tcpip_init_done
                          DCD      0x00000000
                  tcpip_init_done_arg
                          DCD      0x00000000

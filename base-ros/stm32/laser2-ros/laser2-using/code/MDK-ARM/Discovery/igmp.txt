; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\igmp.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\igmp.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\igmp.crf ..\..\libraries\lwip-1.4.1\src\core\ipv4\igmp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  igmp_init PROC
;;;155    void
;;;156    igmp_init(void)
000000  bf00              NOP      
;;;157    {
;;;158      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));
000002  bf00              NOP      
;;;159    
;;;160      IP4_ADDR(&allsystems, 224, 0, 0, 1);
000004  48f8              LDR      r0,|L1.1000|
000006  49f9              LDR      r1,|L1.1004|
000008  6008              STR      r0,[r1,#0]  ; allsystems
;;;161      IP4_ADDR(&allrouters, 224, 0, 0, 2);
00000a  48f9              LDR      r0,|L1.1008|
00000c  49f9              LDR      r1,|L1.1012|
00000e  6008              STR      r0,[r1,#0]  ; allrouters
;;;162    }
000010  4770              BX       lr
;;;163    
                          ENDP

                  igmp_dump_group_list PROC
;;;168    void
;;;169    igmp_dump_group_list()
000012  49f9              LDR      r1,|L1.1016|
;;;170    { 
;;;171      struct igmp_group *group = igmp_group_list;
000014  6808              LDR      r0,[r1,#0]  ; igmp_group_list
;;;172    
;;;173      while (group != NULL) {
000016  e006              B        |L1.38|
                  |L1.24|
;;;174        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_dump_group_list: [%"U32_F"] ", (u32_t)(group->group_state)));
000018  bf00              NOP      
00001a  bf00              NOP      
;;;175        ip_addr_debug_print(IGMP_DEBUG, &group->group_address);
00001c  bf00              NOP      
00001e  bf00              NOP      
;;;176        LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", group->netif));
000020  bf00              NOP      
000022  bf00              NOP      
;;;177        group = group->next;
000024  6800              LDR      r0,[r0,#0]
                  |L1.38|
000026  2800              CMP      r0,#0                 ;173
000028  d1f6              BNE      |L1.24|
;;;178      }
;;;179      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));
00002a  bf00              NOP      
00002c  bf00              NOP      
;;;180    }
00002e  4770              BX       lr
;;;181    #else
                          ENDP

                  igmp_lookfor_group PROC
;;;289    struct igmp_group *
;;;290    igmp_lookfor_group(struct netif *ifp, ip_addr_t *addr)
000030  b510              PUSH     {r4,lr}
;;;291    {
000032  4602              MOV      r2,r0
000034  460b              MOV      r3,r1
;;;292      struct igmp_group *group = igmp_group_list;
000036  48f0              LDR      r0,|L1.1016|
000038  6801              LDR      r1,[r0,#0]  ; igmp_group_list
;;;293    
;;;294      while (group != NULL) {
00003a  e009              B        |L1.80|
                  |L1.60|
;;;295        if ((group->netif == ifp) && (ip_addr_cmp(&(group->group_address), addr))) {
00003c  6848              LDR      r0,[r1,#4]
00003e  4290              CMP      r0,r2
000040  d105              BNE      |L1.78|
000042  6888              LDR      r0,[r1,#8]
000044  681c              LDR      r4,[r3,#0]
000046  42a0              CMP      r0,r4
000048  d101              BNE      |L1.78|
;;;296          return group;
00004a  4608              MOV      r0,r1
                  |L1.76|
;;;297        }
;;;298        group = group->next;
;;;299      }
;;;300    
;;;301      /* to be clearer, we return NULL here instead of
;;;302       * 'group' (which is also NULL at this point).
;;;303       */
;;;304      return NULL;
;;;305    }
00004c  bd10              POP      {r4,pc}
                  |L1.78|
00004e  6809              LDR      r1,[r1,#0]            ;298
                  |L1.80|
000050  2900              CMP      r1,#0                 ;294
000052  d1f3              BNE      |L1.60|
000054  2000              MOVS     r0,#0                 ;304
000056  e7f9              B        |L1.76|
;;;306    
                          ENDP

                  igmp_lookup_group PROC
;;;315    struct igmp_group *
;;;316    igmp_lookup_group(struct netif *ifp, ip_addr_t *addr)
000058  b570              PUSH     {r4-r6,lr}
;;;317    {
00005a  4606              MOV      r6,r0
00005c  460d              MOV      r5,r1
;;;318      struct igmp_group *group = igmp_group_list;
00005e  48e6              LDR      r0,|L1.1016|
000060  6804              LDR      r4,[r0,#0]  ; igmp_group_list
;;;319      
;;;320      /* Search if the group already exists */
;;;321      group = igmp_lookfor_group(ifp, addr);
000062  4629              MOV      r1,r5
000064  4630              MOV      r0,r6
000066  f7fffffe          BL       igmp_lookfor_group
00006a  4604              MOV      r4,r0
;;;322      if (group != NULL) {
00006c  b10c              CBZ      r4,|L1.114|
;;;323        /* Group already exists. */
;;;324        return group;
00006e  4620              MOV      r0,r4
                  |L1.112|
;;;325      }
;;;326    
;;;327      /* Group doesn't exist yet, create a new one */
;;;328      group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
;;;329      if (group != NULL) {
;;;330        group->netif              = ifp;
;;;331        ip_addr_set(&(group->group_address), addr);
;;;332        group->timer              = 0; /* Not running */
;;;333        group->group_state        = IGMP_GROUP_NON_MEMBER;
;;;334        group->last_reporter_flag = 0;
;;;335        group->use                = 0;
;;;336        group->next               = igmp_group_list;
;;;337        
;;;338        igmp_group_list = group;
;;;339      }
;;;340    
;;;341      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
;;;342      ip_addr_debug_print(IGMP_DEBUG, addr);
;;;343      LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", ifp));
;;;344    
;;;345      return group;
;;;346    }
000070  bd70              POP      {r4-r6,pc}
                  |L1.114|
000072  2009              MOVS     r0,#9                 ;328
000074  f7fffffe          BL       memp_malloc
000078  4604              MOV      r4,r0                 ;328
00007a  b17c              CBZ      r4,|L1.156|
00007c  6066              STR      r6,[r4,#4]            ;330
00007e  b90d              CBNZ     r5,|L1.132|
000080  2000              MOVS     r0,#0                 ;331
000082  e000              B        |L1.134|
                  |L1.132|
000084  6828              LDR      r0,[r5,#0]            ;331
                  |L1.134|
000086  60a0              STR      r0,[r4,#8]            ;331
000088  2000              MOVS     r0,#0                 ;332
00008a  81e0              STRH     r0,[r4,#0xe]          ;332
00008c  7360              STRB     r0,[r4,#0xd]          ;333
00008e  7320              STRB     r0,[r4,#0xc]          ;334
000090  7420              STRB     r0,[r4,#0x10]         ;335
000092  48d9              LDR      r0,|L1.1016|
000094  6800              LDR      r0,[r0,#0]            ;336  ; igmp_group_list
000096  6020              STR      r0,[r4,#0]            ;336
000098  48d7              LDR      r0,|L1.1016|
00009a  6004              STR      r4,[r0,#0]            ;338  ; igmp_group_list
                  |L1.156|
00009c  bf00              NOP                            ;341
00009e  bf00              NOP                            ;341
0000a0  bf00              NOP                            ;342
0000a2  bf00              NOP                            ;342
0000a4  bf00              NOP                            ;343
0000a6  bf00              NOP                            ;343
0000a8  4620              MOV      r0,r4                 ;345
0000aa  e7e1              B        |L1.112|
;;;347    
                          ENDP

                  igmp_start PROC
;;;190    err_t
;;;191    igmp_start(struct netif *netif)
0000ac  b570              PUSH     {r4-r6,lr}
;;;192    {
0000ae  4605              MOV      r5,r0
;;;193      struct igmp_group* group;
;;;194    
;;;195      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", netif));
0000b0  bf00              NOP      
0000b2  bf00              NOP      
;;;196    
;;;197      group = igmp_lookup_group(netif, &allsystems);
0000b4  49cd              LDR      r1,|L1.1004|
0000b6  4628              MOV      r0,r5
0000b8  f7fffffe          BL       igmp_lookup_group
0000bc  4604              MOV      r4,r0
;;;198    
;;;199      if (group != NULL) {
0000be  b19c              CBZ      r4,|L1.232|
;;;200        group->group_state = IGMP_GROUP_IDLE_MEMBER;
0000c0  2002              MOVS     r0,#2
0000c2  7360              STRB     r0,[r4,#0xd]
;;;201        group->use++;
0000c4  7c20              LDRB     r0,[r4,#0x10]
0000c6  1c40              ADDS     r0,r0,#1
0000c8  7420              STRB     r0,[r4,#0x10]
;;;202    
;;;203        /* Allow the igmp messages at the MAC level */
;;;204        if (netif->igmp_mac_filter != NULL) {
0000ca  6b68              LDR      r0,[r5,#0x34]
0000cc  b150              CBZ      r0,|L1.228|
;;;205          LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
0000ce  bf00              NOP      
0000d0  bf00              NOP      
;;;206          ip_addr_debug_print(IGMP_DEBUG, &allsystems);
0000d2  bf00              NOP      
0000d4  bf00              NOP      
;;;207          LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", netif));
0000d6  bf00              NOP      
0000d8  bf00              NOP      
;;;208          netif->igmp_mac_filter(netif, &allsystems, IGMP_ADD_MAC_FILTER);
0000da  2201              MOVS     r2,#1
0000dc  49c3              LDR      r1,|L1.1004|
0000de  4628              MOV      r0,r5
0000e0  6b6b              LDR      r3,[r5,#0x34]
0000e2  4798              BLX      r3
                  |L1.228|
;;;209        }
;;;210    
;;;211        return ERR_OK;
0000e4  2000              MOVS     r0,#0
                  |L1.230|
;;;212      }
;;;213    
;;;214      return ERR_MEM;
;;;215    }
0000e6  bd70              POP      {r4-r6,pc}
                  |L1.232|
0000e8  f04f30ff          MOV      r0,#0xffffffff        ;214
0000ec  e7fb              B        |L1.230|
;;;216    
                          ENDP

                  igmp_stop PROC
;;;222    err_t
;;;223    igmp_stop(struct netif *netif)
0000ee  e92d41f0          PUSH     {r4-r8,lr}
;;;224    {
0000f2  4605              MOV      r5,r0
;;;225      struct igmp_group *group = igmp_group_list;
0000f4  48c0              LDR      r0,|L1.1016|
0000f6  6804              LDR      r4,[r0,#0]  ; igmp_group_list
;;;226      struct igmp_group *prev  = NULL;
0000f8  2700              MOVS     r7,#0
;;;227      struct igmp_group *next;
;;;228    
;;;229      /* look for groups joined on this interface further down the list */
;;;230      while (group != NULL) {
0000fa  e020              B        |L1.318|
                  |L1.252|
;;;231        next = group->next;
0000fc  6826              LDR      r6,[r4,#0]
;;;232        /* is it a group joined on this interface? */
;;;233        if (group->netif == netif) {
0000fe  6860              LDR      r0,[r4,#4]
000100  42a8              CMP      r0,r5
000102  d11a              BNE      |L1.314|
;;;234          /* is it the first group of the list? */
;;;235          if (group == igmp_group_list) {
000104  48bc              LDR      r0,|L1.1016|
000106  6800              LDR      r0,[r0,#0]  ; igmp_group_list
000108  4284              CMP      r4,r0
00010a  d101              BNE      |L1.272|
;;;236            igmp_group_list = next;
00010c  48ba              LDR      r0,|L1.1016|
00010e  6006              STR      r6,[r0,#0]  ; igmp_group_list
                  |L1.272|
;;;237          }
;;;238          /* is there a "previous" group defined? */
;;;239          if (prev != NULL) {
000110  b107              CBZ      r7,|L1.276|
;;;240            prev->next = next;
000112  603e              STR      r6,[r7,#0]
                  |L1.276|
;;;241          }
;;;242          /* disable the group at the MAC level */
;;;243          if (netif->igmp_mac_filter != NULL) {
000114  6b68              LDR      r0,[r5,#0x34]
000116  b158              CBZ      r0,|L1.304|
;;;244            LWIP_DEBUGF(IGMP_DEBUG, ("igmp_stop: igmp_mac_filter(DEL "));
000118  bf00              NOP      
00011a  bf00              NOP      
;;;245            ip_addr_debug_print(IGMP_DEBUG, &group->group_address);
00011c  bf00              NOP      
00011e  bf00              NOP      
;;;246            LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", netif));
000120  bf00              NOP      
000122  bf00              NOP      
;;;247            netif->igmp_mac_filter(netif, &(group->group_address), IGMP_DEL_MAC_FILTER);
000124  2200              MOVS     r2,#0
000126  f1040108          ADD      r1,r4,#8
00012a  4628              MOV      r0,r5
00012c  6b6b              LDR      r3,[r5,#0x34]
00012e  4798              BLX      r3
                  |L1.304|
;;;248          }
;;;249          /* free group */
;;;250          memp_free(MEMP_IGMP_GROUP, group);
000130  4621              MOV      r1,r4
000132  2009              MOVS     r0,#9
000134  f7fffffe          BL       memp_free
000138  e000              B        |L1.316|
                  |L1.314|
;;;251        } else {
;;;252          /* change the "previous" */
;;;253          prev = group;
00013a  4627              MOV      r7,r4
                  |L1.316|
;;;254        }
;;;255        /* move to "next" */
;;;256        group = next;
00013c  4634              MOV      r4,r6
                  |L1.318|
00013e  2c00              CMP      r4,#0                 ;230
000140  d1dc              BNE      |L1.252|
;;;257      }
;;;258      return ERR_OK;
000142  2000              MOVS     r0,#0
;;;259    }
000144  e8bd81f0          POP      {r4-r8,pc}
;;;260    
                          ENDP

                  igmp_start_timer PROC
;;;697    static void
;;;698    igmp_start_timer(struct igmp_group *group, u8_t max_time)
000148  b570              PUSH     {r4-r6,lr}
;;;699    {
00014a  4605              MOV      r5,r0
00014c  460c              MOV      r4,r1
;;;700      /* ensure the input value is > 0 */
;;;701      if (max_time == 0) {
00014e  b904              CBNZ     r4,|L1.338|
;;;702        max_time = 1;
000150  2401              MOVS     r4,#1
                  |L1.338|
;;;703      }
;;;704      /* ensure the random value is > 0 */
;;;705      group->timer = (LWIP_RAND() % (max_time - 1)) + 1;
000152  f7fffffe          BL       rand
000156  1e61              SUBS     r1,r4,#1
000158  fb90f2f1          SDIV     r2,r0,r1
00015c  fb010012          MLS      r0,r1,r2,r0
000160  1c40              ADDS     r0,r0,#1
000162  81e8              STRH     r0,[r5,#0xe]
;;;706    }
000164  bd70              POP      {r4-r6,pc}
;;;707    
                          ENDP

                  igmp_delaying_member PROC
;;;714    static void
;;;715    igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
000166  b570              PUSH     {r4-r6,lr}
;;;716    {
000168  4604              MOV      r4,r0
00016a  460d              MOV      r5,r1
;;;717      if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
00016c  7b60              LDRB     r0,[r4,#0xd]
00016e  2802              CMP      r0,#2
000170  d007              BEQ      |L1.386|
;;;718         ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
000172  7b60              LDRB     r0,[r4,#0xd]
000174  2801              CMP      r0,#1
000176  d10a              BNE      |L1.398|
;;;719          ((group->timer == 0) || (maxresp < group->timer)))) {
000178  89e0              LDRH     r0,[r4,#0xe]
00017a  b110              CBZ      r0,|L1.386|
00017c  89e0              LDRH     r0,[r4,#0xe]
00017e  42a8              CMP      r0,r5
000180  dd05              BLE      |L1.398|
                  |L1.386|
;;;720        igmp_start_timer(group, maxresp);
000182  4629              MOV      r1,r5
000184  4620              MOV      r0,r4
000186  f7fffffe          BL       igmp_start_timer
;;;721        group->group_state = IGMP_GROUP_DELAYING_MEMBER;
00018a  2001              MOVS     r0,#1
00018c  7360              STRB     r0,[r4,#0xd]
                  |L1.398|
;;;722      }
;;;723    }
00018e  bd70              POP      {r4-r6,pc}
;;;724    
                          ENDP

                  igmp_report_groups PROC
;;;266    void
;;;267    igmp_report_groups(struct netif *netif)
000190  b570              PUSH     {r4-r6,lr}
;;;268    {
000192  4605              MOV      r5,r0
;;;269      struct igmp_group *group = igmp_group_list;
000194  4898              LDR      r0,|L1.1016|
000196  6804              LDR      r4,[r0,#0]  ; igmp_group_list
;;;270    
;;;271      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", netif));
000198  bf00              NOP      
00019a  bf00              NOP      
;;;272    
;;;273      while (group != NULL) {
00019c  e007              B        |L1.430|
                  |L1.414|
;;;274        if (group->netif == netif) {
00019e  6860              LDR      r0,[r4,#4]
0001a0  42a8              CMP      r0,r5
0001a2  d103              BNE      |L1.428|
;;;275          igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
0001a4  2105              MOVS     r1,#5
0001a6  4620              MOV      r0,r4
0001a8  f7fffffe          BL       igmp_delaying_member
                  |L1.428|
;;;276        }
;;;277        group = group->next;
0001ac  6824              LDR      r4,[r4,#0]
                  |L1.430|
0001ae  2c00              CMP      r4,#0                 ;273
0001b0  d1f5              BNE      |L1.414|
;;;278      }
;;;279    }
0001b2  bd70              POP      {r4-r6,pc}
;;;280    
                          ENDP

                  igmp_remove_group PROC
;;;354    static err_t
;;;355    igmp_remove_group(struct igmp_group *group)
0001b4  b570              PUSH     {r4-r6,lr}
;;;356    {
0001b6  4604              MOV      r4,r0
;;;357      err_t err = ERR_OK;
0001b8  2500              MOVS     r5,#0
;;;358    
;;;359      /* Is it the first group? */
;;;360      if (igmp_group_list == group) {
0001ba  488f              LDR      r0,|L1.1016|
0001bc  6800              LDR      r0,[r0,#0]  ; igmp_group_list
0001be  42a0              CMP      r0,r4
0001c0  d103              BNE      |L1.458|
;;;361        igmp_group_list = group->next;
0001c2  498d              LDR      r1,|L1.1016|
0001c4  6820              LDR      r0,[r4,#0]
0001c6  6008              STR      r0,[r1,#0]  ; igmp_group_list
0001c8  e010              B        |L1.492|
                  |L1.458|
;;;362      } else {
;;;363        /* look for group further down the list */
;;;364        struct igmp_group *tmpGroup;
;;;365        for (tmpGroup = igmp_group_list; tmpGroup != NULL; tmpGroup = tmpGroup->next) {
0001ca  498b              LDR      r1,|L1.1016|
0001cc  6808              LDR      r0,[r1,#0]  ; igmp_group_list
0001ce  e006              B        |L1.478|
                  |L1.464|
;;;366          if (tmpGroup->next == group) {
0001d0  6801              LDR      r1,[r0,#0]
0001d2  42a1              CMP      r1,r4
0001d4  d102              BNE      |L1.476|
;;;367            tmpGroup->next = group->next;
0001d6  6821              LDR      r1,[r4,#0]
0001d8  6001              STR      r1,[r0,#0]
;;;368            break;
0001da  e002              B        |L1.482|
                  |L1.476|
0001dc  6800              LDR      r0,[r0,#0]            ;365
                  |L1.478|
0001de  2800              CMP      r0,#0                 ;365
0001e0  d1f6              BNE      |L1.464|
                  |L1.482|
0001e2  bf00              NOP      
;;;369          }
;;;370        }
;;;371        /* Group not found in the global igmp_group_list */
;;;372        if (tmpGroup == NULL)
0001e4  b908              CBNZ     r0,|L1.490|
;;;373          err = ERR_ARG;
0001e6  f06f050d          MVN      r5,#0xd
                  |L1.490|
;;;374      }
0001ea  bf00              NOP      
                  |L1.492|
;;;375      /* free group */
;;;376      memp_free(MEMP_IGMP_GROUP, group);
0001ec  4621              MOV      r1,r4
0001ee  2009              MOVS     r0,#9
0001f0  f7fffffe          BL       memp_free
;;;377    
;;;378      return err;
0001f4  4628              MOV      r0,r5
;;;379    }
0001f6  bd70              POP      {r4-r6,pc}
;;;380    
                          ENDP

                  igmp_input PROC
;;;388    void
;;;389    igmp_input(struct pbuf *p, struct netif *inp, ip_addr_t *dest)
0001f8  e92d4ff8          PUSH     {r3-r11,lr}
;;;390    {
0001fc  4607              MOV      r7,r0
0001fe  4689              MOV      r9,r1
000200  4690              MOV      r8,r2
;;;391      struct ip_hdr *    iphdr;
;;;392      struct igmp_msg*   igmp;
;;;393      struct igmp_group* group;
;;;394      struct igmp_group* groupref;
;;;395    
;;;396      IGMP_STATS_INC(igmp.recv);
;;;397    
;;;398      /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */    
;;;399      iphdr = (struct ip_hdr *)p->payload;
000202  f8d7a004          LDR      r10,[r7,#4]
;;;400      if (pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4)) || (p->len < IGMP_MINLEN)) {
000206  f89a0000          LDRB     r0,[r10,#0]
00020a  0700              LSLS     r0,r0,#28
00020c  0e80              LSRS     r0,r0,#26
00020e  4241              RSBS     r1,r0,#0
000210  4638              MOV      r0,r7
000212  f7fffffe          BL       pbuf_header
000216  b910              CBNZ     r0,|L1.542|
000218  8978              LDRH     r0,[r7,#0xa]
00021a  2808              CMP      r0,#8
00021c  da06              BGE      |L1.556|
                  |L1.542|
;;;401        pbuf_free(p);
00021e  4638              MOV      r0,r7
000220  f7fffffe          BL       pbuf_free
;;;402        IGMP_STATS_INC(igmp.lenerr);
;;;403        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
000224  bf00              NOP      
000226  bf00              NOP      
                  |L1.552|
;;;404        return;
;;;405      }
;;;406    
;;;407      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: message from "));
;;;408      ip_addr_debug_print(IGMP_DEBUG, &(iphdr->src));
;;;409      LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
;;;410      ip_addr_debug_print(IGMP_DEBUG, &(iphdr->dest));
;;;411      LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", inp));
;;;412    
;;;413      /* Now calculate and check the checksum */
;;;414      igmp = (struct igmp_msg *)p->payload;
;;;415      if (inet_chksum(igmp, p->len)) {
;;;416        pbuf_free(p);
;;;417        IGMP_STATS_INC(igmp.chkerr);
;;;418        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
;;;419        return;
;;;420      }
;;;421    
;;;422      /* Packet is ok so find an existing group */
;;;423      group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
;;;424      
;;;425      /* If group can be found or create... */
;;;426      if (!group) {
;;;427        pbuf_free(p);
;;;428        IGMP_STATS_INC(igmp.drop);
;;;429        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
;;;430        return;
;;;431      }
;;;432    
;;;433      /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
;;;434      switch (igmp->igmp_msgtype) {
;;;435       case IGMP_MEMB_QUERY: {
;;;436         /* IGMP_MEMB_QUERY to the "all systems" address ? */
;;;437         if ((ip_addr_cmp(dest, &allsystems)) && ip_addr_isany(&igmp->igmp_group_address)) {
;;;438           /* THIS IS THE GENERAL QUERY */
;;;439           LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
;;;440    
;;;441           if (igmp->igmp_maxresp == 0) {
;;;442             IGMP_STATS_INC(igmp.rx_v1);
;;;443             LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
;;;444             igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
;;;445           } else {
;;;446             IGMP_STATS_INC(igmp.rx_general);
;;;447           }
;;;448    
;;;449           groupref = igmp_group_list;
;;;450           while (groupref) {
;;;451             /* Do not send messages on the all systems group address! */
;;;452             if ((groupref->netif == inp) && (!(ip_addr_cmp(&(groupref->group_address), &allsystems)))) {
;;;453               igmp_delaying_member(groupref, igmp->igmp_maxresp);
;;;454             }
;;;455             groupref = groupref->next;
;;;456           }
;;;457         } else {
;;;458           /* IGMP_MEMB_QUERY to a specific group ? */
;;;459           if (!ip_addr_isany(&igmp->igmp_group_address)) {
;;;460             LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
;;;461             ip_addr_debug_print(IGMP_DEBUG, &igmp->igmp_group_address);
;;;462             if (ip_addr_cmp(dest, &allsystems)) {
;;;463               ip_addr_t groupaddr;
;;;464               LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
;;;465               /* we first need to re-look for the group since we used dest last time */
;;;466               ip_addr_copy(groupaddr, igmp->igmp_group_address);
;;;467               group = igmp_lookfor_group(inp, &groupaddr);
;;;468             } else {
;;;469               LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
;;;470             }
;;;471    
;;;472             if (group != NULL) {
;;;473               IGMP_STATS_INC(igmp.rx_group);
;;;474               igmp_delaying_member(group, igmp->igmp_maxresp);
;;;475             } else {
;;;476               IGMP_STATS_INC(igmp.drop);
;;;477             }
;;;478           } else {
;;;479             IGMP_STATS_INC(igmp.proterr);
;;;480           }
;;;481         }
;;;482         break;
;;;483       }
;;;484       case IGMP_V2_MEMB_REPORT: {
;;;485         LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
;;;486         IGMP_STATS_INC(igmp.rx_report);
;;;487         if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
;;;488           /* This is on a specific group we have already looked up */
;;;489           group->timer = 0; /* stopped */
;;;490           group->group_state = IGMP_GROUP_IDLE_MEMBER;
;;;491           group->last_reporter_flag = 0;
;;;492         }
;;;493         break;
;;;494       }
;;;495       default: {
;;;496         LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
;;;497           igmp->igmp_msgtype, group->group_state, &group, group->netif));
;;;498         IGMP_STATS_INC(igmp.proterr);
;;;499         break;
;;;500       }
;;;501      }
;;;502    
;;;503      pbuf_free(p);
;;;504      return;
;;;505    }
000228  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.556|
00022c  bf00              NOP                            ;407
00022e  bf00              NOP                            ;407
000230  bf00              NOP                            ;408
000232  bf00              NOP                            ;408
000234  bf00              NOP                            ;409
000236  bf00              NOP                            ;409
000238  bf00              NOP                            ;410
00023a  bf00              NOP                            ;410
00023c  bf00              NOP                            ;411
00023e  bf00              NOP                            ;411
000240  687c              LDR      r4,[r7,#4]            ;414
000242  8979              LDRH     r1,[r7,#0xa]          ;415
000244  4620              MOV      r0,r4                 ;415
000246  f7fffffe          BL       inet_chksum
00024a  b128              CBZ      r0,|L1.600|
00024c  4638              MOV      r0,r7                 ;416
00024e  f7fffffe          BL       pbuf_free
000252  bf00              NOP                            ;418
000254  bf00              NOP                            ;418
000256  e7e7              B        |L1.552|
                  |L1.600|
000258  4641              MOV      r1,r8                 ;423
00025a  4648              MOV      r0,r9                 ;423
00025c  f7fffffe          BL       igmp_lookfor_group
000260  4605              MOV      r5,r0                 ;423
000262  b92d              CBNZ     r5,|L1.624|
000264  4638              MOV      r0,r7                 ;427
000266  f7fffffe          BL       pbuf_free
00026a  bf00              NOP                            ;429
00026c  bf00              NOP                            ;429
00026e  e7db              B        |L1.552|
                  |L1.624|
000270  7820              LDRB     r0,[r4,#0]            ;434
000272  2811              CMP      r0,#0x11              ;434
000274  d002              BEQ      |L1.636|
000276  2816              CMP      r0,#0x16              ;434
000278  d151              BNE      |L1.798|
00027a  e044              B        |L1.774|
                  |L1.636|
00027c  495b              LDR      r1,|L1.1004|
00027e  f8d80000          LDR      r0,[r8,#0]            ;437
000282  6809              LDR      r1,[r1,#0]            ;437  ; allsystems
000284  4288              CMP      r0,r1                 ;437
000286  d11e              BNE      |L1.710|
000288  1d20              ADDS     r0,r4,#4              ;437
00028a  b108              CBZ      r0,|L1.656|
00028c  6860              LDR      r0,[r4,#4]            ;437
00028e  b9d0              CBNZ     r0,|L1.710|
                  |L1.656|
000290  bf00              NOP                            ;439
000292  bf00              NOP                            ;439
000294  7860              LDRB     r0,[r4,#1]            ;441
000296  b918              CBNZ     r0,|L1.672|
000298  bf00              NOP                            ;443
00029a  bf00              NOP                            ;443
00029c  200a              MOVS     r0,#0xa               ;444
00029e  7060              STRB     r0,[r4,#1]            ;444
                  |L1.672|
0002a0  4855              LDR      r0,|L1.1016|
0002a2  6806              LDR      r6,[r0,#0]            ;449  ; igmp_group_list
0002a4  e00c              B        |L1.704|
                  |L1.678|
0002a6  6870              LDR      r0,[r6,#4]            ;452
0002a8  4548              CMP      r0,r9                 ;452
0002aa  d108              BNE      |L1.702|
0002ac  494f              LDR      r1,|L1.1004|
0002ae  68b0              LDR      r0,[r6,#8]            ;452
0002b0  6809              LDR      r1,[r1,#0]            ;452  ; allsystems
0002b2  4288              CMP      r0,r1                 ;452
0002b4  d003              BEQ      |L1.702|
0002b6  7861              LDRB     r1,[r4,#1]            ;453
0002b8  4630              MOV      r0,r6                 ;453
0002ba  f7fffffe          BL       igmp_delaying_member
                  |L1.702|
0002be  6836              LDR      r6,[r6,#0]            ;455
                  |L1.704|
0002c0  2e00              CMP      r6,#0                 ;450
0002c2  d1f0              BNE      |L1.678|
0002c4  e01e              B        |L1.772|
                  |L1.710|
0002c6  1d20              ADDS     r0,r4,#4              ;459
0002c8  b1e0              CBZ      r0,|L1.772|
0002ca  6860              LDR      r0,[r4,#4]            ;459
0002cc  b1d0              CBZ      r0,|L1.772|
0002ce  bf00              NOP                            ;460
0002d0  bf00              NOP                            ;460
0002d2  bf00              NOP                            ;461
0002d4  bf00              NOP                            ;461
0002d6  4945              LDR      r1,|L1.1004|
0002d8  f8d80000          LDR      r0,[r8,#0]            ;462
0002dc  6809              LDR      r1,[r1,#0]            ;462  ; allsystems
0002de  4288              CMP      r0,r1                 ;462
0002e0  d109              BNE      |L1.758|
0002e2  bf00              NOP                            ;464
0002e4  bf00              NOP                            ;464
0002e6  6860              LDR      r0,[r4,#4]            ;466
0002e8  9000              STR      r0,[sp,#0]            ;466
0002ea  4669              MOV      r1,sp                 ;467
0002ec  4648              MOV      r0,r9                 ;467
0002ee  f7fffffe          BL       igmp_lookfor_group
0002f2  4605              MOV      r5,r0                 ;467
0002f4  e001              B        |L1.762|
                  |L1.758|
0002f6  bf00              NOP                            ;469
0002f8  bf00              NOP                            ;469
                  |L1.762|
0002fa  b11d              CBZ      r5,|L1.772|
0002fc  7861              LDRB     r1,[r4,#1]            ;474
0002fe  4628              MOV      r0,r5                 ;474
000300  f7fffffe          BL       igmp_delaying_member
                  |L1.772|
000304  e00e              B        |L1.804|
                  |L1.774|
000306  bf00              NOP                            ;485
000308  bf00              NOP                            ;485
00030a  7b68              LDRB     r0,[r5,#0xd]          ;487
00030c  2801              CMP      r0,#1                 ;487
00030e  d105              BNE      |L1.796|
000310  2000              MOVS     r0,#0                 ;489
000312  81e8              STRH     r0,[r5,#0xe]          ;489
000314  2002              MOVS     r0,#2                 ;490
000316  7368              STRB     r0,[r5,#0xd]          ;490
000318  2000              MOVS     r0,#0                 ;491
00031a  7328              STRB     r0,[r5,#0xc]          ;491
                  |L1.796|
00031c  e002              B        |L1.804|
                  |L1.798|
00031e  bf00              NOP                            ;496
000320  bf00              NOP                            ;496
000322  bf00              NOP                            ;499
                  |L1.804|
000324  bf00              NOP                            ;482
000326  4638              MOV      r0,r7                 ;503
000328  f7fffffe          BL       pbuf_free
00032c  bf00              NOP                            ;504
00032e  e77b              B        |L1.552|
;;;506    
                          ENDP

                  igmp_ip_output_if PROC
;;;744    static err_t
;;;745    igmp_ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest, struct netif *netif)
000330  b5f0              PUSH     {r4-r7,lr}
;;;746    {
000332  b087              SUB      sp,sp,#0x1c
000334  4605              MOV      r5,r0
000336  460e              MOV      r6,r1
000338  4617              MOV      r7,r2
00033a  461c              MOV      r4,r3
;;;747      /* This is the "router alert" option */
;;;748      u16_t ra[2];
;;;749      ra[0] = PP_HTONS(ROUTER_ALERT);
00033c  f2404094          MOV      r0,#0x494
000340  f8ad0018          STRH     r0,[sp,#0x18]
;;;750      ra[1] = 0x0000; /* Router shall examine packet */
000344  2000              MOVS     r0,#0
000346  f8ad001a          STRH     r0,[sp,#0x1a]
;;;751      IGMP_STATS_INC(igmp.xmit);
;;;752      return ip_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
00034a  2004              MOVS     r0,#4
00034c  a906              ADD      r1,sp,#0x18
00034e  2202              MOVS     r2,#2
000350  e9cd2401          STRD     r2,r4,[sp,#4]
000354  e9cd1003          STRD     r1,r0,[sp,#0xc]
000358  2000              MOVS     r0,#0
00035a  2301              MOVS     r3,#1
00035c  463a              MOV      r2,r7
00035e  4631              MOV      r1,r6
000360  9000              STR      r0,[sp,#0]
000362  4628              MOV      r0,r5
000364  f7fffffe          BL       ip_output_if_opt
;;;753    }
000368  b007              ADD      sp,sp,#0x1c
00036a  bdf0              POP      {r4-r7,pc}
;;;754    
                          ENDP

                  igmp_send PROC
;;;761    static void
;;;762    igmp_send(struct igmp_group *group, u8_t type)
00036c  e92d43f8          PUSH     {r3-r9,lr}
;;;763    {
000370  4604              MOV      r4,r0
000372  460e              MOV      r6,r1
;;;764      struct pbuf*     p    = NULL;
000374  2700              MOVS     r7,#0
;;;765      struct igmp_msg* igmp = NULL;
000376  2500              MOVS     r5,#0
;;;766      ip_addr_t   src  = *IP_ADDR_ANY;
000378  4820              LDR      r0,|L1.1020|
00037a  6800              LDR      r0,[r0,#0]  ; ip_addr_any
00037c  9000              STR      r0,[sp,#0]
;;;767      ip_addr_t*  dest = NULL;
00037e  46a8              MOV      r8,r5
;;;768    
;;;769      /* IP header + "router alert" option + IGMP header */
;;;770      p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
000380  2200              MOVS     r2,#0
000382  2108              MOVS     r1,#8
000384  4610              MOV      r0,r2
000386  f7fffffe          BL       pbuf_alloc
00038a  4607              MOV      r7,r0
;;;771      
;;;772      if (p) {
00038c  b35f              CBZ      r7,|L1.998|
;;;773        igmp = (struct igmp_msg *)p->payload;
00038e  687d              LDR      r5,[r7,#4]
;;;774        LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
000390  bf00              NOP      
000392  bf00              NOP      
;;;775                   (p->len >= sizeof(struct igmp_msg)));
;;;776        ip_addr_copy(src, group->netif->ip_addr);
000394  6860              LDR      r0,[r4,#4]
000396  6840              LDR      r0,[r0,#4]
000398  9000              STR      r0,[sp,#0]
;;;777         
;;;778        if (type == IGMP_V2_MEMB_REPORT) {
00039a  2e16              CMP      r6,#0x16
00039c  d106              BNE      |L1.940|
;;;779          dest = &(group->group_address);
00039e  f1040808          ADD      r8,r4,#8
;;;780          ip_addr_copy(igmp->igmp_group_address, group->group_address);
0003a2  68a0              LDR      r0,[r4,#8]
0003a4  6068              STR      r0,[r5,#4]
;;;781          group->last_reporter_flag = 1; /* Remember we were the last to report */
0003a6  2001              MOVS     r0,#1
0003a8  7320              STRB     r0,[r4,#0xc]
0003aa  e005              B        |L1.952|
                  |L1.940|
;;;782        } else {
;;;783          if (type == IGMP_LEAVE_GROUP) {
0003ac  2e17              CMP      r6,#0x17
0003ae  d103              BNE      |L1.952|
;;;784            dest = &allrouters;
0003b0  f8df8040          LDR      r8,|L1.1012|
;;;785            ip_addr_copy(igmp->igmp_group_address, group->group_address);
0003b4  68a0              LDR      r0,[r4,#8]
0003b6  6068              STR      r0,[r5,#4]
                  |L1.952|
;;;786          }
;;;787        }
;;;788    
;;;789        if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
0003b8  2e16              CMP      r6,#0x16
0003ba  d001              BEQ      |L1.960|
0003bc  2e17              CMP      r6,#0x17
0003be  d10e              BNE      |L1.990|
                  |L1.960|
;;;790          igmp->igmp_msgtype  = type;
0003c0  702e              STRB     r6,[r5,#0]
;;;791          igmp->igmp_maxresp  = 0;
0003c2  2000              MOVS     r0,#0
0003c4  7068              STRB     r0,[r5,#1]
;;;792          igmp->igmp_checksum = 0;
0003c6  8068              STRH     r0,[r5,#2]
;;;793          igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
0003c8  2108              MOVS     r1,#8
0003ca  4628              MOV      r0,r5
0003cc  f7fffffe          BL       inet_chksum
0003d0  8068              STRH     r0,[r5,#2]
;;;794    
;;;795          igmp_ip_output_if(p, &src, dest, group->netif);
0003d2  4642              MOV      r2,r8
0003d4  4669              MOV      r1,sp
0003d6  4638              MOV      r0,r7
0003d8  6863              LDR      r3,[r4,#4]
0003da  f7fffffe          BL       igmp_ip_output_if
                  |L1.990|
;;;796        }
;;;797    
;;;798        pbuf_free(p);
0003de  4638              MOV      r0,r7
0003e0  f7fffffe          BL       pbuf_free
0003e4  e00e              B        |L1.1028|
                  |L1.998|
0003e6  e00b              B        |L1.1024|
                  |L1.1000|
                          DCD      0x010000e0
                  |L1.1004|
                          DCD      allsystems
                  |L1.1008|
                          DCD      0x020000e0
                  |L1.1012|
                          DCD      allrouters
                  |L1.1016|
                          DCD      igmp_group_list
                  |L1.1020|
                          DCD      ip_addr_any
                  |L1.1024|
;;;799      } else {
;;;800        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
000400  bf00              NOP      
000402  bf00              NOP      
                  |L1.1028|
;;;801        IGMP_STATS_INC(igmp.memerr);
;;;802      }
;;;803    }
000404  e8bd83f8          POP      {r3-r9,pc}
;;;804    
                          ENDP

                  igmp_joingroup PROC
;;;514    err_t
;;;515    igmp_joingroup(ip_addr_t *ifaddr, ip_addr_t *groupaddr)
000408  e92d41f0          PUSH     {r4-r8,lr}
;;;516    {
00040c  4606              MOV      r6,r0
00040e  460f              MOV      r7,r1
;;;517      err_t              err = ERR_VAL; /* no matching interface */
000410  f06f0805          MVN      r8,#5
;;;518      struct igmp_group *group;
;;;519      struct netif      *netif;
;;;520    
;;;521      /* make sure it is multicast address */
;;;522      LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip_addr_ismulticast(groupaddr), return ERR_VAL;);
000414  bf00              NOP      
000416  7838              LDRB     r0,[r7,#0]
000418  f00000f0          AND      r0,r0,#0xf0
00041c  28e0              CMP      r0,#0xe0
00041e  d002              BEQ      |L1.1062|
000420  4640              MOV      r0,r8
                  |L1.1058|
;;;523      LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
;;;524    
;;;525      /* loop through netif's */
;;;526      netif = netif_list;
;;;527      while (netif != NULL) {
;;;528        /* Should we join this interface ? */
;;;529        if ((netif->flags & NETIF_FLAG_IGMP) && ((ip_addr_isany(ifaddr) || ip_addr_cmp(&(netif->ip_addr), ifaddr)))) {
;;;530          /* find group or create a new one if not found */
;;;531          group = igmp_lookup_group(netif, groupaddr);
;;;532    
;;;533          if (group != NULL) {
;;;534            /* This should create a new group, check the state to make sure */
;;;535            if (group->group_state != IGMP_GROUP_NON_MEMBER) {
;;;536              LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup: join to group not in state IGMP_GROUP_NON_MEMBER\n"));
;;;537            } else {
;;;538              /* OK - it was new group */
;;;539              LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup: join to new group: "));
;;;540              ip_addr_debug_print(IGMP_DEBUG, groupaddr);
;;;541              LWIP_DEBUGF(IGMP_DEBUG, ("\n"));
;;;542    
;;;543              /* If first use of the group, allow the group at the MAC level */
;;;544              if ((group->use==0) && (netif->igmp_mac_filter != NULL)) {
;;;545                LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup: igmp_mac_filter(ADD "));
;;;546                ip_addr_debug_print(IGMP_DEBUG, groupaddr);
;;;547                LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", netif));
;;;548                netif->igmp_mac_filter(netif, groupaddr, IGMP_ADD_MAC_FILTER);
;;;549              }
;;;550    
;;;551              IGMP_STATS_INC(igmp.tx_join);
;;;552              igmp_send(group, IGMP_V2_MEMB_REPORT);
;;;553    
;;;554              igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
;;;555    
;;;556              /* Need to work out where this timer comes from */
;;;557              group->group_state = IGMP_GROUP_DELAYING_MEMBER;
;;;558            }
;;;559            /* Increment group use */
;;;560            group->use++;
;;;561            /* Join on this interface */
;;;562            err = ERR_OK;
;;;563          } else {
;;;564            /* Return an error even if some network interfaces are joined */
;;;565            /** @todo undo any other netif already joined */
;;;566            LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup: Not enought memory to join to group\n"));
;;;567            return ERR_MEM;
;;;568          }
;;;569        }
;;;570        /* proceed to next network interface */
;;;571        netif = netif->next;
;;;572      }
;;;573    
;;;574      return err;
;;;575    }
000422  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1062|
000426  bf00              NOP                            ;522
000428  bf00              NOP                            ;523
00042a  496d              LDR      r1,|L1.1504|
00042c  6838              LDR      r0,[r7,#0]            ;523
00042e  6809              LDR      r1,[r1,#0]            ;523  ; allsystems
000430  4288              CMP      r0,r1                 ;523
000432  d102              BNE      |L1.1082|
000434  f06f0005          MVN      r0,#5                 ;523
000438  e7f3              B        |L1.1058|
                  |L1.1082|
00043a  bf00              NOP                            ;523
00043c  4869              LDR      r0,|L1.1508|
00043e  6805              LDR      r5,[r0,#0]            ;526  ; netif_list
000440  e041              B        |L1.1222|
                  |L1.1090|
000442  f895002d          LDRB     r0,[r5,#0x2d]         ;529
000446  f0000080          AND      r0,r0,#0x80           ;529
00044a  2800              CMP      r0,#0                 ;529
00044c  d03a              BEQ      |L1.1220|
00044e  b12e              CBZ      r6,|L1.1116|
000450  6830              LDR      r0,[r6,#0]            ;529
000452  b118              CBZ      r0,|L1.1116|
000454  6868              LDR      r0,[r5,#4]            ;529
000456  6831              LDR      r1,[r6,#0]            ;529
000458  4288              CMP      r0,r1                 ;529
00045a  d133              BNE      |L1.1220|
                  |L1.1116|
00045c  4639              MOV      r1,r7                 ;531
00045e  4628              MOV      r0,r5                 ;531
000460  f7fffffe          BL       igmp_lookup_group
000464  4604              MOV      r4,r0                 ;531
000466  b344              CBZ      r4,|L1.1210|
000468  7b60              LDRB     r0,[r4,#0xd]          ;535
00046a  b108              CBZ      r0,|L1.1136|
00046c  bf00              NOP                            ;536
00046e  e01e              B        |L1.1198|
                  |L1.1136|
000470  bf00              NOP                            ;539
000472  bf00              NOP                            ;539
000474  bf00              NOP                            ;540
000476  bf00              NOP                            ;540
000478  bf00              NOP                            ;541
00047a  bf00              NOP                            ;541
00047c  7c20              LDRB     r0,[r4,#0x10]         ;544
00047e  b960              CBNZ     r0,|L1.1178|
000480  6b68              LDR      r0,[r5,#0x34]         ;544
000482  b150              CBZ      r0,|L1.1178|
000484  bf00              NOP                            ;545
000486  bf00              NOP                            ;545
000488  bf00              NOP                            ;546
00048a  bf00              NOP                            ;546
00048c  bf00              NOP                            ;547
00048e  bf00              NOP                            ;547
000490  2201              MOVS     r2,#1                 ;548
000492  4639              MOV      r1,r7                 ;548
000494  4628              MOV      r0,r5                 ;548
000496  6b6b              LDR      r3,[r5,#0x34]         ;548
000498  4798              BLX      r3                    ;548
                  |L1.1178|
00049a  2116              MOVS     r1,#0x16              ;552
00049c  4620              MOV      r0,r4                 ;552
00049e  f7fffffe          BL       igmp_send
0004a2  2105              MOVS     r1,#5                 ;554
0004a4  4620              MOV      r0,r4                 ;554
0004a6  f7fffffe          BL       igmp_start_timer
0004aa  2001              MOVS     r0,#1                 ;557
0004ac  7360              STRB     r0,[r4,#0xd]          ;557
                  |L1.1198|
0004ae  7c20              LDRB     r0,[r4,#0x10]         ;560
0004b0  1c40              ADDS     r0,r0,#1              ;560
0004b2  7420              STRB     r0,[r4,#0x10]         ;560
0004b4  f04f0800          MOV      r8,#0                 ;562
0004b8  e004              B        |L1.1220|
                  |L1.1210|
0004ba  bf00              NOP                            ;566
0004bc  bf00              NOP                            ;566
0004be  f04f30ff          MOV      r0,#0xffffffff        ;567
0004c2  e7ae              B        |L1.1058|
                  |L1.1220|
0004c4  682d              LDR      r5,[r5,#0]            ;571
                  |L1.1222|
0004c6  2d00              CMP      r5,#0                 ;527
0004c8  d1bb              BNE      |L1.1090|
0004ca  4640              MOV      r0,r8                 ;574
0004cc  e7a9              B        |L1.1058|
;;;576    
                          ENDP

                  igmp_leavegroup PROC
;;;584    err_t
;;;585    igmp_leavegroup(ip_addr_t *ifaddr, ip_addr_t *groupaddr)
0004ce  e92d41f0          PUSH     {r4-r8,lr}
;;;586    {
0004d2  4606              MOV      r6,r0
0004d4  460f              MOV      r7,r1
;;;587      err_t              err = ERR_VAL; /* no matching interface */
0004d6  f06f0805          MVN      r8,#5
;;;588      struct igmp_group *group;
;;;589      struct netif      *netif;
;;;590    
;;;591      /* make sure it is multicast address */
;;;592      LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip_addr_ismulticast(groupaddr), return ERR_VAL;);
0004da  bf00              NOP      
0004dc  7838              LDRB     r0,[r7,#0]
0004de  f00000f0          AND      r0,r0,#0xf0
0004e2  28e0              CMP      r0,#0xe0
0004e4  d002              BEQ      |L1.1260|
0004e6  4640              MOV      r0,r8
                  |L1.1256|
;;;593      LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
;;;594    
;;;595      /* loop through netif's */
;;;596      netif = netif_list;
;;;597      while (netif != NULL) {
;;;598        /* Should we leave this interface ? */
;;;599        if ((netif->flags & NETIF_FLAG_IGMP) && ((ip_addr_isany(ifaddr) || ip_addr_cmp(&(netif->ip_addr), ifaddr)))) {
;;;600          /* find group */
;;;601          group = igmp_lookfor_group(netif, groupaddr);
;;;602    
;;;603          if (group != NULL) {
;;;604            /* Only send a leave if the flag is set according to the state diagram */
;;;605            LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup: Leaving group: "));
;;;606            ip_addr_debug_print(IGMP_DEBUG, groupaddr);
;;;607            LWIP_DEBUGF(IGMP_DEBUG, ("\n"));
;;;608    
;;;609            /* If there is no other use of the group */
;;;610            if (group->use <= 1) {
;;;611              /* If we are the last reporter for this group */
;;;612              if (group->last_reporter_flag) {
;;;613                LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup: sending leaving group\n"));
;;;614                IGMP_STATS_INC(igmp.tx_leave);
;;;615                igmp_send(group, IGMP_LEAVE_GROUP);
;;;616              }
;;;617              
;;;618              /* Disable the group at the MAC level */
;;;619              if (netif->igmp_mac_filter != NULL) {
;;;620                LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup: igmp_mac_filter(DEL "));
;;;621                ip_addr_debug_print(IGMP_DEBUG, groupaddr);
;;;622                LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", netif));
;;;623                netif->igmp_mac_filter(netif, groupaddr, IGMP_DEL_MAC_FILTER);
;;;624              }
;;;625              
;;;626              LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup: remove group: "));
;;;627              ip_addr_debug_print(IGMP_DEBUG, groupaddr);
;;;628              LWIP_DEBUGF(IGMP_DEBUG, ("\n"));          
;;;629              
;;;630              /* Free the group */
;;;631              igmp_remove_group(group);
;;;632            } else {
;;;633              /* Decrement group use */
;;;634              group->use--;
;;;635            }
;;;636            /* Leave on this interface */
;;;637            err = ERR_OK;
;;;638          } else {
;;;639            /* It's not a fatal error on "leavegroup" */
;;;640            LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup: not member of group\n"));
;;;641          }
;;;642        }
;;;643        /* proceed to next network interface */
;;;644        netif = netif->next;
;;;645      }
;;;646    
;;;647      return err;
;;;648    }
0004e8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1260|
0004ec  bf00              NOP                            ;592
0004ee  bf00              NOP                            ;593
0004f0  493b              LDR      r1,|L1.1504|
0004f2  6838              LDR      r0,[r7,#0]            ;593
0004f4  6809              LDR      r1,[r1,#0]            ;593  ; allsystems
0004f6  4288              CMP      r0,r1                 ;593
0004f8  d102              BNE      |L1.1280|
0004fa  f06f0005          MVN      r0,#5                 ;593
0004fe  e7f3              B        |L1.1256|
                  |L1.1280|
000500  bf00              NOP                            ;593
000502  4838              LDR      r0,|L1.1508|
000504  6804              LDR      r4,[r0,#0]            ;596  ; netif_list
000506  e043              B        |L1.1424|
                  |L1.1288|
000508  f894002d          LDRB     r0,[r4,#0x2d]         ;599
00050c  f0000080          AND      r0,r0,#0x80           ;599
000510  2800              CMP      r0,#0                 ;599
000512  d03c              BEQ      |L1.1422|
000514  b12e              CBZ      r6,|L1.1314|
000516  6830              LDR      r0,[r6,#0]            ;599
000518  b118              CBZ      r0,|L1.1314|
00051a  6860              LDR      r0,[r4,#4]            ;599
00051c  6831              LDR      r1,[r6,#0]            ;599
00051e  4288              CMP      r0,r1                 ;599
000520  d135              BNE      |L1.1422|
                  |L1.1314|
000522  4639              MOV      r1,r7                 ;601
000524  4620              MOV      r0,r4                 ;601
000526  f7fffffe          BL       igmp_lookfor_group
00052a  4605              MOV      r5,r0                 ;601
00052c  b36d              CBZ      r5,|L1.1418|
00052e  bf00              NOP                            ;605
000530  bf00              NOP                            ;605
000532  bf00              NOP                            ;606
000534  bf00              NOP                            ;606
000536  bf00              NOP                            ;607
000538  bf00              NOP                            ;607
00053a  7c28              LDRB     r0,[r5,#0x10]         ;610
00053c  2801              CMP      r0,#1                 ;610
00053e  dc1e              BGT      |L1.1406|
000540  7b28              LDRB     r0,[r5,#0xc]          ;612
000542  b128              CBZ      r0,|L1.1360|
000544  bf00              NOP                            ;613
000546  bf00              NOP                            ;613
000548  2117              MOVS     r1,#0x17              ;615
00054a  4628              MOV      r0,r5                 ;615
00054c  f7fffffe          BL       igmp_send
                  |L1.1360|
000550  6b60              LDR      r0,[r4,#0x34]         ;619
000552  b150              CBZ      r0,|L1.1386|
000554  bf00              NOP                            ;620
000556  bf00              NOP                            ;620
000558  bf00              NOP                            ;621
00055a  bf00              NOP                            ;621
00055c  bf00              NOP                            ;622
00055e  bf00              NOP                            ;622
000560  2200              MOVS     r2,#0                 ;623
000562  4639              MOV      r1,r7                 ;623
000564  4620              MOV      r0,r4                 ;623
000566  6b63              LDR      r3,[r4,#0x34]         ;623
000568  4798              BLX      r3                    ;623
                  |L1.1386|
00056a  bf00              NOP                            ;626
00056c  bf00              NOP                            ;626
00056e  bf00              NOP                            ;627
000570  bf00              NOP                            ;627
000572  bf00              NOP                            ;628
000574  bf00              NOP                            ;628
000576  4628              MOV      r0,r5                 ;631
000578  f7fffffe          BL       igmp_remove_group
00057c  e002              B        |L1.1412|
                  |L1.1406|
00057e  7c28              LDRB     r0,[r5,#0x10]         ;634
000580  1e40              SUBS     r0,r0,#1              ;634
000582  7428              STRB     r0,[r5,#0x10]         ;634
                  |L1.1412|
000584  f04f0800          MOV      r8,#0                 ;637
000588  e001              B        |L1.1422|
                  |L1.1418|
00058a  bf00              NOP                            ;640
00058c  bf00              NOP                            ;640
                  |L1.1422|
00058e  6824              LDR      r4,[r4,#0]            ;644
                  |L1.1424|
000590  2c00              CMP      r4,#0                 ;597
000592  d1b9              BNE      |L1.1288|
000594  4640              MOV      r0,r8                 ;647
000596  e7a7              B        |L1.1256|
;;;649    
                          ENDP

                  igmp_timeout PROC
;;;676    static void
;;;677    igmp_timeout(struct igmp_group *group)
000598  b510              PUSH     {r4,lr}
;;;678    {
00059a  4604              MOV      r4,r0
;;;679      /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group */
;;;680      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
00059c  7b60              LDRB     r0,[r4,#0xd]
00059e  2801              CMP      r0,#1
0005a0  d109              BNE      |L1.1462|
;;;681        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
0005a2  bf00              NOP      
0005a4  bf00              NOP      
;;;682        ip_addr_debug_print(IGMP_DEBUG, &(group->group_address));
0005a6  bf00              NOP      
0005a8  bf00              NOP      
;;;683        LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", group->netif));
0005aa  bf00              NOP      
0005ac  bf00              NOP      
;;;684    
;;;685        IGMP_STATS_INC(igmp.tx_report);
;;;686        igmp_send(group, IGMP_V2_MEMB_REPORT);
0005ae  2116              MOVS     r1,#0x16
0005b0  4620              MOV      r0,r4
0005b2  f7fffffe          BL       igmp_send
                  |L1.1462|
;;;687      }
;;;688    }
0005b6  bd10              POP      {r4,pc}
;;;689    
                          ENDP

                  igmp_tmr PROC
;;;654    void
;;;655    igmp_tmr(void)
0005b8  b510              PUSH     {r4,lr}
;;;656    {
;;;657      struct igmp_group *group = igmp_group_list;
0005ba  480b              LDR      r0,|L1.1512|
0005bc  6804              LDR      r4,[r0,#0]  ; igmp_group_list
;;;658    
;;;659      while (group != NULL) {
0005be  e00b              B        |L1.1496|
                  |L1.1472|
;;;660        if (group->timer > 0) {
0005c0  89e0              LDRH     r0,[r4,#0xe]
0005c2  2800              CMP      r0,#0
0005c4  dd07              BLE      |L1.1494|
;;;661          group->timer--;
0005c6  89e0              LDRH     r0,[r4,#0xe]
0005c8  1e40              SUBS     r0,r0,#1
0005ca  81e0              STRH     r0,[r4,#0xe]
;;;662          if (group->timer == 0) {
0005cc  89e0              LDRH     r0,[r4,#0xe]
0005ce  b910              CBNZ     r0,|L1.1494|
;;;663            igmp_timeout(group);
0005d0  4620              MOV      r0,r4
0005d2  f7fffffe          BL       igmp_timeout
                  |L1.1494|
;;;664          }
;;;665        }
;;;666        group = group->next;
0005d6  6824              LDR      r4,[r4,#0]
                  |L1.1496|
0005d8  2c00              CMP      r4,#0                 ;659
0005da  d1f1              BNE      |L1.1472|
;;;667      }
;;;668    }
0005dc  bd10              POP      {r4,pc}
;;;669    
                          ENDP

0005de  0000              DCW      0x0000
                  |L1.1504|
                          DCD      allsystems
                  |L1.1508|
                          DCD      netif_list
                  |L1.1512|
                          DCD      igmp_group_list

                          AREA ||.data||, DATA, ALIGN=2

                  igmp_group_list
                          DCD      0x00000000
                  allsystems
                          DCD      0x00000000
                  allrouters
                          DCD      0x00000000

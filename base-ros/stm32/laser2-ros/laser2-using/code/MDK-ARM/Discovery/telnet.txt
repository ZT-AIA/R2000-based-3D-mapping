; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\telnet.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\telnet.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\telnet.crf ..\src\telnet.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  telnet_sendopt PROC
;;;99     
;;;100    static void telnet_sendopt(struct termstate *ts, int code, int option)
000000  b5f8              PUSH     {r3-r7,lr}
;;;101    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;102      unsigned char buf[3];
;;;103      buf[0] = TELNET_IAC;
000008  20ff              MOVS     r0,#0xff
00000a  f88d0000          STRB     r0,[sp,#0]
;;;104      buf[1] = (unsigned char) code;
00000e  b2e8              UXTB     r0,r5
000010  f88d0001          STRB     r0,[sp,#1]
;;;105      buf[2] = (unsigned char) option;
000014  b2f0              UXTB     r0,r6
000016  f88d0002          STRB     r0,[sp,#2]
;;;106      send(ts->sock, buf, 3, 0);
00001a  2300              MOVS     r3,#0
00001c  2203              MOVS     r2,#3
00001e  4669              MOV      r1,sp
000020  6820              LDR      r0,[r4,#0]
000022  f7fffffe          BL       lwip_send
;;;107    }
000026  bdf8              POP      {r3-r7,pc}
;;;108    
                          ENDP

                  telnet_parseopt PROC
;;;109    static void telnet_parseopt(struct termstate *ts, int code, int option)
000028  b570              PUSH     {r4-r6,lr}
;;;110    {
00002a  4606              MOV      r6,r0
00002c  460c              MOV      r4,r1
00002e  4615              MOV      r5,r2
;;;111      switch (option)
000030  2d18              CMP      r5,#0x18
000032  d01b              BEQ      |L1.108|
000034  dc04              BGT      |L1.64|
000036  2d01              CMP      r5,#1
000038  d007              BEQ      |L1.74|
00003a  2d03              CMP      r5,#3
00003c  d11e              BNE      |L1.124|
00003e  e005              B        |L1.76|
                  |L1.64|
000040  2d1f              CMP      r5,#0x1f
000042  d014              BEQ      |L1.110|
000044  2d20              CMP      r5,#0x20
000046  d119              BNE      |L1.124|
000048  e012              B        |L1.112|
                  |L1.74|
;;;112      {
;;;113        case TELOPT_ECHO:
;;;114          break;
00004a  e027              B        |L1.156|
                  |L1.76|
;;;115        case TELOPT_SUPPRESS_GO_AHEAD:
;;;116          if (code == TELNET_WILL || code == TELNET_WONT)
00004c  2cfb              CMP      r4,#0xfb
00004e  d001              BEQ      |L1.84|
000050  2cfc              CMP      r4,#0xfc
000052  d105              BNE      |L1.96|
                  |L1.84|
;;;117            telnet_sendopt(ts, TELNET_DO, option);
000054  462a              MOV      r2,r5
000056  21fd              MOVS     r1,#0xfd
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       telnet_sendopt
00005e  e004              B        |L1.106|
                  |L1.96|
;;;118          else
;;;119            telnet_sendopt(ts, TELNET_WILL, option);
000060  462a              MOV      r2,r5
000062  21fb              MOVS     r1,#0xfb
000064  4630              MOV      r0,r6
000066  f7fffffe          BL       telnet_sendopt
                  |L1.106|
;;;120          break;
00006a  e017              B        |L1.156|
                  |L1.108|
;;;121        case TELOPT_TERMINAL_TYPE:
;;;122        case TELOPT_NAWS:
00006c  bf00              NOP      
                  |L1.110|
;;;123        case TELOPT_TERMINAL_SPEED:
00006e  bf00              NOP      
                  |L1.112|
;;;124          telnet_sendopt(ts, TELNET_DO, option);
000070  462a              MOV      r2,r5
000072  21fd              MOVS     r1,#0xfd
000074  4630              MOV      r0,r6
000076  f7fffffe          BL       telnet_sendopt
;;;125          break;
00007a  e00f              B        |L1.156|
                  |L1.124|
;;;126        default:
;;;127          if ((code == TELNET_WILL) || (code == TELNET_WONT))
00007c  2cfb              CMP      r4,#0xfb
00007e  d001              BEQ      |L1.132|
000080  2cfc              CMP      r4,#0xfc
000082  d105              BNE      |L1.144|
                  |L1.132|
;;;128            telnet_sendopt(ts, TELNET_DONT, option);
000084  462a              MOV      r2,r5
000086  21fe              MOVS     r1,#0xfe
000088  4630              MOV      r0,r6
00008a  f7fffffe          BL       telnet_sendopt
00008e  e004              B        |L1.154|
                  |L1.144|
;;;129          else
;;;130            telnet_sendopt(ts, TELNET_WONT, option);
000090  462a              MOV      r2,r5
000092  21fc              MOVS     r1,#0xfc
000094  4630              MOV      r0,r6
000096  f7fffffe          BL       telnet_sendopt
                  |L1.154|
;;;131          break;
00009a  bf00              NOP      
                  |L1.156|
00009c  bf00              NOP                            ;114
;;;132      }
;;;133    }
00009e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP

                  telnet_parseoptdat PROC
;;;135    static void telnet_parseoptdat(struct termstate *ts, int option, unsigned char *data, int len)
0000a0  e92d47f0          PUSH     {r4-r10,lr}
;;;136    {
0000a4  4604              MOV      r4,r0
0000a6  460e              MOV      r6,r1
0000a8  4615              MOV      r5,r2
0000aa  461f              MOV      r7,r3
;;;137      switch (option)
0000ac  2e18              CMP      r6,#0x18
0000ae  d01b              BEQ      |L1.232|
0000b0  2e1f              CMP      r6,#0x1f
0000b2  d002              BEQ      |L1.186|
0000b4  2e20              CMP      r6,#0x20
0000b6  d118              BNE      |L1.234|
0000b8  e015              B        |L1.230|
                  |L1.186|
;;;138      {
;;;139        case TELOPT_NAWS:
;;;140          if (len == 4)
0000ba  2f04              CMP      r7,#4
0000bc  d112              BNE      |L1.228|
;;;141          {
;;;142            int cols = ntohs(*(unsigned short *) data);
0000be  8828              LDRH     r0,[r5,#0]
0000c0  f7fffffe          BL       lwip_ntohs
0000c4  4680              MOV      r8,r0
;;;143            int lines = ntohs(*(unsigned short *) (data + 2));
0000c6  8868              LDRH     r0,[r5,#2]
0000c8  f7fffffe          BL       lwip_ntohs
0000cc  4681              MOV      r9,r0
;;;144            if (cols) ts->term.cols = cols;
0000ce  f1b80f00          CMP      r8,#0
0000d2  d001              BEQ      |L1.216|
0000d4  f8c48114          STR      r8,[r4,#0x114]
                  |L1.216|
;;;145            if (lines) ts->term.lines = lines;
0000d8  f1b90f00          CMP      r9,#0
0000dc  d001              BEQ      |L1.226|
0000de  f8c49118          STR      r9,[r4,#0x118]
                  |L1.226|
;;;146          }
0000e2  bf00              NOP      
                  |L1.228|
;;;147          break;
0000e4  e001              B        |L1.234|
                  |L1.230|
;;;148        case TELOPT_TERMINAL_SPEED:
;;;149          break;
0000e6  e000              B        |L1.234|
                  |L1.232|
;;;150        case TELOPT_TERMINAL_TYPE:
;;;151          break;
0000e8  bf00              NOP      
                  |L1.234|
0000ea  bf00              NOP                            ;147
;;;152      }
;;;153    }
0000ec  e8bd87f0          POP      {r4-r10,pc}
;;;154    
                          ENDP

                  telnet_process PROC
;;;155    static void telnet_process(struct termstate *ts)
0000f0  e92d41f0          PUSH     {r4-r8,lr}
;;;156    {
0000f4  4604              MOV      r4,r0
;;;157      unsigned char *p = ts->bi.start;
0000f6  f8d4731c          LDR      r7,[r4,#0x31c]
;;;158      unsigned char *q = p;
0000fa  463e              MOV      r6,r7
;;;159      while (p < ts->bi.end)
0000fc  e05e              B        |L1.444|
                  |L1.254|
;;;160      {
;;;161        int c = *p++;
0000fe  f8175b01          LDRB     r5,[r7],#1
;;;162        switch (ts->state) 
000102  6860              LDR      r0,[r4,#4]
000104  2806              CMP      r0,#6
000106  d257              BCS      |L1.440|
000108  e8dff000          TBB      [pc,r0]
00010c  030b2830          DCB      0x03,0x0b,0x28,0x30
000110  3749              DCB      0x37,0x49
;;;163        {
;;;164          case STATE_NORMAL:
;;;165            if (c == TELNET_IAC)
000112  2dff              CMP      r5,#0xff
000114  d102              BNE      |L1.284|
;;;166              ts->state = STATE_IAC;
000116  2001              MOVS     r0,#1
000118  6060              STR      r0,[r4,#4]
00011a  e001              B        |L1.288|
                  |L1.284|
;;;167            else
;;;168              *q++ = c;
00011c  f8065b01          STRB     r5,[r6],#1
                  |L1.288|
;;;169            break;
000120  e04a              B        |L1.440|
;;;170          case STATE_IAC:
;;;171            switch (c) 
000122  f1a500fa          SUB      r0,r5,#0xfa
000126  2806              CMP      r0,#6
000128  d213              BCS      |L1.338|
00012a  e8dff000          TBB      [pc,r0]
00012e  0f08              DCB      0x0f,0x08
000130  090a0b03          DCB      0x09,0x0a,0x0b,0x03
;;;172            {
;;;173              case TELNET_IAC:
;;;174                *q++ = c;
000134  f8065b01          STRB     r5,[r6],#1
;;;175                ts->state = STATE_NORMAL;
000138  2000              MOVS     r0,#0
00013a  6060              STR      r0,[r4,#4]
;;;176                break;
00013c  e00c              B        |L1.344|
;;;177              case TELNET_WILL:
;;;178              case TELNET_WONT:
00013e  bf00              NOP      
;;;179              case TELNET_DO:
000140  bf00              NOP      
;;;180              case TELNET_DONT:
000142  bf00              NOP      
;;;181                ts->code = c;
000144  60a5              STR      r5,[r4,#8]
;;;182                ts->state = STATE_OPT;
000146  2002              MOVS     r0,#2
000148  6060              STR      r0,[r4,#4]
;;;183                break;
00014a  e005              B        |L1.344|
;;;184              case TELNET_SB:
;;;185                ts->state = STATE_SB;
00014c  2003              MOVS     r0,#3
00014e  6060              STR      r0,[r4,#4]
;;;186                break;
000150  e002              B        |L1.344|
                  |L1.338|
;;;187              default:
;;;188                ts->state = STATE_NORMAL;
000152  2000              MOVS     r0,#0
000154  6060              STR      r0,[r4,#4]
000156  bf00              NOP                            ;171
                  |L1.344|
000158  bf00              NOP                            ;176
;;;189            }
;;;190            break;
00015a  e02d              B        |L1.440|
;;;191          case STATE_OPT:
;;;192            telnet_parseopt(ts, ts->code, c);
00015c  462a              MOV      r2,r5
00015e  4620              MOV      r0,r4
000160  68a1              LDR      r1,[r4,#8]
000162  f7fffffe          BL       telnet_parseopt
;;;193            ts->state = STATE_NORMAL;
000166  2000              MOVS     r0,#0
000168  6060              STR      r0,[r4,#4]
;;;194            break;
00016a  e025              B        |L1.440|
;;;195          case STATE_SB:
;;;196            ts->code = c;
00016c  60a5              STR      r5,[r4,#8]
;;;197            ts->optlen = 0;
00016e  2000              MOVS     r0,#0
000170  f8c4010c          STR      r0,[r4,#0x10c]
;;;198            ts->state = STATE_OPTDAT;
000174  2004              MOVS     r0,#4
000176  6060              STR      r0,[r4,#4]
;;;199            break;
000178  e01e              B        |L1.440|
;;;200          case STATE_OPTDAT:
;;;201            if (c == TELNET_IAC)
00017a  2dff              CMP      r5,#0xff
00017c  d102              BNE      |L1.388|
;;;202              ts->state = STATE_SE;
00017e  2005              MOVS     r0,#5
000180  6060              STR      r0,[r4,#4]
000182  e00b              B        |L1.412|
                  |L1.388|
;;;203            else if (ts->optlen < sizeof(ts->optdata))
000184  f8d4010c          LDR      r0,[r4,#0x10c]
000188  28ff              CMP      r0,#0xff
00018a  d807              BHI      |L1.412|
;;;204              ts->optdata[ts->optlen++] = c;
00018c  f8d4210c          LDR      r2,[r4,#0x10c]
000190  1c50              ADDS     r0,r2,#1
000192  f8c4010c          STR      r0,[r4,#0x10c]
000196  f104000c          ADD      r0,r4,#0xc
00019a  5485              STRB     r5,[r0,r2]
                  |L1.412|
;;;205            break;
00019c  e00c              B        |L1.440|
;;;206          case STATE_SE:
;;;207            if (c == TELNET_SE)
00019e  2df0              CMP      r5,#0xf0
0001a0  d107              BNE      |L1.434|
;;;208              telnet_parseoptdat(ts, ts->code, ts->optdata, ts->optlen);
0001a2  f104020c          ADD      r2,r4,#0xc
0001a6  4620              MOV      r0,r4
0001a8  f8d4310c          LDR      r3,[r4,#0x10c]
0001ac  68a1              LDR      r1,[r4,#8]
0001ae  f7fffffe          BL       telnet_parseoptdat
                  |L1.434|
;;;209            ts->state = STATE_NORMAL;
0001b2  2000              MOVS     r0,#0
0001b4  6060              STR      r0,[r4,#4]
;;;210            break;
0001b6  bf00              NOP      
                  |L1.440|
0001b8  bf00              NOP                            ;169
;;;211        } 
;;;212      }
0001ba  bf00              NOP      
                  |L1.444|
0001bc  f8d40320          LDR      r0,[r4,#0x320]        ;159
0001c0  42b8              CMP      r0,r7                 ;159
0001c2  d89c              BHI      |L1.254|
;;;213      ts->bi.end = q;
0001c4  f8c46320          STR      r6,[r4,#0x320]
;;;214    }
0001c8  e8bd81f0          POP      {r4-r8,pc}
;;;215    
                          ENDP

                  telnet_write PROC
;;;216    static int telnet_write(char *str, int size, bool flush)
0001cc  e92d47ff          PUSH     {r0-r10,lr}
;;;217    {
0001d0  4607              MOV      r7,r0
0001d2  460d              MOV      r5,r1
0001d4  4691              MOV      r9,r2
;;;218      int i;
;;;219    	int n;
;;;220    	int len;
;;;221      fd_set data_write;
;;;222      struct timeval tv;
;;;223      unsigned char *ptr = (unsigned char *) str;
0001d6  46ba              MOV      r10,r7
;;;224    
;;;225    	n = 0;
0001d8  2600              MOVS     r6,#0
;;;226      do
0001da  bf00              NOP      
                  |L1.476|
;;;227      {
;;;228        len = TELNET_BUF_SIZE - (int)(ts->bo.start - ts->bo.data);
0001dc  48f7              LDR      r0,|L1.1468|
0001de  6800              LDR      r0,[r0,#0]  ; ts
0001e0  f8d01524          LDR      r1,[r0,#0x524]
0001e4  48f5              LDR      r0,|L1.1468|
0001e6  6800              LDR      r0,[r0,#0]  ; ts
0001e8  f5007049          ADD      r0,r0,#0x324
0001ec  1a08              SUBS     r0,r1,r0
0001ee  f5c07400          RSB      r4,r0,#0x200
;;;229        if (size < len) len = size;
0001f2  42a5              CMP      r5,r4
0001f4  da00              BGE      |L1.504|
0001f6  462c              MOV      r4,r5
                  |L1.504|
;;;230        if (len >= 0)
0001f8  2c00              CMP      r4,#0
0001fa  db12              BLT      |L1.546|
;;;231        {
;;;232          memcpy(ts->bo.start, str, len);
0001fc  49ef              LDR      r1,|L1.1468|
0001fe  6809              LDR      r1,[r1,#0]  ; ts
000200  4622              MOV      r2,r4
000202  f8d10524          LDR      r0,[r1,#0x524]
000206  4639              MOV      r1,r7
000208  f7fffffe          BL       __aeabi_memcpy
;;;233          size -= len;
00020c  1b2d              SUBS     r5,r5,r4
;;;234          ts->bo.start += len;
00020e  48eb              LDR      r0,|L1.1468|
000210  6800              LDR      r0,[r0,#0]  ; ts
000212  f8d00524          LDR      r0,[r0,#0x524]
000216  1901              ADDS     r1,r0,r4
000218  48e8              LDR      r0,|L1.1468|
00021a  6800              LDR      r0,[r0,#0]  ; ts
00021c  f8c01524          STR      r1,[r0,#0x524]
;;;235          str += len;  
000220  4427              ADD      r7,r7,r4
                  |L1.546|
;;;236        }
;;;237        if (((int)(ts->bo.start - ts->bo.data) >= TELNET_BUF_SIZE) || flush)
000222  48e6              LDR      r0,|L1.1468|
000224  6800              LDR      r0,[r0,#0]  ; ts
000226  f8d01524          LDR      r1,[r0,#0x524]
00022a  48e4              LDR      r0,|L1.1468|
00022c  6800              LDR      r0,[r0,#0]  ; ts
00022e  f5007049          ADD      r0,r0,#0x324
000232  1a08              SUBS     r0,r1,r0
000234  f5b07f00          CMP      r0,#0x200
000238  da02              BGE      |L1.576|
00023a  f1b90f00          CMP      r9,#0
00023e  d073              BEQ      |L1.808|
                  |L1.576|
;;;238        {
;;;239          len = n = 0;
000240  2000              MOVS     r0,#0
000242  4606              MOV      r6,r0
000244  4604              MOV      r4,r0
;;;240          ptr = ts->bo.data;
000246  48dd              LDR      r0,|L1.1468|
000248  6800              LDR      r0,[r0,#0]  ; ts
00024a  f5007a49          ADD      r10,r0,#0x324
;;;241          do
00024e  bf00              NOP      
                  |L1.592|
;;;242          {
;;;243            FD_ZERO(&data_write);
000250  2000              MOVS     r0,#0
000252  9003              STR      r0,[sp,#0xc]
;;;244            FD_SET(ts->sock, &data_write);
000254  49d9              LDR      r1,|L1.1468|
000256  6809              LDR      r1,[r1,#0]  ; ts
000258  6808              LDR      r0,[r1,#0]
00025a  17c1              ASRS     r1,r0,#31
00025c  eb007151          ADD      r1,r0,r1,LSR #29
000260  10c9              ASRS     r1,r1,#3
000262  aa03              ADD      r2,sp,#0xc
000264  5c51              LDRB     r1,[r2,r1]
000266  4ad5              LDR      r2,|L1.1468|
000268  6812              LDR      r2,[r2,#0]  ; ts
00026a  7812              LDRB     r2,[r2,#0]
00026c  f0020307          AND      r3,r2,#7
000270  2201              MOVS     r2,#1
000272  409a              LSLS     r2,r2,r3
000274  4311              ORRS     r1,r1,r2
000276  4ad1              LDR      r2,|L1.1468|
000278  6812              LDR      r2,[r2,#0]  ; ts
00027a  6810              LDR      r0,[r2,#0]
00027c  17c2              ASRS     r2,r0,#31
00027e  eb007252          ADD      r2,r0,r2,LSR #29
000282  10d2              ASRS     r2,r2,#3
000284  ab03              ADD      r3,sp,#0xc
000286  5499              STRB     r1,[r3,r2]
;;;245            tv.tv_sec = 1;
000288  2001              MOVS     r0,#1
00028a  9001              STR      r0,[sp,#4]
;;;246            tv.tv_usec = 0;
00028c  2000              MOVS     r0,#0
00028e  9002              STR      r0,[sp,#8]
;;;247            i = select(FD_SETSIZE, NULL, &data_write, NULL, &tv);
000290  a801              ADD      r0,sp,#4
000292  2300              MOVS     r3,#0
000294  aa03              ADD      r2,sp,#0xc
000296  4619              MOV      r1,r3
000298  9000              STR      r0,[sp,#0]
00029a  2014              MOVS     r0,#0x14
00029c  f7fffffe          BL       lwip_select
0002a0  4680              MOV      r8,r0
;;;248            if ((i > 0) && (FD_ISSET(ts->sock, &data_write) != 0))
0002a2  f1b80f00          CMP      r8,#0
0002a6  dd27              BLE      |L1.760|
0002a8  49c4              LDR      r1,|L1.1468|
0002aa  6809              LDR      r1,[r1,#0]  ; ts
0002ac  6808              LDR      r0,[r1,#0]
0002ae  17c1              ASRS     r1,r0,#31
0002b0  eb007151          ADD      r1,r0,r1,LSR #29
0002b4  10c9              ASRS     r1,r1,#3
0002b6  aa03              ADD      r2,sp,#0xc
0002b8  5c51              LDRB     r1,[r2,r1]
0002ba  4ac0              LDR      r2,|L1.1468|
0002bc  6812              LDR      r2,[r2,#0]  ; ts
0002be  7812              LDRB     r2,[r2,#0]
0002c0  f0020307          AND      r3,r2,#7
0002c4  2201              MOVS     r2,#1
0002c6  409a              LSLS     r2,r2,r3
0002c8  4011              ANDS     r1,r1,r2
0002ca  b1a9              CBZ      r1,|L1.760|
;;;249            {
;;;250              n = send(ts->sock, ptr, (int) (ts->bo.start - ts->bo.data) - len, 0);
0002cc  49bb              LDR      r1,|L1.1468|
0002ce  6809              LDR      r1,[r1,#0]  ; ts
0002d0  f8d13524          LDR      r3,[r1,#0x524]
0002d4  49b9              LDR      r1,|L1.1468|
0002d6  6809              LDR      r1,[r1,#0]  ; ts
0002d8  f5017149          ADD      r1,r1,#0x324
0002dc  1a59              SUBS     r1,r3,r1
0002de  1b0a              SUBS     r2,r1,r4
0002e0  49b6              LDR      r1,|L1.1468|
0002e2  6809              LDR      r1,[r1,#0]  ; ts
0002e4  2300              MOVS     r3,#0
0002e6  6808              LDR      r0,[r1,#0]
0002e8  4651              MOV      r1,r10
0002ea  f7fffffe          BL       lwip_send
0002ee  4606              MOV      r6,r0
;;;251              if (n >= 0)
0002f0  2e00              CMP      r6,#0
0002f2  db01              BLT      |L1.760|
;;;252              {
;;;253                ptr += n;
0002f4  44b2              ADD      r10,r10,r6
;;;254                len += n;
0002f6  4434              ADD      r4,r4,r6
                  |L1.760|
;;;255              }
;;;256            }
;;;257          }
;;;258          while ((n >= 0) && (len < (int) (ts->bo.start - ts->bo.data)) && (i > 0));
0002f8  2e00              CMP      r6,#0
0002fa  db0d              BLT      |L1.792|
0002fc  48af              LDR      r0,|L1.1468|
0002fe  6800              LDR      r0,[r0,#0]  ; ts
000300  f8d01524          LDR      r1,[r0,#0x524]
000304  48ad              LDR      r0,|L1.1468|
000306  6800              LDR      r0,[r0,#0]  ; ts
000308  f5007049          ADD      r0,r0,#0x324
00030c  1a08              SUBS     r0,r1,r0
00030e  42a0              CMP      r0,r4
000310  dd02              BLE      |L1.792|
000312  f1b80f00          CMP      r8,#0
000316  dc9b              BGT      |L1.592|
                  |L1.792|
;;;259          ts->bo.start = ts->bo.data;
000318  48a8              LDR      r0,|L1.1468|
00031a  6800              LDR      r0,[r0,#0]  ; ts
00031c  f5007049          ADD      r0,r0,#0x324
000320  49a6              LDR      r1,|L1.1468|
000322  6809              LDR      r1,[r1,#0]  ; ts
000324  f8c10524          STR      r0,[r1,#0x524]
                  |L1.808|
;;;260        }
;;;261      }
;;;262      while (size > 0);
000328  2d00              CMP      r5,#0
00032a  f73faf57          BGT      |L1.476|
;;;263    
;;;264      return n < 0 ? n : len;
00032e  2e00              CMP      r6,#0
000330  da03              BGE      |L1.826|
000332  4630              MOV      r0,r6
                  |L1.820|
;;;265    }
000334  b004              ADD      sp,sp,#0x10
000336  e8bd87f0          POP      {r4-r10,pc}
                  |L1.826|
00033a  4620              MOV      r0,r4                 ;264
00033c  e7fa              B        |L1.820|
;;;266    
                          ENDP

                  telnet_shell PROC
;;;267    static void telnet_shell(int s) 
00033e  b51c              PUSH     {r2-r4,lr}
;;;268    {
000340  4604              MOV      r4,r0
;;;269      int off;
;;;270    
;;;271    	// TCP_NODELAY is used to disable the Nagle buffering algorithm. It 
;;;272    	// should only be set for applications such as telnet that send frequent
;;;273      // small bursts of information without getting an immediate response,
;;;274      // where timely delivery of data is required.
;;;275    	off = 0; setsockopt(s, IPPROTO_TCP, TCP_NODELAY, (char *) &off, sizeof(off));
000342  2000              MOVS     r0,#0
000344  9001              STR      r0,[sp,#4]
000346  2004              MOVS     r0,#4
000348  ab01              ADD      r3,sp,#4
00034a  2201              MOVS     r2,#1
00034c  2106              MOVS     r1,#6
00034e  9000              STR      r0,[sp,#0]
000350  4620              MOV      r0,r4
000352  f7fffffe          BL       lwip_setsockopt
;;;276    
;;;277    	// Initialize terminal state.
;;;278    	memset(ts, 0, sizeof(struct termstate));
000356  f240512c          MOV      r1,#0x52c
00035a  4898              LDR      r0,|L1.1468|
00035c  6800              LDR      r0,[r0,#0]  ; ts
00035e  f7fffffe          BL       __aeabi_memclr4
;;;279    	ts->sock = s;
000362  4896              LDR      r0,|L1.1468|
000364  6800              LDR      r0,[r0,#0]  ; ts
000366  6004              STR      r4,[r0,#0]
;;;280    	ts->state = STATE_NORMAL;
000368  2000              MOVS     r0,#0
00036a  4994              LDR      r1,|L1.1468|
00036c  6809              LDR      r1,[r1,#0]  ; ts
00036e  6048              STR      r0,[r1,#4]
;;;281    	ts->term.type = TERM_VT100;
000370  2002              MOVS     r0,#2
000372  4992              LDR      r1,|L1.1468|
000374  6809              LDR      r1,[r1,#0]  ; ts
000376  f8c10110          STR      r0,[r1,#0x110]
;;;282    	ts->term.cols = 80;
00037a  2150              MOVS     r1,#0x50
00037c  488f              LDR      r0,|L1.1468|
00037e  6800              LDR      r0,[r0,#0]  ; ts
000380  f8c01114          STR      r1,[r0,#0x114]
;;;283    	ts->term.lines = 25;
000384  2119              MOVS     r1,#0x19
000386  488d              LDR      r0,|L1.1468|
000388  6800              LDR      r0,[r0,#0]  ; ts
00038a  f8c01118          STR      r1,[r0,#0x118]
;;;284    
;;;285    	// Send initial option that we'll echo on this side.
;;;286    	telnet_sendopt(ts, TELNET_WILL, TELOPT_ECHO);
00038e  2201              MOVS     r2,#1
000390  21fb              MOVS     r1,#0xfb
000392  488a              LDR      r0,|L1.1468|
000394  6800              LDR      r0,[r0,#0]  ; ts
000396  f7fffffe          BL       telnet_sendopt
;;;287    
;;;288    	// Reset the output buffer.
;;;289    	ts->bo.start = ts->bo.data;
00039a  4888              LDR      r0,|L1.1468|
00039c  6800              LDR      r0,[r0,#0]  ; ts
00039e  f5007049          ADD      r0,r0,#0x324
0003a2  4986              LDR      r1,|L1.1468|
0003a4  6809              LDR      r1,[r1,#0]  ; ts
0003a6  f8c10524          STR      r0,[r1,#0x524]
;;;290    
;;;291    	// Run the shell.
;;;292    	shell_process();
0003aa  f7fffffe          BL       shell_process
;;;293    
;;;294    	// Close the socket.
;;;295    	if (ts->sock >= 0)
0003ae  4883              LDR      r0,|L1.1468|
0003b0  6800              LDR      r0,[r0,#0]  ; ts
0003b2  6800              LDR      r0,[r0,#0]
0003b4  2800              CMP      r0,#0
0003b6  db09              BLT      |L1.972|
;;;296    	{
;;;297    		close(ts->sock);
0003b8  4980              LDR      r1,|L1.1468|
0003ba  6809              LDR      r1,[r1,#0]  ; ts
0003bc  6808              LDR      r0,[r1,#0]
0003be  f7fffffe          BL       lwip_close
;;;298    		ts->sock = -1;
0003c2  f04f30ff          MOV      r0,#0xffffffff
0003c6  497d              LDR      r1,|L1.1468|
0003c8  6809              LDR      r1,[r1,#0]  ; ts
0003ca  6008              STR      r0,[r1,#0]
                  |L1.972|
;;;299    	}
;;;300    }
0003cc  bd1c              POP      {r2-r4,pc}
;;;301    
                          ENDP

                  telnet_shell_thread PROC
;;;302    static void telnet_shell_thread(void *arg)
0003ce  b570              PUSH     {r4-r6,lr}
;;;303    {
0003d0  b08a              SUB      sp,sp,#0x28
0003d2  4606              MOV      r6,r0
;;;304      int sock, newconn, size;
;;;305      struct sockaddr_in address, remotehost;
;;;306    
;;;307    	// Create a TCP socket.
;;;308      if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) 
0003d4  2200              MOVS     r2,#0
0003d6  2101              MOVS     r1,#1
0003d8  2002              MOVS     r0,#2
0003da  f7fffffe          BL       lwip_socket
0003de  1e05              SUBS     r5,r0,#0
0003e0  da08              BGE      |L1.1012|
;;;309      {
;;;310    		rt_tsk_lock();
0003e2  f7fffffe          BL       rt_tsk_lock
;;;311        printf("TELNET: cannot create socket");
0003e6  a076              ADR      r0,|L1.1472|
0003e8  f7fffffe          BL       __2printf
;;;312    		rt_tsk_unlock();
0003ec  f7fffffe          BL       rt_tsk_unlock
                  |L1.1008|
;;;313        return;
;;;314      }
;;;315      
;;;316      // Bind to port 23 at any interface.
;;;317      address.sin_family = AF_INET;
;;;318      address.sin_port = htons(23);
;;;319      address.sin_addr.s_addr = INADDR_ANY;
;;;320    
;;;321      if (bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
;;;322      {
;;;323    		rt_tsk_lock();
;;;324        printf("TELNET: cannot bind socket");
;;;325    		rt_tsk_unlock();
;;;326        return;
;;;327      }
;;;328      
;;;329      // Listen for incoming connections (TCP listen backlog = 1).
;;;330      listen(sock, 1);
;;;331      
;;;332      size = sizeof(remotehost);
;;;333      
;;;334      for (;;) 
;;;335      {
;;;336        newconn = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&size);
;;;337        if (newconn > 0) telnet_shell(newconn);
;;;338      }
;;;339    }
0003f0  b00a              ADD      sp,sp,#0x28
0003f2  bd70              POP      {r4-r6,pc}
                  |L1.1012|
0003f4  2002              MOVS     r0,#2                 ;317
0003f6  f88d0015          STRB     r0,[sp,#0x15]         ;317
0003fa  2017              MOVS     r0,#0x17              ;318
0003fc  f7fffffe          BL       lwip_htons
000400  f8ad0016          STRH     r0,[sp,#0x16]         ;318
000404  2000              MOVS     r0,#0                 ;319
000406  9006              STR      r0,[sp,#0x18]         ;319
000408  2210              MOVS     r2,#0x10              ;321
00040a  a905              ADD      r1,sp,#0x14           ;321
00040c  4628              MOV      r0,r5                 ;321
00040e  f7fffffe          BL       lwip_bind
000412  2800              CMP      r0,#0                 ;321
000414  da07              BGE      |L1.1062|
000416  f7fffffe          BL       rt_tsk_lock
00041a  a071              ADR      r0,|L1.1504|
00041c  f7fffffe          BL       __2printf
000420  f7fffffe          BL       rt_tsk_unlock
000424  e7e4              B        |L1.1008|
                  |L1.1062|
000426  2101              MOVS     r1,#1                 ;330
000428  4628              MOV      r0,r5                 ;330
00042a  f7fffffe          BL       lwip_listen
00042e  2010              MOVS     r0,#0x10              ;332
000430  9009              STR      r0,[sp,#0x24]         ;332
000432  bf00              NOP                            ;334
                  |L1.1076|
000434  aa09              ADD      r2,sp,#0x24           ;336
000436  a901              ADD      r1,sp,#4              ;336
000438  4628              MOV      r0,r5                 ;336
00043a  f7fffffe          BL       lwip_accept
00043e  4604              MOV      r4,r0                 ;336
000440  2c00              CMP      r4,#0                 ;337
000442  ddf7              BLE      |L1.1076|
000444  4620              MOV      r0,r4                 ;337
000446  f7fffffe          BL       telnet_shell
00044a  e7f3              B        |L1.1076|
;;;340    
                          ENDP

                  telnet_shell_init PROC
;;;341    void telnet_shell_init(void)
00044c  b508              PUSH     {r3,lr}
;;;342    {
;;;343      sys_thread_new("TELNET", telnet_shell_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
00044e  2000              MOVS     r0,#0
000450  f44f6380          MOV      r3,#0x400
000454  4602              MOV      r2,r0
000456  4969              LDR      r1,|L1.1532|
000458  9000              STR      r0,[sp,#0]
00045a  a069              ADR      r0,|L1.1536|
00045c  f7fffffe          BL       sys_thread_new
;;;344    }
000460  bd08              POP      {r3,pc}
;;;345    
                          ENDP

                  telnet_putc PROC
;;;346    void telnet_putc(char c)
000462  b501              PUSH     {r0,lr}
;;;347    {
;;;348    	if (c == '\n') telnet_putc('\r');
000464  f89d0000          LDRB     r0,[sp,#0]
000468  280a              CMP      r0,#0xa
00046a  d102              BNE      |L1.1138|
00046c  200d              MOVS     r0,#0xd
00046e  f7fffffe          BL       telnet_putc
                  |L1.1138|
;;;349    	if (ts->sock > 0) telnet_write(&c, 1, (c == '\n') ? true : false);
000472  4852              LDR      r0,|L1.1468|
000474  6800              LDR      r0,[r0,#0]  ; ts
000476  6800              LDR      r0,[r0,#0]
000478  2800              CMP      r0,#0
00047a  dd0b              BLE      |L1.1172|
00047c  f89d0000          LDRB     r0,[sp,#0]
000480  280a              CMP      r0,#0xa
000482  d101              BNE      |L1.1160|
000484  2001              MOVS     r0,#1
000486  e000              B        |L1.1162|
                  |L1.1160|
000488  2000              MOVS     r0,#0
                  |L1.1162|
00048a  4602              MOV      r2,r0
00048c  2101              MOVS     r1,#1
00048e  4668              MOV      r0,sp
000490  f7fffffe          BL       telnet_write
                  |L1.1172|
;;;350    }
000494  bd08              POP      {r3,pc}
;;;351    
                          ENDP

                  telnet_puts PROC
;;;352    void telnet_puts(char *str)
000496  b510              PUSH     {r4,lr}
;;;353    {
000498  4604              MOV      r4,r0
;;;354    	// Send each character in the string.
;;;355    	while (*str) telnet_putc(*(str++));
00049a  e003              B        |L1.1188|
                  |L1.1180|
00049c  f8140b01          LDRB     r0,[r4],#1
0004a0  f7fffffe          BL       telnet_putc
                  |L1.1188|
0004a4  7820              LDRB     r0,[r4,#0]
0004a6  2800              CMP      r0,#0
0004a8  d1f8              BNE      |L1.1180|
;;;356    }
0004aa  bd10              POP      {r4,pc}
;;;357    
                          ENDP

                  telnet_printf PROC
;;;358    void telnet_printf(const char *fmt, ...)
0004ac  b40f              PUSH     {r0-r3}
;;;359    {
0004ae  e92d4ff0          PUSH     {r4-r11,lr}
0004b2  b087              SUB      sp,sp,#0x1c
;;;360    	char c;
;;;361    	char d;
;;;362    	char *p;
;;;363    	char s[16];
;;;364    	unsigned int f;
;;;365    	unsigned int r;
;;;366    	unsigned int i;
;;;367    	unsigned int j;
;;;368    	unsigned int w;
;;;369    	unsigned long v;
;;;370    	__va_list arp;
;;;371    
;;;372    	va_start (arp, fmt);
0004b4  a811              ADD      r0,sp,#0x44
0004b6  9001              STR      r0,[sp,#4]
;;;373    	for (;;)
0004b8  bf00              NOP      
                  |L1.1210|
;;;374    	{
;;;375    		// Get a character.
;;;376    		c = *(fmt++);
0004ba  9810              LDR      r0,[sp,#0x40]
0004bc  f8104b01          LDRB     r4,[r0],#1
0004c0  9010              STR      r0,[sp,#0x40]
;;;377    		// End of format?
;;;378    		if (!c) break;
0004c2  b904              CBNZ     r4,|L1.1222|
0004c4  e12a              B        |L1.1820|
                  |L1.1222|
;;;379    		// Pass through if it not a % sequence.
;;;380    		if (c != '%')
0004c6  2c25              CMP      r4,#0x25
0004c8  d003              BEQ      |L1.1234|
;;;381    		{
;;;382    			telnet_putc(c);
0004ca  4620              MOV      r0,r4
0004cc  f7fffffe          BL       telnet_putc
;;;383    			continue;
0004d0  e7f3              B        |L1.1210|
                  |L1.1234|
;;;384    		}
;;;385    		f = 0;
0004d2  2600              MOVS     r6,#0
;;;386    		// Get first character of % sequence.
;;;387    		c = *(fmt++);
0004d4  9810              LDR      r0,[sp,#0x40]
0004d6  f8104b01          LDRB     r4,[r0],#1
0004da  9010              STR      r0,[sp,#0x40]
;;;388    		// Flag: '0' padded.
;;;389    		if (c == '0')
0004dc  2c30              CMP      r4,#0x30
0004de  d105              BNE      |L1.1260|
;;;390    		{
;;;391    			f = 1;
0004e0  2601              MOVS     r6,#1
;;;392    			c = *(fmt++);
0004e2  9810              LDR      r0,[sp,#0x40]
0004e4  f8104b01          LDRB     r4,[r0],#1
0004e8  9010              STR      r0,[sp,#0x40]
0004ea  e006              B        |L1.1274|
                  |L1.1260|
;;;393    		}
;;;394    		else
;;;395    		{
;;;396    			// Flag: left justified.
;;;397    			if (c == '-')
0004ec  2c2d              CMP      r4,#0x2d
0004ee  d104              BNE      |L1.1274|
;;;398    			{
;;;399    				f = 2;
0004f0  2602              MOVS     r6,#2
;;;400    				c = *(fmt++);
0004f2  9810              LDR      r0,[sp,#0x40]
0004f4  f8104b01          LDRB     r4,[r0],#1
0004f8  9010              STR      r0,[sp,#0x40]
                  |L1.1274|
;;;401    			}
;;;402    		}
;;;403    		for (w = 0; c >= '0' && c <= '9'; c = *(fmt++))	/* Minimum width */
0004fa  f04f0900          MOV      r9,#0
0004fe  e009              B        |L1.1300|
                  |L1.1280|
;;;404    			w = w * 10 + c - '0';
000500  eb090089          ADD      r0,r9,r9,LSL #2
000504  eb040040          ADD      r0,r4,r0,LSL #1
000508  f1a00930          SUB      r9,r0,#0x30
00050c  9810              LDR      r0,[sp,#0x40]         ;403
00050e  f8104b01          LDRB     r4,[r0],#1            ;403
000512  9010              STR      r0,[sp,#0x40]         ;403
                  |L1.1300|
000514  2c30              CMP      r4,#0x30              ;403
000516  db01              BLT      |L1.1308|
000518  2c39              CMP      r4,#0x39              ;403
00051a  ddf1              BLE      |L1.1280|
                  |L1.1308|
;;;405    		// Prefix: Size is long int.
;;;406    		if (c == 'l' || c == 'L')
00051c  2c6c              CMP      r4,#0x6c
00051e  d001              BEQ      |L1.1316|
000520  2c4c              CMP      r4,#0x4c
000522  d105              BNE      |L1.1328|
                  |L1.1316|
;;;407    		{
;;;408    			f |= 4;
000524  f0460604          ORR      r6,r6,#4
;;;409    			c = *(fmt++);
000528  9810              LDR      r0,[sp,#0x40]
00052a  f8104b01          LDRB     r4,[r0],#1
00052e  9010              STR      r0,[sp,#0x40]
                  |L1.1328|
;;;410    		}
;;;411    		// End of format.
;;;412    		if (!c) break;
000530  b904              CBNZ     r4,|L1.1332|
000532  e0f3              B        |L1.1820|
                  |L1.1332|
;;;413    		d = c;
000534  4625              MOV      r5,r4
;;;414    		if (d >= 'a') d -= 0x20;
000536  2d61              CMP      r5,#0x61
000538  db02              BLT      |L1.1344|
00053a  f1a50020          SUB      r0,r5,#0x20
00053e  b2c5              UXTB     r5,r0
                  |L1.1344|
;;;415    		// Type is...
;;;416    		switch (d) {
000540  2d4f              CMP      r5,#0x4f
000542  d06c              BEQ      |L1.1566|
000544  dc06              BGT      |L1.1364|
000546  2d42              CMP      r5,#0x42
000548  d066              BEQ      |L1.1560|
00054a  2d43              CMP      r5,#0x43
00054c  d05c              BEQ      |L1.1544|
00054e  2d44              CMP      r5,#0x44
000550  d170              BNE      |L1.1588|
000552  e067              B        |L1.1572|
                  |L1.1364|
000554  2d53              CMP      r5,#0x53
000556  d004              BEQ      |L1.1378|
000558  2d55              CMP      r5,#0x55
00055a  d064              BEQ      |L1.1574|
00055c  2d58              CMP      r5,#0x58
00055e  d169              BNE      |L1.1588|
000560  e064              B        |L1.1580|
                  |L1.1378|
;;;417    		// String.
;;;418    		case 'S' :
;;;419    			p = va_arg(arp, char*);
000562  9801              LDR      r0,[sp,#4]
000564  f850bb04          LDR      r11,[r0],#4
000568  9001              STR      r0,[sp,#4]
;;;420    			for (j = 0; p[j]; j++);
00056a  f04f0800          MOV      r8,#0
00056e  e001              B        |L1.1396|
                  |L1.1392|
000570  f1080801          ADD      r8,r8,#1
                  |L1.1396|
000574  f81b0008          LDRB     r0,[r11,r8]
000578  2800              CMP      r0,#0
00057a  d1f9              BNE      |L1.1392|
;;;421    			while (!(f & 2) && j++ < w) telnet_putc(' ');
00057c  e002              B        |L1.1412|
                  |L1.1406|
00057e  2020              MOVS     r0,#0x20
000580  f7fffffe          BL       telnet_putc
                  |L1.1412|
000584  f0060002          AND      r0,r6,#2
000588  b920              CBNZ     r0,|L1.1428|
00058a  4640              MOV      r0,r8
00058c  f1080801          ADD      r8,r8,#1
000590  4548              CMP      r0,r9
000592  d3f4              BCC      |L1.1406|
                  |L1.1428|
;;;422    			while (*p) telnet_putc(*(p++));
000594  e003              B        |L1.1438|
                  |L1.1430|
000596  f81b0b01          LDRB     r0,[r11],#1
00059a  f7fffffe          BL       telnet_putc
                  |L1.1438|
00059e  f89b0000          LDRB     r0,[r11,#0]
0005a2  2800              CMP      r0,#0
0005a4  d1f7              BNE      |L1.1430|
;;;423    			while (j++ < w) telnet_putc(' ');
0005a6  e002              B        |L1.1454|
                  |L1.1448|
0005a8  2020              MOVS     r0,#0x20
0005aa  f7fffffe          BL       telnet_putc
                  |L1.1454|
0005ae  4640              MOV      r0,r8
0005b0  f1080801          ADD      r8,r8,#1
0005b4  4548              CMP      r0,r9
0005b6  d3f7              BCC      |L1.1448|
;;;424    			continue;
0005b8  e77f              B        |L1.1210|
0005ba  e030              B        |L1.1566|
                  |L1.1468|
                          DCD      ||ts||
                  |L1.1472|
0005c0  54454c4e          DCB      "TELNET: cannot create socket",0
0005c4  45543a20
0005c8  63616e6e
0005cc  6f742063
0005d0  72656174
0005d4  6520736f
0005d8  636b6574
0005dc  00      
0005dd  00                DCB      0
0005de  00                DCB      0
0005df  00                DCB      0
                  |L1.1504|
0005e0  54454c4e          DCB      "TELNET: cannot bind socket",0
0005e4  45543a20
0005e8  63616e6e
0005ec  6f742062
0005f0  696e6420
0005f4  736f636b
0005f8  657400  
0005fb  00                DCB      0
                  |L1.1532|
                          DCD      telnet_shell_thread
                  |L1.1536|
000600  54454c4e          DCB      "TELNET",0
000604  455400  
000607  00                DCB      0
                  |L1.1544|
;;;425    		// Character.
;;;426    		case 'C' :
;;;427    			telnet_putc((char) va_arg(arp, int));
000608  9901              LDR      r1,[sp,#4]
00060a  f8112b04          LDRB     r2,[r1],#4
00060e  b2d0              UXTB     r0,r2
000610  9101              STR      r1,[sp,#4]
000612  f7fffffe          BL       telnet_putc
;;;428    			continue;
000616  e750              B        |L1.1210|
                  |L1.1560|
;;;429    		// Binary.
;;;430    		case 'B' :
;;;431    			r = 2;
000618  2002              MOVS     r0,#2
00061a  9002              STR      r0,[sp,#8]
;;;432    			break;
00061c  e00e              B        |L1.1596|
                  |L1.1566|
;;;433    		// Octal.
;;;434    		case 'O' :
;;;435    			r = 8;
00061e  2008              MOVS     r0,#8
000620  9002              STR      r0,[sp,#8]
;;;436    			break;
000622  e00b              B        |L1.1596|
                  |L1.1572|
;;;437    		// Signed decimal.
;;;438    		case 'D' :
;;;439    		// Unsigned decimal.
;;;440    		case 'U' :
000624  bf00              NOP      
                  |L1.1574|
;;;441    			r = 10;
000626  200a              MOVS     r0,#0xa
000628  9002              STR      r0,[sp,#8]
;;;442    			break;
00062a  e007              B        |L1.1596|
                  |L1.1580|
;;;443    		// Hexadecimal.
;;;444    		case 'X' :
;;;445    			r = 16;
00062c  2010              MOVS     r0,#0x10
00062e  9002              STR      r0,[sp,#8]
;;;446    			break;
000630  e004              B        |L1.1596|
000632  e7ff              B        |L1.1588|
                  |L1.1588|
;;;447    		// Unknown type (passthrough).
;;;448    		default:
;;;449    			telnet_putc(c);
000634  4620              MOV      r0,r4
000636  f7fffffe          BL       telnet_putc
;;;450    			continue;
00063a  e73e              B        |L1.1210|
                  |L1.1596|
00063c  bf00              NOP                            ;432
;;;451    		}
;;;452    		// Get an argument and put it in numeral.
;;;453    		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long) va_arg(arp, int) : (long) va_arg(arp, unsigned int));
00063e  f0060004          AND      r0,r6,#4
000642  b128              CBZ      r0,|L1.1616|
000644  9801              LDR      r0,[sp,#4]
000646  6800              LDR      r0,[r0,#0]
000648  9901              LDR      r1,[sp,#4]
00064a  1d09              ADDS     r1,r1,#4
00064c  9101              STR      r1,[sp,#4]
00064e  e00c              B        |L1.1642|
                  |L1.1616|
000650  2d44              CMP      r5,#0x44
000652  d105              BNE      |L1.1632|
000654  9801              LDR      r0,[sp,#4]
000656  6800              LDR      r0,[r0,#0]
000658  9901              LDR      r1,[sp,#4]
00065a  1d09              ADDS     r1,r1,#4
00065c  9101              STR      r1,[sp,#4]
00065e  e004              B        |L1.1642|
                  |L1.1632|
000660  9801              LDR      r0,[sp,#4]
000662  6800              LDR      r0,[r0,#0]
000664  9901              LDR      r1,[sp,#4]
000666  1d09              ADDS     r1,r1,#4
000668  9101              STR      r1,[sp,#4]
                  |L1.1642|
00066a  4682              MOV      r10,r0
;;;454    		if (d == 'D' && (v & 0x80000000)) {
00066c  2d44              CMP      r5,#0x44
00066e  d106              BNE      |L1.1662|
000670  f00a4000          AND      r0,r10,#0x80000000
000674  b118              CBZ      r0,|L1.1662|
;;;455    			v = 0 - v;
000676  f1ca0a00          RSB      r10,r10,#0
;;;456    			f |= 8;
00067a  f0460608          ORR      r6,r6,#8
                  |L1.1662|
;;;457    		}
;;;458    		i = 0;
00067e  2700              MOVS     r7,#0
;;;459    		do {
000680  bf00              NOP      
                  |L1.1666|
;;;460    			d = (char)(v % r); v /= r;
000682  9802              LDR      r0,[sp,#8]
000684  fbbaf1f0          UDIV     r1,r10,r0
000688  fb00a011          MLS      r0,r0,r1,r10
00068c  b2c5              UXTB     r5,r0
00068e  9802              LDR      r0,[sp,#8]
000690  fbbafaf0          UDIV     r10,r10,r0
;;;461    			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
000694  2d09              CMP      r5,#9
000696  dd06              BLE      |L1.1702|
000698  2c78              CMP      r4,#0x78
00069a  d101              BNE      |L1.1696|
00069c  2027              MOVS     r0,#0x27
00069e  e000              B        |L1.1698|
                  |L1.1696|
0006a0  2007              MOVS     r0,#7
                  |L1.1698|
0006a2  4428              ADD      r0,r0,r5
0006a4  b2c5              UXTB     r5,r0
                  |L1.1702|
;;;462    			s[i++] = d + '0';
0006a6  f1050030          ADD      r0,r5,#0x30
0006aa  b2c2              UXTB     r2,r0
0006ac  4638              MOV      r0,r7
0006ae  1c7f              ADDS     r7,r7,#1
0006b0  a903              ADD      r1,sp,#0xc
0006b2  540a              STRB     r2,[r1,r0]
;;;463    		} while (v && i < sizeof(s));
0006b4  f1ba0f00          CMP      r10,#0
0006b8  d001              BEQ      |L1.1726|
0006ba  2f10              CMP      r7,#0x10
0006bc  d3e1              BCC      |L1.1666|
                  |L1.1726|
;;;464    		if (f & 8) s[i++] = '-';
0006be  f0060008          AND      r0,r6,#8
0006c2  b120              CBZ      r0,|L1.1742|
0006c4  222d              MOVS     r2,#0x2d
0006c6  4638              MOV      r0,r7
0006c8  1c7f              ADDS     r7,r7,#1
0006ca  a903              ADD      r1,sp,#0xc
0006cc  540a              STRB     r2,[r1,r0]
                  |L1.1742|
;;;465    		j = i; d = (f & 1) ? '0' : ' ';
0006ce  46b8              MOV      r8,r7
0006d0  f0060001          AND      r0,r6,#1
0006d4  b108              CBZ      r0,|L1.1754|
0006d6  2030              MOVS     r0,#0x30
0006d8  e000              B        |L1.1756|
                  |L1.1754|
0006da  2020              MOVS     r0,#0x20
                  |L1.1756|
0006dc  4605              MOV      r5,r0
;;;466    		while (!(f & 2) && j++ < w) telnet_putc(d);
0006de  e002              B        |L1.1766|
                  |L1.1760|
0006e0  4628              MOV      r0,r5
0006e2  f7fffffe          BL       telnet_putc
                  |L1.1766|
0006e6  f0060002          AND      r0,r6,#2
0006ea  b920              CBNZ     r0,|L1.1782|
0006ec  4640              MOV      r0,r8
0006ee  f1080801          ADD      r8,r8,#1
0006f2  4548              CMP      r0,r9
0006f4  d3f4              BCC      |L1.1760|
                  |L1.1782|
;;;467    		do telnet_putc(s[--i]); while(i);
0006f6  bf00              NOP      
                  |L1.1784|
0006f8  1e79              SUBS     r1,r7,#1
0006fa  460f              MOV      r7,r1
0006fc  aa03              ADD      r2,sp,#0xc
0006fe  5c50              LDRB     r0,[r2,r1]
000700  f7fffffe          BL       telnet_putc
000704  2f00              CMP      r7,#0
000706  d1f7              BNE      |L1.1784|
;;;468    		while (j++ < w) telnet_putc(' ');
000708  e002              B        |L1.1808|
                  |L1.1802|
00070a  2020              MOVS     r0,#0x20
00070c  f7fffffe          BL       telnet_putc
                  |L1.1808|
000710  4640              MOV      r0,r8
000712  f1080801          ADD      r8,r8,#1
000716  4548              CMP      r0,r9
000718  d3f7              BCC      |L1.1802|
00071a  e6ce              B        |L1.1210|
                  |L1.1820|
00071c  bf00              NOP                            ;378
;;;469    	}
;;;470    	va_end(arp);
00071e  2000              MOVS     r0,#0
000720  9001              STR      r0,[sp,#4]
;;;471    }
000722  b007              ADD      sp,sp,#0x1c
000724  e8bd0ff0          POP      {r4-r11}
000728  f85dfb14          LDR      pc,[sp],#0x14
;;;472    
                          ENDP

                  telnet_flush PROC
;;;473    // Flush the telnet output buffers.
;;;474    int telnet_flush(void)
00072c  e92d41ff          PUSH     {r0-r8,lr}
;;;475    {
;;;476      int i;
;;;477    	int n;
;;;478    	int len;
;;;479      fd_set data_write;
;;;480      struct timeval tv;
;;;481      unsigned char *ptr;
;;;482    
;;;483    	len = n = 0;
000730  2000              MOVS     r0,#0
000732  4604              MOV      r4,r0
000734  4606              MOV      r6,r0
;;;484    
;;;485    	// Is there data to flush?
;;;486    	if (ts->bo.start > ts->bo.data)
000736  48af              LDR      r0,|L1.2548|
000738  6800              LDR      r0,[r0,#0]  ; ts
00073a  f8d01524          LDR      r1,[r0,#0x524]
00073e  48ad              LDR      r0,|L1.2548|
000740  6800              LDR      r0,[r0,#0]  ; ts
000742  f5007049          ADD      r0,r0,#0x324
000746  4281              CMP      r1,r0
000748  d96e              BLS      |L1.2088|
;;;487    	{
;;;488    		ptr = ts->bo.data;
00074a  48aa              LDR      r0,|L1.2548|
00074c  6800              LDR      r0,[r0,#0]  ; ts
00074e  f5007749          ADD      r7,r0,#0x324
;;;489    		do
000752  bf00              NOP      
                  |L1.1876|
;;;490    		{
;;;491    			FD_ZERO(&data_write);
000754  2000              MOVS     r0,#0
000756  9003              STR      r0,[sp,#0xc]
;;;492    			FD_SET(ts->sock, &data_write);
000758  49a6              LDR      r1,|L1.2548|
00075a  6809              LDR      r1,[r1,#0]  ; ts
00075c  6808              LDR      r0,[r1,#0]
00075e  17c1              ASRS     r1,r0,#31
000760  eb007151          ADD      r1,r0,r1,LSR #29
000764  10c9              ASRS     r1,r1,#3
000766  aa03              ADD      r2,sp,#0xc
000768  5c51              LDRB     r1,[r2,r1]
00076a  4aa2              LDR      r2,|L1.2548|
00076c  6812              LDR      r2,[r2,#0]  ; ts
00076e  7812              LDRB     r2,[r2,#0]
000770  f0020307          AND      r3,r2,#7
000774  2201              MOVS     r2,#1
000776  409a              LSLS     r2,r2,r3
000778  4311              ORRS     r1,r1,r2
00077a  4a9e              LDR      r2,|L1.2548|
00077c  6812              LDR      r2,[r2,#0]  ; ts
00077e  6810              LDR      r0,[r2,#0]
000780  17c2              ASRS     r2,r0,#31
000782  eb007252          ADD      r2,r0,r2,LSR #29
000786  10d2              ASRS     r2,r2,#3
000788  ab03              ADD      r3,sp,#0xc
00078a  5499              STRB     r1,[r3,r2]
;;;493    			tv.tv_sec = 1;
00078c  2001              MOVS     r0,#1
00078e  9001              STR      r0,[sp,#4]
;;;494    			tv.tv_usec = 0;
000790  2000              MOVS     r0,#0
000792  9002              STR      r0,[sp,#8]
;;;495    			i = select(FD_SETSIZE, NULL, &data_write, NULL, &tv);
000794  a801              ADD      r0,sp,#4
000796  2300              MOVS     r3,#0
000798  aa03              ADD      r2,sp,#0xc
00079a  4619              MOV      r1,r3
00079c  9000              STR      r0,[sp,#0]
00079e  2014              MOVS     r0,#0x14
0007a0  f7fffffe          BL       lwip_select
0007a4  4605              MOV      r5,r0
;;;496    			if ((i > 0) && (FD_ISSET(ts->sock, &data_write) != 0))
0007a6  2d00              CMP      r5,#0
0007a8  dd27              BLE      |L1.2042|
0007aa  4992              LDR      r1,|L1.2548|
0007ac  6809              LDR      r1,[r1,#0]  ; ts
0007ae  6808              LDR      r0,[r1,#0]
0007b0  17c1              ASRS     r1,r0,#31
0007b2  eb007151          ADD      r1,r0,r1,LSR #29
0007b6  10c9              ASRS     r1,r1,#3
0007b8  aa03              ADD      r2,sp,#0xc
0007ba  5c51              LDRB     r1,[r2,r1]
0007bc  4a8d              LDR      r2,|L1.2548|
0007be  6812              LDR      r2,[r2,#0]  ; ts
0007c0  7812              LDRB     r2,[r2,#0]
0007c2  f0020307          AND      r3,r2,#7
0007c6  2201              MOVS     r2,#1
0007c8  409a              LSLS     r2,r2,r3
0007ca  4011              ANDS     r1,r1,r2
0007cc  b1a9              CBZ      r1,|L1.2042|
;;;497    			{
;;;498    				n = send(ts->sock, ptr, (int) (ts->bo.start - ts->bo.data) - len, 0);
0007ce  4989              LDR      r1,|L1.2548|
0007d0  6809              LDR      r1,[r1,#0]  ; ts
0007d2  f8d13524          LDR      r3,[r1,#0x524]
0007d6  4987              LDR      r1,|L1.2548|
0007d8  6809              LDR      r1,[r1,#0]  ; ts
0007da  f5017149          ADD      r1,r1,#0x324
0007de  1a59              SUBS     r1,r3,r1
0007e0  1b8a              SUBS     r2,r1,r6
0007e2  4984              LDR      r1,|L1.2548|
0007e4  6809              LDR      r1,[r1,#0]  ; ts
0007e6  2300              MOVS     r3,#0
0007e8  6808              LDR      r0,[r1,#0]
0007ea  4639              MOV      r1,r7
0007ec  f7fffffe          BL       lwip_send
0007f0  4604              MOV      r4,r0
;;;499    				if (n >= 0)
0007f2  2c00              CMP      r4,#0
0007f4  db01              BLT      |L1.2042|
;;;500    				{
;;;501    					ptr += n;
0007f6  4427              ADD      r7,r7,r4
;;;502    					len += n;
0007f8  4426              ADD      r6,r6,r4
                  |L1.2042|
;;;503    				}
;;;504    			}
;;;505    		}
;;;506    		while ((n >= 0) && (len < (int) (ts->bo.start - ts->bo.data)) && (i > 0));
0007fa  2c00              CMP      r4,#0
0007fc  db0c              BLT      |L1.2072|
0007fe  487d              LDR      r0,|L1.2548|
000800  6800              LDR      r0,[r0,#0]  ; ts
000802  f8d01524          LDR      r1,[r0,#0x524]
000806  487b              LDR      r0,|L1.2548|
000808  6800              LDR      r0,[r0,#0]  ; ts
00080a  f5007049          ADD      r0,r0,#0x324
00080e  1a08              SUBS     r0,r1,r0
000810  42b0              CMP      r0,r6
000812  dd01              BLE      |L1.2072|
000814  2d00              CMP      r5,#0
000816  dc9d              BGT      |L1.1876|
                  |L1.2072|
;;;507    		ts->bo.start = ts->bo.data;
000818  4876              LDR      r0,|L1.2548|
00081a  6800              LDR      r0,[r0,#0]  ; ts
00081c  f5007049          ADD      r0,r0,#0x324
000820  4974              LDR      r1,|L1.2548|
000822  6809              LDR      r1,[r1,#0]  ; ts
000824  f8c10524          STR      r0,[r1,#0x524]
                  |L1.2088|
;;;508    	}
;;;509    
;;;510      return n < 0 ? n : len;
000828  2c00              CMP      r4,#0
00082a  da03              BGE      |L1.2100|
00082c  4620              MOV      r0,r4
                  |L1.2094|
;;;511    }
00082e  b004              ADD      sp,sp,#0x10
000830  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2100|
000834  4630              MOV      r0,r6                 ;510
000836  e7fa              B        |L1.2094|
;;;512    
                          ENDP

                  telnet_getc PROC
;;;513    // Get the next character from the buffer.
;;;514    int telnet_getc(void)
000838  b57f              PUSH     {r0-r6,lr}
;;;515    {
;;;516      int i;
;;;517    	int n;
;;;518    	int ch;
;;;519      fd_set fdsr;
;;;520      struct timeval tv_timeout;
;;;521    
;;;522    	// Do we need to fill the input buffer with new data?
;;;523    	while (ts->bi.start == ts->bi.end)
00083a  e068              B        |L1.2318|
                  |L1.2108|
;;;524    	{
;;;525    		FD_ZERO(&fdsr);
00083c  2000              MOVS     r0,#0
00083e  9003              STR      r0,[sp,#0xc]
;;;526    		FD_SET(ts->sock, &fdsr);
000840  496c              LDR      r1,|L1.2548|
000842  6809              LDR      r1,[r1,#0]  ; ts
000844  6808              LDR      r0,[r1,#0]
000846  17c1              ASRS     r1,r0,#31
000848  eb007151          ADD      r1,r0,r1,LSR #29
00084c  10c9              ASRS     r1,r1,#3
00084e  aa03              ADD      r2,sp,#0xc
000850  5c51              LDRB     r1,[r2,r1]
000852  4a68              LDR      r2,|L1.2548|
000854  6812              LDR      r2,[r2,#0]  ; ts
000856  7812              LDRB     r2,[r2,#0]
000858  f0020307          AND      r3,r2,#7
00085c  2201              MOVS     r2,#1
00085e  409a              LSLS     r2,r2,r3
000860  4311              ORRS     r1,r1,r2
000862  4a64              LDR      r2,|L1.2548|
000864  6812              LDR      r2,[r2,#0]  ; ts
000866  6810              LDR      r0,[r2,#0]
000868  17c2              ASRS     r2,r0,#31
00086a  eb007252          ADD      r2,r0,r2,LSR #29
00086e  10d2              ASRS     r2,r2,#3
000870  ab03              ADD      r3,sp,#0xc
000872  5499              STRB     r1,[r3,r2]
;;;527    		tv_timeout.tv_sec = 1;
000874  2001              MOVS     r0,#1
000876  9001              STR      r0,[sp,#4]
;;;528    		tv_timeout.tv_usec = 0;
000878  2000              MOVS     r0,#0
00087a  9002              STR      r0,[sp,#8]
;;;529    
;;;530    		// Wait for input activity on the socket.
;;;531    		i = select(FD_SETSIZE, &fdsr, NULL, NULL, &tv_timeout);
00087c  a801              ADD      r0,sp,#4
00087e  2300              MOVS     r3,#0
000880  461a              MOV      r2,r3
000882  a903              ADD      r1,sp,#0xc
000884  9000              STR      r0,[sp,#0]
000886  2014              MOVS     r0,#0x14
000888  f7fffffe          BL       lwip_select
00088c  4605              MOV      r5,r0
;;;532    
;;;533    		// Was a error returned?
;;;534    		if (i < 0) break;
00088e  2d00              CMP      r5,#0
000890  da00              BGE      |L1.2196|
000892  e046              B        |L1.2338|
                  |L1.2196|
;;;535    
;;;536    		// Do we have data to read?
;;;537        if ((i > 0) && FD_ISSET(ts->sock, &fdsr))
000894  2d00              CMP      r5,#0
000896  dd38              BLE      |L1.2314|
000898  4956              LDR      r1,|L1.2548|
00089a  6809              LDR      r1,[r1,#0]  ; ts
00089c  6808              LDR      r0,[r1,#0]
00089e  17c1              ASRS     r1,r0,#31
0008a0  eb007151          ADD      r1,r0,r1,LSR #29
0008a4  10c9              ASRS     r1,r1,#3
0008a6  aa03              ADD      r2,sp,#0xc
0008a8  5c51              LDRB     r1,[r2,r1]
0008aa  4a52              LDR      r2,|L1.2548|
0008ac  6812              LDR      r2,[r2,#0]  ; ts
0008ae  7812              LDRB     r2,[r2,#0]
0008b0  f0020307          AND      r3,r2,#7
0008b4  2201              MOVS     r2,#1
0008b6  409a              LSLS     r2,r2,r3
0008b8  4011              ANDS     r1,r1,r2
0008ba  b331              CBZ      r1,|L1.2314|
;;;538        {
;;;539    			// Read data from user.
;;;540    			n = recv(ts->sock, ts->bi.data, sizeof(ts->bi.data), 0);
0008bc  494d              LDR      r1,|L1.2548|
0008be  6809              LDR      r1,[r1,#0]  ; ts
0008c0  2300              MOVS     r3,#0
0008c2  f44f7200          MOV      r2,#0x200
0008c6  6808              LDR      r0,[r1,#0]
0008c8  494a              LDR      r1,|L1.2548|
0008ca  6809              LDR      r1,[r1,#0]  ; ts
0008cc  f501718e          ADD      r1,r1,#0x11c
0008d0  f7fffffe          BL       lwip_recv
0008d4  4604              MOV      r4,r0
;;;541    
;;;542    			// Was a error returned?
;;;543    			if (n < 0) break;
0008d6  2c00              CMP      r4,#0
0008d8  da00              BGE      |L1.2268|
0008da  e022              B        |L1.2338|
                  |L1.2268|
;;;544    	
;;;545    			// End of stream?
;;;546    			if (n == 0) break;
0008dc  b904              CBNZ     r4,|L1.2272|
0008de  e020              B        |L1.2338|
                  |L1.2272|
;;;547    
;;;548    			// Set the input buffer.
;;;549    			ts->bi.start = ts->bi.data;
0008e0  4844              LDR      r0,|L1.2548|
0008e2  6800              LDR      r0,[r0,#0]  ; ts
0008e4  f500708e          ADD      r0,r0,#0x11c
0008e8  4942              LDR      r1,|L1.2548|
0008ea  6809              LDR      r1,[r1,#0]  ; ts
0008ec  f8c1031c          STR      r0,[r1,#0x31c]
;;;550    			ts->bi.end = ts->bi.data + n;        
0008f0  4840              LDR      r0,|L1.2548|
0008f2  6800              LDR      r0,[r0,#0]  ; ts
0008f4  f500708e          ADD      r0,r0,#0x11c
0008f8  1901              ADDS     r1,r0,r4
0008fa  483e              LDR      r0,|L1.2548|
0008fc  6800              LDR      r0,[r0,#0]  ; ts
0008fe  f8c01320          STR      r1,[r0,#0x320]
;;;551    
;;;552    			// Process input for telnet options.
;;;553    			telnet_process(ts);
000902  483c              LDR      r0,|L1.2548|
000904  6800              LDR      r0,[r0,#0]  ; ts
000906  f7fffffe          BL       telnet_process
                  |L1.2314|
;;;554    		}
;;;555    
;;;556    		telnet_flush();
00090a  f7fffffe          BL       telnet_flush
                  |L1.2318|
00090e  4839              LDR      r0,|L1.2548|
000910  6800              LDR      r0,[r0,#0]            ;523  ; ts
000912  f8d0131c          LDR      r1,[r0,#0x31c]        ;523
000916  4837              LDR      r0,|L1.2548|
000918  6800              LDR      r0,[r0,#0]            ;523  ; ts
00091a  f8d00320          LDR      r0,[r0,#0x320]        ;523
00091e  4281              CMP      r1,r0                 ;523
000920  d08c              BEQ      |L1.2108|
                  |L1.2338|
000922  bf00              NOP                            ;534
;;;557    	}
;;;558    
;;;559    	// If no data then either error or end of stream.
;;;560    	if (ts->bi.start == ts->bi.end) return -1;
000924  4833              LDR      r0,|L1.2548|
000926  6800              LDR      r0,[r0,#0]  ; ts
000928  f8d0131c          LDR      r1,[r0,#0x31c]
00092c  4831              LDR      r0,|L1.2548|
00092e  6800              LDR      r0,[r0,#0]  ; ts
000930  f8d00320          LDR      r0,[r0,#0x320]
000934  4281              CMP      r1,r0
000936  d103              BNE      |L1.2368|
000938  f04f30ff          MOV      r0,#0xffffffff
                  |L1.2364|
;;;561    
;;;562    	// Get the next character in the buffer.
;;;563    	ch = (unsigned char) *(ts->bi.start++);
;;;564    
;;;565    	return ch;
;;;566    }
00093c  b004              ADD      sp,sp,#0x10
00093e  bd70              POP      {r4-r6,pc}
                  |L1.2368|
000940  482c              LDR      r0,|L1.2548|
000942  6800              LDR      r0,[r0,#0]            ;563  ; ts
000944  f8d0231c          LDR      r2,[r0,#0x31c]        ;563
000948  482a              LDR      r0,|L1.2548|
00094a  6800              LDR      r0,[r0,#0]            ;563  ; ts
00094c  f8d0031c          LDR      r0,[r0,#0x31c]        ;563
000950  1c40              ADDS     r0,r0,#1              ;563
000952  4928              LDR      r1,|L1.2548|
000954  6809              LDR      r1,[r1,#0]            ;563  ; ts
000956  f8c1031c          STR      r0,[r1,#0x31c]        ;563
00095a  7816              LDRB     r6,[r2,#0]            ;563
00095c  4630              MOV      r0,r6                 ;565
00095e  e7ed              B        |L1.2364|
;;;567    
                          ENDP

                  telnet_gets PROC
;;;568    bool telnet_gets(char *buff, int len, int tocase, bool echo)
000960  e92d47f0          PUSH     {r4-r10,lr}
;;;569    {
000964  4607              MOV      r7,r0
000966  4689              MOV      r9,r1
000968  4690              MOV      r8,r2
00096a  461e              MOV      r6,r3
;;;570    	int c;
;;;571    	int i;
;;;572    
;;;573    	i = 0;
00096c  2500              MOVS     r5,#0
;;;574    	for (;;)
00096e  bf00              NOP      
                  |L1.2416|
;;;575    	{
;;;576    		// Get a char from the incoming stream.
;;;577    		c = telnet_getc();
000970  f7fffffe          BL       telnet_getc
000974  4604              MOV      r4,r0
;;;578    
;;;579    		// End of stream?
;;;580    		if (c < 0) return false;
000976  2c00              CMP      r4,#0
000978  da02              BGE      |L1.2432|
00097a  2000              MOVS     r0,#0
                  |L1.2428|
;;;581    
;;;582    		// Convert to upper/lower case?
;;;583    		if (tocase > 0) c = toupper(c);
;;;584    		if (tocase < 0) c = tolower(c);
;;;585    
;;;586    		// End of line?
;;;587    		if (c == '\r') break;
;;;588    
;;;589    		// Back space?
;;;590    		if (c == '\b' && i)
;;;591    		{
;;;592    			i--;
;;;593    			if (echo) { telnet_putc(c); telnet_putc(' '); telnet_putc(c); }
;;;594    		}
;;;595    
;;;596    		// Visible chars.
;;;597    		if ((c >= ' ') && (i < (len - 1)))
;;;598    		{
;;;599    			buff[i++] = c;
;;;600    			if (echo) telnet_putc(c);
;;;601    		}
;;;602    
;;;603    		telnet_flush();
;;;604    	}
;;;605    
;;;606    	// Null terminate.
;;;607    	buff[i] = 0;
;;;608    	if (echo)
;;;609    	{
;;;610    		telnet_puts("\r\n");
;;;611    		telnet_flush();
;;;612    	}
;;;613    
;;;614    	return true;
;;;615    }
00097c  e8bd87f0          POP      {r4-r10,pc}
                  |L1.2432|
000980  f1b80f00          CMP      r8,#0                 ;583
000984  dd03              BLE      |L1.2446|
000986  4620              MOV      r0,r4                 ;583
000988  f7fffffe          BL       toupper
00098c  4604              MOV      r4,r0                 ;583
                  |L1.2446|
00098e  f1b80f00          CMP      r8,#0                 ;584
000992  da03              BGE      |L1.2460|
000994  4620              MOV      r0,r4                 ;584
000996  f7fffffe          BL       tolower
00099a  4604              MOV      r4,r0                 ;584
                  |L1.2460|
00099c  2c0d              CMP      r4,#0xd               ;587
00099e  d100              BNE      |L1.2466|
0009a0  e01d              B        |L1.2526|
                  |L1.2466|
0009a2  2c08              CMP      r4,#8                 ;590
0009a4  d10b              BNE      |L1.2494|
0009a6  b155              CBZ      r5,|L1.2494|
0009a8  1e6d              SUBS     r5,r5,#1              ;592
0009aa  b146              CBZ      r6,|L1.2494|
0009ac  b2e0              UXTB     r0,r4                 ;593
0009ae  f7fffffe          BL       telnet_putc
0009b2  2020              MOVS     r0,#0x20              ;593
0009b4  f7fffffe          BL       telnet_putc
0009b8  b2e0              UXTB     r0,r4                 ;593
0009ba  f7fffffe          BL       telnet_putc
                  |L1.2494|
0009be  2c20              CMP      r4,#0x20              ;597
0009c0  db0a              BLT      |L1.2520|
0009c2  f1a90001          SUB      r0,r9,#1              ;597
0009c6  42a8              CMP      r0,r5                 ;597
0009c8  dd06              BLE      |L1.2520|
0009ca  4628              MOV      r0,r5                 ;599
0009cc  1c6d              ADDS     r5,r5,#1              ;599
0009ce  543c              STRB     r4,[r7,r0]            ;599
0009d0  b116              CBZ      r6,|L1.2520|
0009d2  b2e0              UXTB     r0,r4                 ;600
0009d4  f7fffffe          BL       telnet_putc
                  |L1.2520|
0009d8  f7fffffe          BL       telnet_flush
0009dc  e7c8              B        |L1.2416|
                  |L1.2526|
0009de  bf00              NOP                            ;587
0009e0  2000              MOVS     r0,#0                 ;607
0009e2  5578              STRB     r0,[r7,r5]            ;607
0009e4  b126              CBZ      r6,|L1.2544|
0009e6  a004              ADR      r0,|L1.2552|
0009e8  f7fffffe          BL       telnet_puts
0009ec  f7fffffe          BL       telnet_flush
                  |L1.2544|
0009f0  2001              MOVS     r0,#1                 ;614
0009f2  e7c3              B        |L1.2428|
;;;616    
                          ENDP

                  |L1.2548|
                          DCD      ||ts||
                  |L1.2552|
0009f8  0d0a00            DCB      "\r\n",0
0009fb  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tstate
                          %        1324

                          AREA ||.data||, DATA, ALIGN=2

                  ||ts||
                          DCD      tstate

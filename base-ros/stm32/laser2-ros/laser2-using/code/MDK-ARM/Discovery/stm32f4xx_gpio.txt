; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\stm32f4xx_gpio.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\stm32f4xx_gpio.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\stm32f4xx_gpio.crf ..\..\libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;125      */
;;;126    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;127    {
000002  4604              MOV      r4,r0
;;;128      /* Check the parameters */
;;;129      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;130    
;;;131      if (GPIOx == GPIOA)
000004  488c              LDR      r0,|L1.568|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L1.28|
;;;132      {
;;;133        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;134        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00001a  e05e              B        |L1.218|
                  |L1.28|
;;;135      }
;;;136      else if (GPIOx == GPIOB)
00001c  4887              LDR      r0,|L1.572|
00001e  4284              CMP      r4,r0
000020  d108              BNE      |L1.52|
;;;137      {
;;;138        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
000022  2101              MOVS     r1,#1
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;139        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
00002a  2100              MOVS     r1,#0
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000032  e052              B        |L1.218|
                  |L1.52|
;;;140      }
;;;141      else if (GPIOx == GPIOC)
000034  4882              LDR      r0,|L1.576|
000036  4284              CMP      r4,r0
000038  d108              BNE      |L1.76|
;;;142      {
;;;143        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  2004              MOVS     r0,#4
00003e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;144        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
000042  2100              MOVS     r1,#0
000044  2004              MOVS     r0,#4
000046  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00004a  e046              B        |L1.218|
                  |L1.76|
;;;145      }
;;;146      else if (GPIOx == GPIOD)
00004c  487d              LDR      r0,|L1.580|
00004e  4284              CMP      r4,r0
000050  d108              BNE      |L1.100|
;;;147      {
;;;148        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
000052  2101              MOVS     r1,#1
000054  2008              MOVS     r0,#8
000056  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;149        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
00005a  2100              MOVS     r1,#0
00005c  2008              MOVS     r0,#8
00005e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000062  e03a              B        |L1.218|
                  |L1.100|
;;;150      }
;;;151      else if (GPIOx == GPIOE)
000064  4878              LDR      r0,|L1.584|
000066  4284              CMP      r4,r0
000068  d108              BNE      |L1.124|
;;;152      {
;;;153        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
00006a  2101              MOVS     r1,#1
00006c  2010              MOVS     r0,#0x10
00006e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;154        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
000072  2100              MOVS     r1,#0
000074  2010              MOVS     r0,#0x10
000076  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00007a  e02e              B        |L1.218|
                  |L1.124|
;;;155      }
;;;156      else if (GPIOx == GPIOF)
00007c  4873              LDR      r0,|L1.588|
00007e  4284              CMP      r4,r0
000080  d108              BNE      |L1.148|
;;;157      {
;;;158        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
000082  2101              MOVS     r1,#1
000084  2020              MOVS     r0,#0x20
000086  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;159        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
00008a  2100              MOVS     r1,#0
00008c  2020              MOVS     r0,#0x20
00008e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000092  e022              B        |L1.218|
                  |L1.148|
;;;160      }
;;;161      else if (GPIOx == GPIOG)
000094  486e              LDR      r0,|L1.592|
000096  4284              CMP      r4,r0
000098  d108              BNE      |L1.172|
;;;162      {
;;;163        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
00009a  2101              MOVS     r1,#1
00009c  2040              MOVS     r0,#0x40
00009e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;164        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
0000a2  2100              MOVS     r1,#0
0000a4  2040              MOVS     r0,#0x40
0000a6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000aa  e016              B        |L1.218|
                  |L1.172|
;;;165      }
;;;166      else if (GPIOx == GPIOH)
0000ac  4869              LDR      r0,|L1.596|
0000ae  4284              CMP      r4,r0
0000b0  d108              BNE      |L1.196|
;;;167      {
;;;168        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
0000b2  2101              MOVS     r1,#1
0000b4  2080              MOVS     r0,#0x80
0000b6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;169        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
0000ba  2100              MOVS     r1,#0
0000bc  2080              MOVS     r0,#0x80
0000be  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000c2  e00a              B        |L1.218|
                  |L1.196|
;;;170      }
;;;171      else
;;;172      {
;;;173        if (GPIOx == GPIOI)
0000c4  4864              LDR      r0,|L1.600|
0000c6  4284              CMP      r4,r0
0000c8  d107              BNE      |L1.218|
;;;174        {
;;;175          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
0000ca  2101              MOVS     r1,#1
0000cc  1580              ASRS     r0,r0,#22
0000ce  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;176          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
0000d2  2100              MOVS     r1,#0
0000d4  15a0              ASRS     r0,r4,#22
0000d6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
                  |L1.218|
;;;177        }
;;;178      }
;;;179    }
0000da  bd10              POP      {r4,pc}
;;;180    
                          ENDP

                  GPIO_Init PROC
;;;187      */
;;;188    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
0000dc  b5f0              PUSH     {r4-r7,lr}
;;;189    {
0000de  460a              MOV      r2,r1
;;;190      uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
0000e0  2100              MOVS     r1,#0
0000e2  2300              MOVS     r3,#0
0000e4  2400              MOVS     r4,#0
;;;191    
;;;192      /* Check the parameters */
;;;193      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;194      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;195      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;196      assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
;;;197    
;;;198      /* -------------------------Configure the port pins---------------- */
;;;199      /*-- GPIO Mode Configuration --*/
;;;200      for (pinpos = 0x00; pinpos < 0x10; pinpos++)
0000e6  bf00              NOP      
0000e8  e03d              B        |L1.358|
                  |L1.234|
;;;201      {
;;;202        pos = ((uint32_t)0x01) << pinpos;
0000ea  2501              MOVS     r5,#1
0000ec  fa05f301          LSL      r3,r5,r1
;;;203        /* Get the port pins position */
;;;204        currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
0000f0  6815              LDR      r5,[r2,#0]
0000f2  ea050403          AND      r4,r5,r3
;;;205    
;;;206        if (currentpin == pos)
0000f6  429c              CMP      r4,r3
0000f8  d134              BNE      |L1.356|
;;;207        {
;;;208          GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
0000fa  6805              LDR      r5,[r0,#0]
0000fc  004f              LSLS     r7,r1,#1
0000fe  2603              MOVS     r6,#3
000100  40be              LSLS     r6,r6,r7
000102  43b5              BICS     r5,r5,r6
000104  6005              STR      r5,[r0,#0]
;;;209          GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
000106  7915              LDRB     r5,[r2,#4]
000108  004e              LSLS     r6,r1,#1
00010a  40b5              LSLS     r5,r5,r6
00010c  6806              LDR      r6,[r0,#0]
00010e  4335              ORRS     r5,r5,r6
000110  6005              STR      r5,[r0,#0]
;;;210    
;;;211          if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
000112  7915              LDRB     r5,[r2,#4]
000114  2d01              CMP      r5,#1
000116  d002              BEQ      |L1.286|
000118  7915              LDRB     r5,[r2,#4]
00011a  2d02              CMP      r5,#2
00011c  d116              BNE      |L1.332|
                  |L1.286|
;;;212          {
;;;213            /* Check Speed mode parameters */
;;;214            assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;215    
;;;216            /* Speed mode configuration */
;;;217            GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
00011e  6885              LDR      r5,[r0,#8]
000120  004f              LSLS     r7,r1,#1
000122  2603              MOVS     r6,#3
000124  40be              LSLS     r6,r6,r7
000126  43b5              BICS     r5,r5,r6
000128  6085              STR      r5,[r0,#8]
;;;218            GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
00012a  7955              LDRB     r5,[r2,#5]
00012c  004e              LSLS     r6,r1,#1
00012e  40b5              LSLS     r5,r5,r6
000130  6886              LDR      r6,[r0,#8]
000132  4335              ORRS     r5,r5,r6
000134  6085              STR      r5,[r0,#8]
;;;219    
;;;220            /* Check Output mode parameters */
;;;221            assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
;;;222    
;;;223            /* Output mode configuration*/
;;;224            GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
000136  6845              LDR      r5,[r0,#4]
000138  2601              MOVS     r6,#1
00013a  408e              LSLS     r6,r6,r1
00013c  43b5              BICS     r5,r5,r6
00013e  6045              STR      r5,[r0,#4]
;;;225            GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
000140  6845              LDR      r5,[r0,#4]
000142  7996              LDRB     r6,[r2,#6]
000144  408e              LSLS     r6,r6,r1
000146  b2b6              UXTH     r6,r6
000148  4335              ORRS     r5,r5,r6
00014a  6045              STR      r5,[r0,#4]
                  |L1.332|
;;;226          }
;;;227    
;;;228          /* Pull-up Pull down resistor configuration*/
;;;229          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
00014c  68c5              LDR      r5,[r0,#0xc]
00014e  004f              LSLS     r7,r1,#1
000150  2603              MOVS     r6,#3
000152  40be              LSLS     r6,r6,r7
000154  43b5              BICS     r5,r5,r6
000156  60c5              STR      r5,[r0,#0xc]
;;;230          GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
000158  79d5              LDRB     r5,[r2,#7]
00015a  004e              LSLS     r6,r1,#1
00015c  40b5              LSLS     r5,r5,r6
00015e  68c6              LDR      r6,[r0,#0xc]
000160  4335              ORRS     r5,r5,r6
000162  60c5              STR      r5,[r0,#0xc]
                  |L1.356|
000164  1c49              ADDS     r1,r1,#1              ;200
                  |L1.358|
000166  2910              CMP      r1,#0x10              ;200
000168  d3bf              BCC      |L1.234|
;;;231        }
;;;232      }
;;;233    }
00016a  bdf0              POP      {r4-r7,pc}
;;;234    
                          ENDP

                  GPIO_StructInit PROC
;;;239      */
;;;240    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
00016c  f64f71ff          MOV      r1,#0xffff
;;;241    {
;;;242      /* Reset GPIO init structure parameters values */
;;;243      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000170  6001              STR      r1,[r0,#0]
;;;244      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
000172  2100              MOVS     r1,#0
000174  7101              STRB     r1,[r0,#4]
;;;245      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
000176  7141              STRB     r1,[r0,#5]
;;;246      GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
000178  7181              STRB     r1,[r0,#6]
;;;247      GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
00017a  71c1              STRB     r1,[r0,#7]
;;;248    }
00017c  4770              BX       lr
;;;249    
                          ENDP

                  GPIO_PinLockConfig PROC
;;;260      */
;;;261    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
00017e  b508              PUSH     {r3,lr}
;;;262    {
;;;263      __IO uint32_t tmp = 0x00010000;
000180  f44f3280          MOV      r2,#0x10000
000184  9200              STR      r2,[sp,#0]
;;;264    
;;;265      /* Check the parameters */
;;;266      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;267      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;268    
;;;269      tmp |= GPIO_Pin;
000186  9a00              LDR      r2,[sp,#0]
000188  430a              ORRS     r2,r2,r1
00018a  9200              STR      r2,[sp,#0]
;;;270      /* Set LCKK bit */
;;;271      GPIOx->LCKR = tmp;
00018c  9a00              LDR      r2,[sp,#0]
00018e  61c2              STR      r2,[r0,#0x1c]
;;;272      /* Reset LCKK bit */
;;;273      GPIOx->LCKR =  GPIO_Pin;
000190  61c1              STR      r1,[r0,#0x1c]
;;;274      /* Set LCKK bit */
;;;275      GPIOx->LCKR = tmp;
000192  9a00              LDR      r2,[sp,#0]
000194  61c2              STR      r2,[r0,#0x1c]
;;;276      /* Read LCKK bit*/
;;;277      tmp = GPIOx->LCKR;
000196  69c2              LDR      r2,[r0,#0x1c]
000198  9200              STR      r2,[sp,#0]
;;;278      /* Read LCKK bit*/
;;;279      tmp = GPIOx->LCKR;
00019a  69c2              LDR      r2,[r0,#0x1c]
00019c  9200              STR      r2,[sp,#0]
;;;280    }
00019e  bd08              POP      {r3,pc}
;;;281    
                          ENDP

                  GPIO_ReadInputDataBit PROC
;;;304      */
;;;305    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001a0  4602              MOV      r2,r0
;;;306    {
;;;307      uint8_t bitstatus = 0x00;
0001a2  2000              MOVS     r0,#0
;;;308    
;;;309      /* Check the parameters */
;;;310      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;311      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;312    
;;;313      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
0001a4  6913              LDR      r3,[r2,#0x10]
0001a6  400b              ANDS     r3,r3,r1
0001a8  b10b              CBZ      r3,|L1.430|
;;;314      {
;;;315        bitstatus = (uint8_t)Bit_SET;
0001aa  2001              MOVS     r0,#1
0001ac  e000              B        |L1.432|
                  |L1.430|
;;;316      }
;;;317      else
;;;318      {
;;;319        bitstatus = (uint8_t)Bit_RESET;
0001ae  2000              MOVS     r0,#0
                  |L1.432|
;;;320      }
;;;321      return bitstatus;
;;;322    }
0001b0  4770              BX       lr
;;;323    
                          ENDP

                  GPIO_ReadInputData PROC
;;;328      */
;;;329    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
0001b2  4601              MOV      r1,r0
;;;330    {
;;;331      /* Check the parameters */
;;;332      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;333    
;;;334      return ((uint16_t)GPIOx->IDR);
0001b4  6908              LDR      r0,[r1,#0x10]
0001b6  b280              UXTH     r0,r0
;;;335    }
0001b8  4770              BX       lr
;;;336    
                          ENDP

                  GPIO_ReadOutputDataBit PROC
;;;343      */
;;;344    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001ba  4602              MOV      r2,r0
;;;345    {
;;;346      uint8_t bitstatus = 0x00;
0001bc  2000              MOVS     r0,#0
;;;347    
;;;348      /* Check the parameters */
;;;349      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;350      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;351    
;;;352      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
0001be  6953              LDR      r3,[r2,#0x14]
0001c0  400b              ANDS     r3,r3,r1
0001c2  b10b              CBZ      r3,|L1.456|
;;;353      {
;;;354        bitstatus = (uint8_t)Bit_SET;
0001c4  2001              MOVS     r0,#1
0001c6  e000              B        |L1.458|
                  |L1.456|
;;;355      }
;;;356      else
;;;357      {
;;;358        bitstatus = (uint8_t)Bit_RESET;
0001c8  2000              MOVS     r0,#0
                  |L1.458|
;;;359      }
;;;360      return bitstatus;
;;;361    }
0001ca  4770              BX       lr
;;;362    
                          ENDP

                  GPIO_ReadOutputData PROC
;;;367      */
;;;368    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
0001cc  4601              MOV      r1,r0
;;;369    {
;;;370      /* Check the parameters */
;;;371      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;372    
;;;373      return ((uint16_t)GPIOx->ODR);
0001ce  6948              LDR      r0,[r1,#0x14]
0001d0  b280              UXTH     r0,r0
;;;374    }
0001d2  4770              BX       lr
;;;375    
                          ENDP

                  GPIO_SetBits PROC
;;;385      */
;;;386    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001d4  8301              STRH     r1,[r0,#0x18]
;;;387    {
;;;388      /* Check the parameters */
;;;389      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;390      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;391    
;;;392      GPIOx->BSRRL = GPIO_Pin;
;;;393    }
0001d6  4770              BX       lr
;;;394    
                          ENDP

                  GPIO_ResetBits PROC
;;;404      */
;;;405    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001d8  8341              STRH     r1,[r0,#0x1a]
;;;406    {
;;;407      /* Check the parameters */
;;;408      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;409      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;410    
;;;411      GPIOx->BSRRH = GPIO_Pin;
;;;412    }
0001da  4770              BX       lr
;;;413    
                          ENDP

                  GPIO_WriteBit PROC
;;;424      */
;;;425    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
0001dc  b10a              CBZ      r2,|L1.482|
;;;426    {
;;;427      /* Check the parameters */
;;;428      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;429      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;430      assert_param(IS_GPIO_BIT_ACTION(BitVal));
;;;431    
;;;432      if (BitVal != Bit_RESET)
;;;433      {
;;;434        GPIOx->BSRRL = GPIO_Pin;
0001de  8301              STRH     r1,[r0,#0x18]
0001e0  e000              B        |L1.484|
                  |L1.482|
;;;435      }
;;;436      else
;;;437      {
;;;438        GPIOx->BSRRH = GPIO_Pin ;
0001e2  8341              STRH     r1,[r0,#0x1a]
                  |L1.484|
;;;439      }
;;;440    }
0001e4  4770              BX       lr
;;;441    
                          ENDP

                  GPIO_Write PROC
;;;447      */
;;;448    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
0001e6  6141              STR      r1,[r0,#0x14]
;;;449    {
;;;450      /* Check the parameters */
;;;451      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;452    
;;;453      GPIOx->ODR = PortVal;
;;;454    }
0001e8  4770              BX       lr
;;;455    
                          ENDP

                  GPIO_ToggleBits PROC
;;;461      */
;;;462    void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001ea  6942              LDR      r2,[r0,#0x14]
;;;463    {
;;;464      /* Check the parameters */
;;;465      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;466    
;;;467      GPIOx->ODR ^= GPIO_Pin;
0001ec  404a              EORS     r2,r2,r1
0001ee  6142              STR      r2,[r0,#0x14]
;;;468    }
0001f0  4770              BX       lr
;;;469    
                          ENDP

                  GPIO_PinAFConfig PROC
;;;534      */
;;;535    void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
0001f2  b5f0              PUSH     {r4-r7,lr}
;;;536    {
;;;537      uint32_t temp = 0x00;
0001f4  2300              MOVS     r3,#0
;;;538      uint32_t temp_2 = 0x00;
0001f6  2400              MOVS     r4,#0
;;;539      
;;;540      /* Check the parameters */
;;;541      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;542      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;543      assert_param(IS_GPIO_AF(GPIO_AF));
;;;544      
;;;545      temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
0001f8  074d              LSLS     r5,r1,#29
0001fa  0eed              LSRS     r5,r5,#27
0001fc  fa02f305          LSL      r3,r2,r5
;;;546      GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000200  10ce              ASRS     r6,r1,#3
000202  f1000520          ADD      r5,r0,#0x20
000206  f8555026          LDR      r5,[r5,r6,LSL #2]
00020a  074e              LSLS     r6,r1,#29
00020c  0ef7              LSRS     r7,r6,#27
00020e  260f              MOVS     r6,#0xf
000210  40be              LSLS     r6,r6,r7
000212  43b5              BICS     r5,r5,r6
000214  10cf              ASRS     r7,r1,#3
000216  f1000620          ADD      r6,r0,#0x20
00021a  f8465027          STR      r5,[r6,r7,LSL #2]
;;;547      temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
00021e  10ce              ASRS     r6,r1,#3
000220  f1000520          ADD      r5,r0,#0x20
000224  f8555026          LDR      r5,[r5,r6,LSL #2]
000228  ea450403          ORR      r4,r5,r3
;;;548      GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
00022c  10ce              ASRS     r6,r1,#3
00022e  f1000520          ADD      r5,r0,#0x20
000232  f8454026          STR      r4,[r5,r6,LSL #2]
;;;549    }
000236  bdf0              POP      {r4-r7,pc}
;;;550    
                          ENDP

                  |L1.568|
                          DCD      0x40020000
                  |L1.572|
                          DCD      0x40020400
                  |L1.576|
                          DCD      0x40020800
                  |L1.580|
                          DCD      0x40020c00
                  |L1.584|
                          DCD      0x40021000
                  |L1.588|
                          DCD      0x40021400
                  |L1.592|
                          DCD      0x40021800
                  |L1.596|
                          DCD      0x40021c00
                  |L1.600|
                          DCD      0x40022000

;*** Start embedded assembler ***

#line 1 "..\\..\\libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_gpio.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16|
#line 114 "..\\..\\libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH|
#line 128
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

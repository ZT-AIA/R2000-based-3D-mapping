; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\rtx_conf_cm.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\rtx_conf_cm.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\rtx_conf_cm.crf ..\src\RTX_Conf_CM.c]
                          THUMB

                          AREA ||.ARM.Collect$$$$000000FF||, CODE, READONLY, ALIGN=2

                  _main_init PROC
;;;247    void _main_init (void) __attribute__((section(".ARM.Collect$$$$000000FF")));
;;;248    void _main_init (void) {
000000  f7fffffe          BL       osKernelInitialize
;;;249      osKernelInitialize();
;;;250      osThreadCreate(&os_thread_def_main, NULL);
000004  2100              MOVS     r1,#0
000006  4803              LDR      r0,|L1.20|
000008  f7fffffe          BL       osThreadCreate
;;;251      osKernelStart();
00000c  f7fffffe          BL       osKernelStart
                  |L1.16|
;;;252      for (;;);
000010  e7fe              B        |L1.16|
;;;253    }
;;;254    #else
                          ENDP

000012  0000              DCW      0x0000
                  |L1.20|
                          DCD      ||.data||+0x10

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  os_idle_demon PROC
;;;213    
;;;214    void os_idle_demon (void) {
000000  bf00              NOP      
                  |L2.2|
;;;215      /* The idle demon is a system thread, running when no other thread is      */
;;;216      /* ready to run.                                                           */
;;;217    
;;;218      for (;;) {
000002  e7fe              B        |L2.2|
;;;219        /* HERE: include optional user code to be executed when no thread runs.*/
;;;220      }
;;;221    }
;;;222    
                          ENDP

                  os_error PROC
;;;265    
;;;266    void os_error (uint32_t error_code) {
000004  2801              CMP      r0,#1
;;;267      /* This function is called when a runtime error is detected.  */
;;;268      /* Parameter 'error_code' holds the runtime error code.       */
;;;269    
;;;270      /* HERE: include optional code to be executed on runtime error. */
;;;271      switch (error_code) {
000006  d004              BEQ      |L2.18|
000008  2802              CMP      r0,#2
00000a  d003              BEQ      |L2.20|
00000c  2803              CMP      r0,#3
00000e  d103              BNE      |L2.24|
000010  e001              B        |L2.22|
                  |L2.18|
;;;272        case OS_ERROR_STACK_OVF:
;;;273          /* Stack overflow detected for the currently running task. */
;;;274          /* Thread can be identified by calling svcThreadGetId().   */
;;;275          break;
000012  e001              B        |L2.24|
                  |L2.20|
;;;276        case OS_ERROR_FIFO_OVF:
;;;277          /* ISR FIFO Queue buffer overflow detected. */
;;;278          break;
000014  e000              B        |L2.24|
                  |L2.22|
;;;279        case OS_ERROR_MBX_OVF:
;;;280          /* Mailbox overflow detected. */
;;;281          break;
000016  bf00              NOP      
                  |L2.24|
000018  bf00              NOP                            ;275
;;;282      }
;;;283      for (;;);
00001a  bf00              NOP      
                  |L2.28|
00001c  e7fe              B        |L2.28|
;;;284    }
;;;285    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  mp_tcb
                          %        848
                  mp_stk
                          %        3856
                  os_stack_mem
                          %        17440
                  os_fifo
                          %        132
                  os_active_TCB
                          %        64
                  os_messageQ_q_osTimerMessageQ
                          %        48

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  os_maxtaskrun
000000  0010              DCW      0x0010
000002  0000              DCB      0x00,0x00
                  os_stackinfo
                          DCD      0x01020100
                  os_rrobin
                          DCD      0x00010005
                  os_tickfreq
                          DCD      0x0a037a00
                  os_tickus_i
000010  00a8              DCW      0x00a8
                  os_tickus_f
000012  0000              DCW      0x0000
                  os_trv
                          DCD      0x0002903f
                  os_flags
000018  01000000          DCB      0x01,0x00,0x00,0x00
                  CMSIS_RTOS_API_Version
                  ||__tagsym$$used||
                          DCD      0x00010002
                  CMSIS_RTOS_RTX_Version
                  |symbol_number.12|
                          DCD      0x0004004a
                  os_clockrate
                  |symbol_number.13|
                          DCD      0x000003e8
                  os_timernum
                  |symbol_number.14|
                          DCD      0x00000000
                  mp_tcb_size
00002c  034c              DCW      0x034c
00002e  0000              DCB      0x00,0x00
                  mp_stk_size
                          DCD      0x00000f10
                  os_stack_sz
                          DCD      0x00004420
                  os_fifo_size
000038  10000000          DCB      0x10,0x00,0x00,0x00
                  os_thread_def_osTimerThread
                          DCD      osTimerThread
000040  0002              DCW      0x0002
000042  0000              DCB      0x00,0x00
                          DCD      0x00000001
                          DCD      0x00000200
                  os_messageQ_def_osTimerMessageQ
                          DCD      0x00000008
                          DCD      os_messageQ_q_osTimerMessageQ
                  mp_tmr_size
000054  0000              DCW      0x0000

                          AREA ||.data||, DATA, ALIGN=2

                  osThreadId_osTimerThread
                          DCD      0x00000000
                  osMessageQId_osTimerMessageQ
                          DCD      0x00000000
                  os_tmr
                          DCD      0x00000000
                  m_tmr
                          DCD      0x00000000
                  os_thread_def_main
                          DCD      main
000014  0000              DCW      0x0000
000016  0000              DCB      0x00,0x00
                          DCD      0x00000001
                          DCD      0x00000200

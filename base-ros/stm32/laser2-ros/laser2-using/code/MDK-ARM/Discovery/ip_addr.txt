; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\ip_addr.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\ip_addr.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\ip_addr.crf ..\..\libraries\lwip-1.4.1\src\core\ipv4\ip_addr.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ip4_addr_isbroadcast PROC
;;;54     u8_t
;;;55     ip4_addr_isbroadcast(u32_t addr, const struct netif *netif)
000000  b518              PUSH     {r3,r4,lr}
;;;56     {
000002  4602              MOV      r2,r0
;;;57       ip_addr_t ipaddr;
;;;58       ip4_addr_set_u32(&ipaddr, addr);
000004  9200              STR      r2,[sp,#0]
;;;59     
;;;60       /* all ones (broadcast) or all zeroes (old skool broadcast) */
;;;61       if ((~addr == IPADDR_ANY) ||
000006  43d0              MVNS     r0,r2
000008  b100              CBZ      r0,|L1.12|
;;;62           (addr == IPADDR_ANY)) {
00000a  b90a              CBNZ     r2,|L1.16|
                  |L1.12|
;;;63         return 1;
00000c  2001              MOVS     r0,#1
                  |L1.14|
;;;64       /* no broadcast support on this network interface? */
;;;65       } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
;;;66         /* the given address cannot be a broadcast address
;;;67          * nor can we check against any broadcast addresses */
;;;68         return 0;
;;;69       /* address matches network interface address exactly? => no broadcast */
;;;70       } else if (addr == ip4_addr_get_u32(&netif->ip_addr)) {
;;;71         return 0;
;;;72       /*  on the same (sub) network... */
;;;73       } else if (ip_addr_netcmp(&ipaddr, &(netif->ip_addr), &(netif->netmask))
;;;74              /* ...and host identifier bits are all ones? =>... */
;;;75               && ((addr & ~ip4_addr_get_u32(&netif->netmask)) ==
;;;76                (IPADDR_BROADCAST & ~ip4_addr_get_u32(&netif->netmask)))) {
;;;77         /* => network broadcast address */
;;;78         return 1;
;;;79       } else {
;;;80         return 0;
;;;81       }
;;;82     }
00000e  bd18              POP      {r3,r4,pc}
                  |L1.16|
000010  f891002d          LDRB     r0,[r1,#0x2d]         ;65
000014  f0000002          AND      r0,r0,#2              ;65
000018  b908              CBNZ     r0,|L1.30|
00001a  2000              MOVS     r0,#0                 ;68
00001c  e7f7              B        |L1.14|
                  |L1.30|
00001e  6848              LDR      r0,[r1,#4]            ;70
000020  4290              CMP      r0,r2                 ;70
000022  d101              BNE      |L1.40|
000024  2000              MOVS     r0,#0                 ;71
000026  e7f2              B        |L1.14|
                  |L1.40|
000028  9800              LDR      r0,[sp,#0]            ;73
00002a  688b              LDR      r3,[r1,#8]            ;73
00002c  4018              ANDS     r0,r0,r3              ;73
00002e  e9d13401          LDRD     r3,r4,[r1,#4]         ;73
000032  4023              ANDS     r3,r3,r4              ;73
000034  4298              CMP      r0,r3                 ;73
000036  d108              BNE      |L1.74|
000038  6888              LDR      r0,[r1,#8]            ;75
00003a  ea220000          BIC      r0,r2,r0              ;75
00003e  688c              LDR      r4,[r1,#8]            ;75
000040  43e3              MVNS     r3,r4                 ;75
000042  4298              CMP      r0,r3                 ;75
000044  d101              BNE      |L1.74|
000046  2001              MOVS     r0,#1                 ;78
000048  e7e1              B        |L1.14|
                  |L1.74|
00004a  2000              MOVS     r0,#0                 ;80
00004c  e7df              B        |L1.14|
;;;83     
                          ENDP

                  ip4_addr_netmask_valid PROC
;;;89     u8_t
;;;90     ip4_addr_netmask_valid(u32_t netmask)
00004e  b570              PUSH     {r4-r6,lr}
;;;91     {
000050  4606              MOV      r6,r0
;;;92       u32_t mask;
;;;93       u32_t nm_hostorder = lwip_htonl(netmask);
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       lwip_htonl
000058  4605              MOV      r5,r0
;;;94     
;;;95       /* first, check for the first zero */
;;;96       for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
00005a  f04f4400          MOV      r4,#0x80000000
00005e  e004              B        |L1.106|
                  |L1.96|
;;;97         if ((nm_hostorder & mask) == 0) {
000060  ea050004          AND      r0,r5,r4
000064  b900              CBNZ     r0,|L1.104|
;;;98           break;
000066  e002              B        |L1.110|
                  |L1.104|
000068  0864              LSRS     r4,r4,#1              ;96
                  |L1.106|
00006a  2c00              CMP      r4,#0                 ;96
00006c  d1f8              BNE      |L1.96|
                  |L1.110|
00006e  bf00              NOP      
;;;99         }
;;;100      }
;;;101      /* then check that there is no one */
;;;102      for (; mask != 0; mask >>= 1) {
000070  e005              B        |L1.126|
                  |L1.114|
;;;103        if ((nm_hostorder & mask) != 0) {
000072  ea050004          AND      r0,r5,r4
000076  b108              CBZ      r0,|L1.124|
;;;104          /* there is a one after the first zero -> invalid */
;;;105          return 0;
000078  2000              MOVS     r0,#0
                  |L1.122|
;;;106        }
;;;107      }
;;;108      /* no one after the first zero -> valid */
;;;109      return 1;
;;;110    }
00007a  bd70              POP      {r4-r6,pc}
                  |L1.124|
00007c  0864              LSRS     r4,r4,#1              ;102
                  |L1.126|
00007e  2c00              CMP      r4,#0                 ;102
000080  d1f7              BNE      |L1.114|
000082  2001              MOVS     r0,#1                 ;109
000084  e7f9              B        |L1.122|
;;;111    
                          ENDP

                  ipaddr_aton PROC
;;;151    int
;;;152    ipaddr_aton(const char *cp, ip_addr_t *addr)
000086  e92d47ff          PUSH     {r0-r10,lr}
;;;153    {
00008a  4606              MOV      r6,r0
00008c  4688              MOV      r8,r1
;;;154      u32_t val;
;;;155      u8_t base;
;;;156      char c;
;;;157      u32_t parts[4];
;;;158      u32_t *pp = parts;
00008e  466f              MOV      r7,sp
;;;159    
;;;160      c = *cp;
000090  7834              LDRB     r4,[r6,#0]
;;;161      for (;;) {
000092  bf00              NOP      
                  |L1.148|
;;;162        /*
;;;163         * Collect number up to ``.''.
;;;164         * Values are specified as for C:
;;;165         * 0x=hex, 0=octal, 1-9=decimal.
;;;166         */
;;;167        if (!isdigit(c))
000094  2c30              CMP      r4,#0x30
000096  db01              BLT      |L1.156|
000098  2c39              CMP      r4,#0x39
00009a  dd03              BLE      |L1.164|
                  |L1.156|
;;;168          return (0);
00009c  2000              MOVS     r0,#0
                  |L1.158|
;;;169        val = 0;
;;;170        base = 10;
;;;171        if (c == '0') {
;;;172          c = *++cp;
;;;173          if (c == 'x' || c == 'X') {
;;;174            base = 16;
;;;175            c = *++cp;
;;;176          } else
;;;177            base = 8;
;;;178        }
;;;179        for (;;) {
;;;180          if (isdigit(c)) {
;;;181            val = (val * base) + (int)(c - '0');
;;;182            c = *++cp;
;;;183          } else if (base == 16 && isxdigit(c)) {
;;;184            val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
;;;185            c = *++cp;
;;;186          } else
;;;187            break;
;;;188        }
;;;189        if (c == '.') {
;;;190          /*
;;;191           * Internet format:
;;;192           *  a.b.c.d
;;;193           *  a.b.c   (with c treated as 16 bits)
;;;194           *  a.b (with b treated as 24 bits)
;;;195           */
;;;196          if (pp >= parts + 3) {
;;;197            return (0);
;;;198          }
;;;199          *pp++ = val;
;;;200          c = *++cp;
;;;201        } else
;;;202          break;
;;;203      }
;;;204      /*
;;;205       * Check for trailing characters.
;;;206       */
;;;207      if (c != '\0' && !isspace(c)) {
;;;208        return (0);
;;;209      }
;;;210      /*
;;;211       * Concoct the address according to
;;;212       * the number of parts specified.
;;;213       */
;;;214      switch (pp - parts + 1) {
;;;215    
;;;216      case 0:
;;;217        return (0);       /* initial nondigit */
;;;218    
;;;219      case 1:             /* a -- 32 bits */
;;;220        break;
;;;221    
;;;222      case 2:             /* a.b -- 8.24 bits */
;;;223        if (val > 0xffffffUL) {
;;;224          return (0);
;;;225        }
;;;226        val |= parts[0] << 24;
;;;227        break;
;;;228    
;;;229      case 3:             /* a.b.c -- 8.8.16 bits */
;;;230        if (val > 0xffff) {
;;;231          return (0);
;;;232        }
;;;233        val |= (parts[0] << 24) | (parts[1] << 16);
;;;234        break;
;;;235    
;;;236      case 4:             /* a.b.c.d -- 8.8.8.8 bits */
;;;237        if (val > 0xff) {
;;;238          return (0);
;;;239        }
;;;240        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
;;;241        break;
;;;242      default:
;;;243        LWIP_ASSERT("unhandled", 0);
;;;244        break;
;;;245      }
;;;246      if (addr) {
;;;247        ip4_addr_set_u32(addr, htonl(val));
;;;248      }
;;;249      return (1);
;;;250    }
00009e  b004              ADD      sp,sp,#0x10
0000a0  e8bd87f0          POP      {r4-r10,pc}
                  |L1.164|
0000a4  2500              MOVS     r5,#0                 ;169
0000a6  f04f090a          MOV      r9,#0xa               ;170
0000aa  2c30              CMP      r4,#0x30              ;171
0000ac  d10e              BNE      |L1.204|
0000ae  1c70              ADDS     r0,r6,#1              ;172
0000b0  4606              MOV      r6,r0                 ;172
0000b2  7804              LDRB     r4,[r0,#0]            ;172
0000b4  2c78              CMP      r4,#0x78              ;173
0000b6  d001              BEQ      |L1.188|
0000b8  2c58              CMP      r4,#0x58              ;173
0000ba  d105              BNE      |L1.200|
                  |L1.188|
0000bc  f04f0910          MOV      r9,#0x10              ;174
0000c0  1c70              ADDS     r0,r6,#1              ;175
0000c2  4606              MOV      r6,r0                 ;175
0000c4  7804              LDRB     r4,[r0,#0]            ;175
0000c6  e001              B        |L1.204|
                  |L1.200|
0000c8  f04f0908          MOV      r9,#8                 ;177
                  |L1.204|
0000cc  bf00              NOP                            ;179
                  |L1.206|
0000ce  2c30              CMP      r4,#0x30              ;180
0000d0  db09              BLT      |L1.230|
0000d2  2c39              CMP      r4,#0x39              ;180
0000d4  dc07              BGT      |L1.230|
0000d6  f1a40030          SUB      r0,r4,#0x30           ;181
0000da  fb050509          MLA      r5,r5,r9,r0           ;181
0000de  1c70              ADDS     r0,r6,#1              ;182
0000e0  4606              MOV      r6,r0                 ;182
0000e2  7804              LDRB     r4,[r0,#0]            ;182
0000e4  e7f3              B        |L1.206|
                  |L1.230|
0000e6  f1b90f10          CMP      r9,#0x10              ;183
0000ea  d11b              BNE      |L1.292|
0000ec  2c30              CMP      r4,#0x30              ;183
0000ee  db01              BLT      |L1.244|
0000f0  2c39              CMP      r4,#0x39              ;183
0000f2  dd07              BLE      |L1.260|
                  |L1.244|
0000f4  2c61              CMP      r4,#0x61              ;183
0000f6  db01              BLT      |L1.252|
0000f8  2c66              CMP      r4,#0x66              ;183
0000fa  dd03              BLE      |L1.260|
                  |L1.252|
0000fc  2c41              CMP      r4,#0x41              ;183
0000fe  db11              BLT      |L1.292|
000100  2c46              CMP      r4,#0x46              ;183
000102  dc0f              BGT      |L1.292|
                  |L1.260|
000104  2c61              CMP      r4,#0x61              ;184
000106  db03              BLT      |L1.272|
000108  2c7a              CMP      r4,#0x7a              ;184
00010a  dc01              BGT      |L1.272|
00010c  2161              MOVS     r1,#0x61              ;184
00010e  e000              B        |L1.274|
                  |L1.272|
000110  2141              MOVS     r1,#0x41              ;184
                  |L1.274|
000112  f104000a          ADD      r0,r4,#0xa            ;184
000116  1a40              SUBS     r0,r0,r1              ;184
000118  ea401505          ORR      r5,r0,r5,LSL #4       ;184
00011c  1c70              ADDS     r0,r6,#1              ;185
00011e  4606              MOV      r6,r0                 ;185
000120  7804              LDRB     r4,[r0,#0]            ;185
000122  e7d4              B        |L1.206|
                  |L1.292|
000124  bf00              NOP                            ;187
000126  bf00              NOP                            ;187
000128  2c2e              CMP      r4,#0x2e              ;189
00012a  d109              BNE      |L1.320|
00012c  a803              ADD      r0,sp,#0xc            ;196
00012e  4287              CMP      r7,r0                 ;196
000130  d301              BCC      |L1.310|
000132  2000              MOVS     r0,#0                 ;197
000134  e7b3              B        |L1.158|
                  |L1.310|
000136  c720              STM      r7!,{r5}              ;199
000138  1c70              ADDS     r0,r6,#1              ;200
00013a  4606              MOV      r6,r0                 ;200
00013c  7804              LDRB     r4,[r0,#0]            ;200
00013e  e7a9              B        |L1.148|
                  |L1.320|
000140  bf00              NOP                            ;202
000142  bf00              NOP                            ;202
000144  b16c              CBZ      r4,|L1.354|
000146  2c20              CMP      r4,#0x20              ;207
000148  d00b              BEQ      |L1.354|
00014a  2c0c              CMP      r4,#0xc               ;207
00014c  d009              BEQ      |L1.354|
00014e  2c0a              CMP      r4,#0xa               ;207
000150  d007              BEQ      |L1.354|
000152  2c0d              CMP      r4,#0xd               ;207
000154  d005              BEQ      |L1.354|
000156  2c09              CMP      r4,#9                 ;207
000158  d003              BEQ      |L1.354|
00015a  2c0b              CMP      r4,#0xb               ;207
00015c  d001              BEQ      |L1.354|
00015e  2000              MOVS     r0,#0                 ;208
000160  e79d              B        |L1.158|
                  |L1.354|
000162  4668              MOV      r0,sp                 ;214
000164  1a38              SUBS     r0,r7,r0              ;214
000166  2101              MOVS     r1,#1                 ;214
000168  eb0100a0          ADD      r0,r1,r0,ASR #2       ;214
00016c  2805              CMP      r0,#5                 ;214
00016e  d22a              BCS      |L1.454|
000170  e8dff000          TBB      [pc,r0]               ;214
000174  0305060f          DCB      0x03,0x05,0x06,0x0f
000178  1b00              DCB      0x1b,0x00
00017a  2000              MOVS     r0,#0                 ;217
00017c  e78f              B        |L1.158|
00017e  e025              B        |L1.460|
000180  f1b57f80          CMP      r5,#0x1000000         ;223
000184  d301              BCC      |L1.394|
000186  2000              MOVS     r0,#0                 ;224
000188  e789              B        |L1.158|
                  |L1.394|
00018a  9800              LDR      r0,[sp,#0]            ;226
00018c  ea456500          ORR      r5,r5,r0,LSL #24      ;226
000190  e01c              B        |L1.460|
000192  f5b53f80          CMP      r5,#0x10000           ;230
000196  d301              BCC      |L1.412|
000198  2000              MOVS     r0,#0                 ;231
00019a  e780              B        |L1.158|
                  |L1.412|
00019c  9800              LDR      r0,[sp,#0]            ;233
00019e  0600              LSLS     r0,r0,#24             ;233
0001a0  9901              LDR      r1,[sp,#4]            ;233
0001a2  ea404001          ORR      r0,r0,r1,LSL #16      ;233
0001a6  4305              ORRS     r5,r5,r0              ;233
0001a8  e010              B        |L1.460|
0001aa  2dff              CMP      r5,#0xff              ;237
0001ac  d901              BLS      |L1.434|
0001ae  2000              MOVS     r0,#0                 ;238
0001b0  e775              B        |L1.158|
                  |L1.434|
0001b2  9800              LDR      r0,[sp,#0]            ;240
0001b4  0600              LSLS     r0,r0,#24             ;240
0001b6  9901              LDR      r1,[sp,#4]            ;240
0001b8  ea404001          ORR      r0,r0,r1,LSL #16      ;240
0001bc  9902              LDR      r1,[sp,#8]            ;240
0001be  ea402001          ORR      r0,r0,r1,LSL #8       ;240
0001c2  4305              ORRS     r5,r5,r0              ;240
0001c4  e002              B        |L1.460|
                  |L1.454|
0001c6  bf00              NOP                            ;243
0001c8  bf00              NOP                            ;243
0001ca  bf00              NOP                            ;244
                  |L1.460|
0001cc  bf00              NOP                            ;220
0001ce  f1b80f00          CMP      r8,#0                 ;246
0001d2  d004              BEQ      |L1.478|
0001d4  4628              MOV      r0,r5                 ;247
0001d6  f7fffffe          BL       lwip_htonl
0001da  f8c80000          STR      r0,[r8,#0]            ;247
                  |L1.478|
0001de  2001              MOVS     r0,#1                 ;249
0001e0  e75d              B        |L1.158|
;;;251    
                          ENDP

                  ipaddr_addr PROC
;;;129    u32_t
;;;130    ipaddr_addr(const char *cp)
0001e2  b538              PUSH     {r3-r5,lr}
;;;131    {
0001e4  4604              MOV      r4,r0
;;;132      ip_addr_t val;
;;;133    
;;;134      if (ipaddr_aton(cp, &val)) {
0001e6  4669              MOV      r1,sp
0001e8  4620              MOV      r0,r4
0001ea  f7fffffe          BL       ipaddr_aton
0001ee  b108              CBZ      r0,|L1.500|
;;;135        return ip4_addr_get_u32(&val);
0001f0  9800              LDR      r0,[sp,#0]
                  |L1.498|
;;;136      }
;;;137      return (IPADDR_NONE);
;;;138    }
0001f2  bd38              POP      {r3-r5,pc}
                  |L1.500|
0001f4  f04f30ff          MOV      r0,#0xffffffff        ;137
0001f8  e7fb              B        |L1.498|
;;;139    
                          ENDP

                  ipaddr_ntoa_r PROC
;;;275     */
;;;276    char *ipaddr_ntoa_r(const ip_addr_t *addr, char *buf, int buflen)
0001fa  e92d47fc          PUSH     {r2-r10,lr}
;;;277    {
0001fe  4606              MOV      r6,r0
000200  460b              MOV      r3,r1
000202  4614              MOV      r4,r2
;;;278      u32_t s_addr;
;;;279      char inv[3];
;;;280      char *rp;
;;;281      u8_t *ap;
;;;282      u8_t rem;
;;;283      u8_t n;
;;;284      u8_t i;
;;;285      int len = 0;
000204  f04f0c00          MOV      r12,#0
;;;286    
;;;287      s_addr = ip4_addr_get_u32(addr);
000208  6830              LDR      r0,[r6,#0]
00020a  9001              STR      r0,[sp,#4]
;;;288    
;;;289      rp = buf;
00020c  4619              MOV      r1,r3
;;;290      ap = (u8_t *)&s_addr;
00020e  aa01              ADD      r2,sp,#4
;;;291      for(n = 0; n < 4; n++) {
000210  2700              MOVS     r7,#0
000212  e03c              B        |L1.654|
                  |L1.532|
;;;292        i = 0;
000214  2500              MOVS     r5,#0
;;;293        do {
000216  bf00              NOP      
                  |L1.536|
;;;294          rem = *ap % (u8_t)10;
000218  7810              LDRB     r0,[r2,#0]
00021a  f04f090a          MOV      r9,#0xa
00021e  fb90faf9          SDIV     r10,r0,r9
000222  fb09001a          MLS      r0,r9,r10,r0
000226  f00008ff          AND      r8,r0,#0xff
;;;295          *ap /= (u8_t)10;
00022a  7810              LDRB     r0,[r2,#0]
00022c  fb90f0f9          SDIV     r0,r0,r9
000230  7010              STRB     r0,[r2,#0]
;;;296          inv[i++] = '0' + rem;
000232  f1080030          ADD      r0,r8,#0x30
000236  f0000aff          AND      r10,r0,#0xff
00023a  4628              MOV      r0,r5
00023c  f1050901          ADD      r9,r5,#1
000240  f00905ff          AND      r5,r9,#0xff
000244  f80da000          STRB     r10,[sp,r0]
;;;297        } while(*ap);
000248  7810              LDRB     r0,[r2,#0]
00024a  2800              CMP      r0,#0
00024c  d1e4              BNE      |L1.536|
;;;298        while(i--) {
00024e  e00b              B        |L1.616|
                  |L1.592|
;;;299          if (len++ >= buflen) {
000250  4660              MOV      r0,r12
000252  f10c0c01          ADD      r12,r12,#1
000256  42a0              CMP      r0,r4
000258  db02              BLT      |L1.608|
;;;300            return NULL;
00025a  2000              MOVS     r0,#0
                  |L1.604|
;;;301          }
;;;302          *rp++ = inv[i];
;;;303        }
;;;304        if (len++ >= buflen) {
;;;305          return NULL;
;;;306        }
;;;307        *rp++ = '.';
;;;308        ap++;
;;;309      }
;;;310      *--rp = 0;
;;;311      return buf;
;;;312    }
00025c  e8bd87fc          POP      {r2-r10,pc}
                  |L1.608|
000260  f81d0005          LDRB     r0,[sp,r5]            ;302
000264  f8010b01          STRB     r0,[r1],#1            ;302
                  |L1.616|
000268  1e28              SUBS     r0,r5,#0              ;298
00026a  f1a50901          SUB      r9,r5,#1              ;298
00026e  f00905ff          AND      r5,r9,#0xff           ;298
000272  d1ed              BNE      |L1.592|
000274  4660              MOV      r0,r12                ;304
000276  f10c0c01          ADD      r12,r12,#1            ;304
00027a  42a0              CMP      r0,r4                 ;304
00027c  db01              BLT      |L1.642|
00027e  2000              MOVS     r0,#0                 ;305
000280  e7ec              B        |L1.604|
                  |L1.642|
000282  202e              MOVS     r0,#0x2e              ;307
000284  f8010b01          STRB     r0,[r1],#1            ;307
000288  1c52              ADDS     r2,r2,#1              ;308
00028a  1c78              ADDS     r0,r7,#1              ;291
00028c  b2c7              UXTB     r7,r0                 ;291
                  |L1.654|
00028e  2f04              CMP      r7,#4                 ;291
000290  dbc0              BLT      |L1.532|
000292  f04f0900          MOV      r9,#0                 ;310
000296  1e48              SUBS     r0,r1,#1              ;310
000298  4601              MOV      r1,r0                 ;310
00029a  f8809000          STRB     r9,[r0,#0]            ;310
00029e  4618              MOV      r0,r3                 ;311
0002a0  e7dc              B        |L1.604|
                          ENDP

                  ipaddr_ntoa PROC
;;;260    char *
;;;261    ipaddr_ntoa(const ip_addr_t *addr)
0002a2  b510              PUSH     {r4,lr}
;;;262    {
0002a4  4604              MOV      r4,r0
;;;263      static char str[16];
;;;264      return ipaddr_ntoa_r(addr, str, 16);
0002a6  2210              MOVS     r2,#0x10
0002a8  4902              LDR      r1,|L1.692|
0002aa  4620              MOV      r0,r4
0002ac  f7fffffe          BL       ipaddr_ntoa_r
;;;265    }
0002b0  bd10              POP      {r4,pc}
;;;266    
                          ENDP

0002b2  0000              DCW      0x0000
                  |L1.692|
                          DCD      ||str||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ||str||
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  ip_addr_any
                          DCD      0x00000000
                  ip_addr_broadcast
                          DCD      0xffffffff

; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\timer.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\timer.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\timer.crf ..\..\libraries\ptpd-2.0.0\src\dep\timer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  timerCallback PROC
;;;8       
;;;9      static void timerCallback(void const *arg)
000000  b570              PUSH     {r4-r6,lr}
;;;10     {
000002  4604              MOV      r4,r0
;;;11     	int index = (int) arg;
000004  4625              MOV      r5,r4
;;;12     
;;;13     	// Sanity check the index.
;;;14     	if (index < TIMER_ARRAY_SIZE)
000006  2d06              CMP      r5,#6
000008  da04              BGE      |L1.20|
;;;15     	{
;;;16     		/* Mark the indicated timer as expired. */
;;;17     		ptpdTimersExpired[index] = TRUE;
00000a  2001              MOVS     r0,#1
00000c  4922              LDR      r1,|L1.152|
00000e  5548              STRB     r0,[r1,r5]
;;;18     
;;;19     		/* Notify the PTP thread of a pending operation. */
;;;20     		ptpd_alert();
000010  f7fffffe          BL       ptpd_alert
                  |L1.20|
;;;21     	}
;;;22     }
000014  bd70              POP      {r4-r6,pc}
;;;23     
                          ENDP

                  initTimer PROC
;;;24     void initTimer(void)
000016  b510              PUSH     {r4,lr}
;;;25     {
;;;26     	int32_t i;
;;;27     
;;;28     	DBG("initTimer\n");
;;;29     
;;;30     	/* Create the various timers used in the system. */
;;;31       for (i = 0; i < TIMER_ARRAY_SIZE; i++)
000018  2400              MOVS     r4,#0
00001a  e00b              B        |L1.52|
                  |L1.28|
;;;32       {
;;;33     		// Mark the timer as not expired.
;;;34     		// Initialize the timer.
;;;35     		sys_timer_new(&ptpdTimers[i], timerCallback, osTimerOnce, (void *) i);
00001c  491f              LDR      r1,|L1.156|
00001e  eb011044          ADD      r0,r1,r4,LSL #5
000022  4623              MOV      r3,r4
000024  2200              MOVS     r2,#0
000026  491e              LDR      r1,|L1.160|
000028  f7fffffe          BL       sys_timer_new
;;;36     		ptpdTimersExpired[i] = FALSE;
00002c  2000              MOVS     r0,#0
00002e  491a              LDR      r1,|L1.152|
000030  5508              STRB     r0,[r1,r4]
000032  1c64              ADDS     r4,r4,#1              ;31
                  |L1.52|
000034  2c06              CMP      r4,#6                 ;31
000036  dbf1              BLT      |L1.28|
;;;37     	}
;;;38     }
000038  bd10              POP      {r4,pc}
;;;39     
                          ENDP

                  timerStop PROC
;;;40     void timerStop(int32_t index)
00003a  b510              PUSH     {r4,lr}
;;;41     {
00003c  4604              MOV      r4,r0
;;;42     	/* Sanity check the index. */
;;;43     	if (index >= TIMER_ARRAY_SIZE) return;
00003e  2c06              CMP      r4,#6
000040  db00              BLT      |L1.68|
                  |L1.66|
;;;44     
;;;45     	// Cancel the timer and reset the expired flag.
;;;46     	DBGV("timerStop: stop timer %d\n", index);
;;;47       sys_timer_stop(&ptpdTimers[index]);
;;;48     	ptpdTimersExpired[index] = FALSE;
;;;49     }
000042  bd10              POP      {r4,pc}
                  |L1.68|
000044  4915              LDR      r1,|L1.156|
000046  eb011044          ADD      r0,r1,r4,LSL #5       ;47
00004a  f7fffffe          BL       sys_timer_stop
00004e  2000              MOVS     r0,#0                 ;48
000050  4911              LDR      r1,|L1.152|
000052  5508              STRB     r0,[r1,r4]            ;48
000054  bf00              NOP      
000056  e7f4              B        |L1.66|
;;;50     
                          ENDP

                  timerStart PROC
;;;51     void timerStart(int32_t index, uint32_t interval_ms)
000058  b570              PUSH     {r4-r6,lr}
;;;52     {
00005a  4604              MOV      r4,r0
00005c  460d              MOV      r5,r1
;;;53     	/* Sanity check the index. */
;;;54     	if (index >= TIMER_ARRAY_SIZE) return;
00005e  2c06              CMP      r4,#6
000060  db00              BLT      |L1.100|
                  |L1.98|
;;;55     
;;;56     	// Set the timer duration and start the timer.
;;;57     	DBGV("timerStart: set timer %d to %d\n", index, interval_ms);
;;;58     	ptpdTimersExpired[index] = FALSE;
;;;59       sys_timer_start(&ptpdTimers[index], interval_ms);
;;;60     }
000062  bd70              POP      {r4-r6,pc}
                  |L1.100|
000064  2000              MOVS     r0,#0                 ;58
000066  490c              LDR      r1,|L1.152|
000068  5508              STRB     r0,[r1,r4]            ;58
00006a  490c              LDR      r1,|L1.156|
00006c  eb011044          ADD      r0,r1,r4,LSL #5       ;59
000070  4629              MOV      r1,r5                 ;59
000072  f7fffffe          BL       sys_timer_start
000076  bf00              NOP      
000078  e7f3              B        |L1.98|
;;;61     
                          ENDP

                  timerExpired PROC
;;;62     bool timerExpired(int32_t index)
00007a  4601              MOV      r1,r0
;;;63     {
;;;64     	/* Sanity check the index. */
;;;65     	if (index >= TIMER_ARRAY_SIZE) return FALSE;
00007c  2906              CMP      r1,#6
00007e  db01              BLT      |L1.132|
000080  2000              MOVS     r0,#0
                  |L1.130|
;;;66     
;;;67     	/* Determine if the timer expired. */
;;;68     	if (!ptpdTimersExpired[index]) return FALSE;
;;;69     	DBGV("timerExpired: timer %d expired\n", index);
;;;70     	ptpdTimersExpired[index] = FALSE;
;;;71     
;;;72     	return TRUE;
;;;73     }
000082  4770              BX       lr
                  |L1.132|
000084  4804              LDR      r0,|L1.152|
000086  5c40              LDRB     r0,[r0,r1]            ;68
000088  b908              CBNZ     r0,|L1.142|
00008a  2000              MOVS     r0,#0                 ;68
00008c  e7f9              B        |L1.130|
                  |L1.142|
00008e  2000              MOVS     r0,#0                 ;70
000090  4a01              LDR      r2,|L1.152|
000092  5450              STRB     r0,[r2,r1]            ;70
000094  2001              MOVS     r0,#1                 ;72
000096  e7f4              B        |L1.130|
                          ENDP

                  |L1.152|
                          DCD      ptpdTimersExpired
                  |L1.156|
                          DCD      ptpdTimers
                  |L1.160|
                          DCD      timerCallback

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ptpdTimers
                          %        192

                          AREA ||.data||, DATA, ALIGN=0

                  ptpdTimersExpired
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\libraries\\ptpd-2.0.0\\src\\dep\\timer.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_3006d13a____REV16|
#line 114 "..\\..\\libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_timer_c_3006d13a____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___7_timer_c_3006d13a____REVSH|
#line 128
|__asm___7_timer_c_3006d13a____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

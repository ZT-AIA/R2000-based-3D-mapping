; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\rt_semaphore.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\rt_semaphore.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\rt_semaphore.crf ..\..\libraries\rtx-v4.73\SRC\rt_Semaphore.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  rt_sem_init PROC
;;;50     
;;;51     void rt_sem_init (OS_ID semaphore, U16 token_count) {
000000  460a              MOV      r2,r1
;;;52       /* Initialize a semaphore */
;;;53       P_SCB p_SCB = semaphore;
000002  4601              MOV      r1,r0
;;;54     
;;;55       p_SCB->cb_type = SCB;
000004  2302              MOVS     r3,#2
000006  700b              STRB     r3,[r1,#0]
;;;56       p_SCB->p_lnk  = NULL;
000008  2300              MOVS     r3,#0
00000a  604b              STR      r3,[r1,#4]
;;;57       p_SCB->tokens = token_count;
00000c  804a              STRH     r2,[r1,#2]
;;;58     }
00000e  4770              BX       lr
;;;59     
                          ENDP

                  rt_sem_delete PROC
;;;63     #ifdef __CMSIS_RTOS
;;;64     OS_RESULT rt_sem_delete (OS_ID semaphore) {
000010  b570              PUSH     {r4-r6,lr}
000012  4606              MOV      r6,r0
;;;65       /* Delete semaphore */
;;;66       P_SCB p_SCB = semaphore;
000014  4635              MOV      r5,r6
;;;67       P_TCB p_TCB;
;;;68     
;;;69       while (p_SCB->p_lnk != NULL) {
000016  e010              B        |L1.58|
                  |L1.24|
;;;70         /* A task is waiting for token */
;;;71         p_TCB = rt_get_first ((P_XCB)p_SCB);
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       rt_get_first
00001e  4604              MOV      r4,r0
;;;72         rt_ret_val(p_TCB, 0);
000020  2100              MOVS     r1,#0
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       rt_ret_val
;;;73         rt_rmv_dly(p_TCB);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       rt_rmv_dly
;;;74         p_TCB->state = READY;
00002e  2001              MOVS     r0,#1
000030  7060              STRB     r0,[r4,#1]
;;;75         rt_put_prio (&os_rdy, p_TCB);
000032  4621              MOV      r1,r4
000034  4841              LDR      r0,|L1.316|
000036  f7fffffe          BL       rt_put_prio
                  |L1.58|
00003a  6868              LDR      r0,[r5,#4]            ;69
00003c  2800              CMP      r0,#0                 ;69
00003e  d1eb              BNE      |L1.24|
;;;76       }
;;;77     
;;;78       if (os_rdy.p_lnk && (os_rdy.p_lnk->prio > os_tsk.run->prio)) {
000040  483e              LDR      r0,|L1.316|
000042  6840              LDR      r0,[r0,#4]  ; os_rdy
000044  b198              CBZ      r0,|L1.110|
000046  483d              LDR      r0,|L1.316|
000048  6840              LDR      r0,[r0,#4]  ; os_rdy
00004a  7880              LDRB     r0,[r0,#2]
00004c  493c              LDR      r1,|L1.320|
00004e  6809              LDR      r1,[r1,#0]  ; os_tsk
000050  7889              LDRB     r1,[r1,#2]
000052  4288              CMP      r0,r1
000054  dd0b              BLE      |L1.110|
;;;79         /* preempt running task */
;;;80         rt_put_prio (&os_rdy, os_tsk.run);
000056  483a              LDR      r0,|L1.320|
000058  6801              LDR      r1,[r0,#0]  ; os_tsk
00005a  4838              LDR      r0,|L1.316|
00005c  f7fffffe          BL       rt_put_prio
;;;81         os_tsk.run->state = READY;
000060  2001              MOVS     r0,#1
000062  4937              LDR      r1,|L1.320|
000064  6809              LDR      r1,[r1,#0]  ; os_tsk
000066  7048              STRB     r0,[r1,#1]
;;;82         rt_dispatch (NULL);
000068  2000              MOVS     r0,#0
00006a  f7fffffe          BL       rt_dispatch
                  |L1.110|
;;;83       }
;;;84     
;;;85       p_SCB->cb_type = 0;
00006e  2000              MOVS     r0,#0
000070  7028              STRB     r0,[r5,#0]
;;;86     
;;;87       return (OS_R_OK);
;;;88     }
000072  bd70              POP      {r4-r6,pc}
;;;89     #endif
                          ENDP

                  rt_sem_send PROC
;;;93     
;;;94     OS_RESULT rt_sem_send (OS_ID semaphore) {
000074  b570              PUSH     {r4-r6,lr}
000076  4605              MOV      r5,r0
;;;95       /* Return a token to semaphore */
;;;96       P_SCB p_SCB = semaphore;
000078  462c              MOV      r4,r5
;;;97       P_TCB p_TCB;
;;;98     
;;;99       if (p_SCB->p_lnk != NULL) {
00007a  6860              LDR      r0,[r4,#4]
00007c  b170              CBZ      r0,|L1.156|
;;;100        /* A task is waiting for token */
;;;101        p_TCB = rt_get_first ((P_XCB)p_SCB);
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       rt_get_first
000084  4606              MOV      r6,r0
;;;102    #ifdef __CMSIS_RTOS
;;;103        rt_ret_val(p_TCB, 1);
000086  2101              MOVS     r1,#1
000088  4630              MOV      r0,r6
00008a  f7fffffe          BL       rt_ret_val
;;;104    #else
;;;105        rt_ret_val(p_TCB, OS_R_SEM);
;;;106    #endif
;;;107        rt_rmv_dly (p_TCB);
00008e  4630              MOV      r0,r6
000090  f7fffffe          BL       rt_rmv_dly
;;;108        rt_dispatch (p_TCB);
000094  4630              MOV      r0,r6
000096  f7fffffe          BL       rt_dispatch
00009a  e002              B        |L1.162|
                  |L1.156|
;;;109      }
;;;110      else {
;;;111        /* Store token. */
;;;112        p_SCB->tokens++;
00009c  8860              LDRH     r0,[r4,#2]
00009e  1c40              ADDS     r0,r0,#1
0000a0  8060              STRH     r0,[r4,#2]
                  |L1.162|
;;;113      }
;;;114      return (OS_R_OK);
0000a2  2000              MOVS     r0,#0
;;;115    }
0000a4  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP

                  rt_sem_wait PROC
;;;119    
;;;120    OS_RESULT rt_sem_wait (OS_ID semaphore, U16 timeout) {
0000a6  b570              PUSH     {r4-r6,lr}
0000a8  4605              MOV      r5,r0
0000aa  460e              MOV      r6,r1
;;;121      /* Obtain a token; possibly wait for it */
;;;122      P_SCB p_SCB = semaphore;
0000ac  462c              MOV      r4,r5
;;;123    
;;;124      if (p_SCB->tokens) {
0000ae  8860              LDRH     r0,[r4,#2]
0000b0  b120              CBZ      r0,|L1.188|
;;;125        p_SCB->tokens--;
0000b2  8860              LDRH     r0,[r4,#2]
0000b4  1e40              SUBS     r0,r0,#1
0000b6  8060              STRH     r0,[r4,#2]
;;;126        return (OS_R_OK);
0000b8  2000              MOVS     r0,#0
                  |L1.186|
;;;127      }
;;;128      /* No token available: wait for one */
;;;129      if (timeout == 0) {
;;;130        return (OS_R_TMO);
;;;131      }
;;;132      if (p_SCB->p_lnk != NULL) {
;;;133        rt_put_prio ((P_XCB)p_SCB, os_tsk.run);
;;;134      }
;;;135      else {
;;;136        p_SCB->p_lnk = os_tsk.run;
;;;137        os_tsk.run->p_lnk = NULL;
;;;138        os_tsk.run->p_rlnk = (P_TCB)p_SCB;
;;;139      }
;;;140      rt_block(timeout, WAIT_SEM);
;;;141      return (OS_R_TMO);
;;;142    }
0000ba  bd70              POP      {r4-r6,pc}
                  |L1.188|
0000bc  b90e              CBNZ     r6,|L1.194|
0000be  2001              MOVS     r0,#1                 ;130
0000c0  e7fb              B        |L1.186|
                  |L1.194|
0000c2  6860              LDR      r0,[r4,#4]            ;132
0000c4  b128              CBZ      r0,|L1.210|
0000c6  481e              LDR      r0,|L1.320|
0000c8  6801              LDR      r1,[r0,#0]            ;133  ; os_tsk
0000ca  4620              MOV      r0,r4                 ;133
0000cc  f7fffffe          BL       rt_put_prio
0000d0  e009              B        |L1.230|
                  |L1.210|
0000d2  481b              LDR      r0,|L1.320|
0000d4  6800              LDR      r0,[r0,#0]            ;136  ; os_tsk
0000d6  6060              STR      r0,[r4,#4]            ;136
0000d8  2000              MOVS     r0,#0                 ;137
0000da  4919              LDR      r1,|L1.320|
0000dc  6809              LDR      r1,[r1,#0]            ;137  ; os_tsk
0000de  6048              STR      r0,[r1,#4]            ;137
0000e0  4817              LDR      r0,|L1.320|
0000e2  6800              LDR      r0,[r0,#0]            ;138  ; os_tsk
0000e4  6084              STR      r4,[r0,#8]            ;138
                  |L1.230|
0000e6  2107              MOVS     r1,#7                 ;140
0000e8  4630              MOV      r0,r6                 ;140
0000ea  f7fffffe          BL       rt_block
0000ee  2001              MOVS     r0,#1                 ;141
0000f0  e7e3              B        |L1.186|
;;;143    
                          ENDP

                  isr_sem_send PROC
;;;146    
;;;147    void isr_sem_send (OS_ID semaphore) {
0000f2  b570              PUSH     {r4-r6,lr}
0000f4  4604              MOV      r4,r0
;;;148      /* Same function as "os_sem_send", but to be called by ISRs */
;;;149      P_SCB p_SCB = semaphore;
0000f6  4625              MOV      r5,r4
;;;150    
;;;151      rt_psq_enq (p_SCB, 0);
0000f8  2100              MOVS     r1,#0
0000fa  4628              MOV      r0,r5
0000fc  f7fffffe          BL       rt_psq_enq
;;;152      rt_psh_req ();
000100  f7fffffe          BL       rt_psh_req
;;;153    }
000104  bd70              POP      {r4-r6,pc}
;;;154    
                          ENDP

                  rt_sem_psh PROC
;;;157    
;;;158    void rt_sem_psh (P_SCB p_CB) {
000106  b570              PUSH     {r4-r6,lr}
000108  4604              MOV      r4,r0
;;;159      /* Check if task has to be waken up */
;;;160      P_TCB p_TCB;
;;;161    
;;;162      if (p_CB->p_lnk != NULL) {
00010a  6860              LDR      r0,[r4,#4]
00010c  b188              CBZ      r0,|L1.306|
;;;163        /* A task is waiting for token */
;;;164        p_TCB = rt_get_first ((P_XCB)p_CB);
00010e  4620              MOV      r0,r4
000110  f7fffffe          BL       rt_get_first
000114  4605              MOV      r5,r0
;;;165        rt_rmv_dly (p_TCB);
000116  4628              MOV      r0,r5
000118  f7fffffe          BL       rt_rmv_dly
;;;166        p_TCB->state   = READY;
00011c  2001              MOVS     r0,#1
00011e  7068              STRB     r0,[r5,#1]
;;;167    #ifdef __CMSIS_RTOS
;;;168        rt_ret_val(p_TCB, 1);
000120  2101              MOVS     r1,#1
000122  4628              MOV      r0,r5
000124  f7fffffe          BL       rt_ret_val
;;;169    #else
;;;170        rt_ret_val(p_TCB, OS_R_SEM);
;;;171    #endif
;;;172        rt_put_prio (&os_rdy, p_TCB);
000128  4629              MOV      r1,r5
00012a  4804              LDR      r0,|L1.316|
00012c  f7fffffe          BL       rt_put_prio
000130  e002              B        |L1.312|
                  |L1.306|
;;;173      }
;;;174      else {
;;;175        /* Store token */
;;;176        p_CB->tokens++;
000132  8860              LDRH     r0,[r4,#2]
000134  1c40              ADDS     r0,r0,#1
000136  8060              STRH     r0,[r4,#2]
                  |L1.312|
;;;177      }
;;;178    }
000138  bd70              POP      {r4-r6,pc}
;;;179    
                          ENDP

00013a  0000              DCW      0x0000
                  |L1.316|
                          DCD      os_rdy
                  |L1.320|
                          DCD      os_tsk

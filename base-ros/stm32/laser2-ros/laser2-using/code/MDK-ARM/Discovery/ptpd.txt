; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\ptpd.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\ptpd.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\ptpd.crf ..\..\libraries\ptpd-2.0.0\src\ptpd.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ptpd_thread PROC
;;;15     
;;;16     static void ptpd_thread(void *arg)
000000  b538              PUSH     {r3-r5,lr}
;;;17     {
000002  4604              MOV      r4,r0
;;;18     	// Initialize run-time options to default values.
;;;19     	rtOpts.announceInterval = DEFAULT_ANNOUNCE_INTERVAL;
000004  2001              MOVS     r0,#1
000006  4933              LDR      r1,|L1.212|
000008  7008              STRB     r0,[r1,#0]
;;;20     	rtOpts.syncInterval = DEFAULT_SYNC_INTERVAL;
00000a  2000              MOVS     r0,#0
00000c  7048              STRB     r0,[r1,#1]
;;;21     	rtOpts.clockQuality.clockAccuracy = DEFAULT_CLOCK_ACCURACY;
00000e  21fe              MOVS     r1,#0xfe
000010  4830              LDR      r0,|L1.212|
000012  70c1              STRB     r1,[r0,#3]
;;;22     	rtOpts.clockQuality.clockClass = DEFAULT_CLOCK_CLASS;
000014  20f8              MOVS     r0,#0xf8
000016  492f              LDR      r1,|L1.212|
000018  7088              STRB     r0,[r1,#2]
;;;23     	rtOpts.clockQuality.offsetScaledLogVariance = DEFAULT_CLOCK_VARIANCE; /* 7.6.3.3 */
00001a  f2413188          MOV      r1,#0x1388
00001e  482d              LDR      r0,|L1.212|
000020  8081              STRH     r1,[r0,#4]
;;;24     	rtOpts.priority1 = DEFAULT_PRIORITY1;
000022  20f8              MOVS     r0,#0xf8
000024  492b              LDR      r1,|L1.212|
000026  7188              STRB     r0,[r1,#6]
;;;25     	rtOpts.priority2 = DEFAULT_PRIORITY2;
000028  71c8              STRB     r0,[r1,#7]
;;;26     	rtOpts.domainNumber = DEFAULT_DOMAIN_NUMBER;
00002a  2000              MOVS     r0,#0
00002c  7208              STRB     r0,[r1,#8]
;;;27     	rtOpts.slaveOnly = SLAVE_ONLY;
00002e  2001              MOVS     r0,#1
000030  7248              STRB     r0,[r1,#9]
;;;28     	rtOpts.currentUtcOffset = DEFAULT_UTC_OFFSET;
000032  2022              MOVS     r0,#0x22
000034  8148              STRH     r0,[r1,#0xa]
;;;29     	rtOpts.servo.noResetClock = DEFAULT_NO_RESET_CLOCK;
000036  2000              MOVS     r0,#0
000038  f8810034          STRB     r0,[r1,#0x34]
;;;30     	rtOpts.servo.noAdjust = NO_ADJUST;
00003c  2100              MOVS     r1,#0
00003e  4825              LDR      r0,|L1.212|
000040  f8801035          STRB     r1,[r0,#0x35]
;;;31     	rtOpts.inboundLatency.nanoseconds = DEFAULT_INBOUND_LATENCY;
000044  6241              STR      r1,[r0,#0x24]
;;;32     	rtOpts.outboundLatency.nanoseconds = DEFAULT_OUTBOUND_LATENCY;
000046  62c1              STR      r1,[r0,#0x2c]
;;;33     	rtOpts.servo.sDelay = DEFAULT_DELAY_S;
000048  2106              MOVS     r1,#6
00004a  8741              STRH     r1,[r0,#0x3a]
;;;34     	rtOpts.servo.sOffset = DEFAULT_OFFSET_S;
00004c  2101              MOVS     r1,#1
00004e  8781              STRH     r1,[r0,#0x3c]
;;;35     	rtOpts.servo.ap = DEFAULT_AP;
000050  2102              MOVS     r1,#2
000052  86c1              STRH     r1,[r0,#0x36]
;;;36     	rtOpts.servo.ai = DEFAULT_AI;
000054  2110              MOVS     r1,#0x10
000056  8701              STRH     r1,[r0,#0x38]
;;;37     	rtOpts.maxForeignRecords = sizeof(ptpForeignRecords) / sizeof(ptpForeignRecords[0]);
000058  2005              MOVS     r0,#5
00005a  491e              LDR      r1,|L1.212|
00005c  8608              STRH     r0,[r1,#0x30]
;;;38     	rtOpts.stats = PTP_TEXT_STATS;
00005e  2001              MOVS     r0,#1
000060  7388              STRB     r0,[r1,#0xe]
;;;39     	rtOpts.delayMechanism = DEFAULT_DELAY_MECHANISM;
000062  f8810032          STRB     r0,[r1,#0x32]
;;;40     
;;;41     	// Initialize run time options.
;;;42     	if (ptpdStartup(&ptpClock, &rtOpts, ptpForeignRecords) != 0)
000066  4a1c              LDR      r2,|L1.216|
000068  481c              LDR      r0,|L1.220|
00006a  f7fffffe          BL       ptpdStartup
00006e  b138              CBZ      r0,|L1.128|
;;;43     	{
;;;44     		rt_tsk_lock();
000070  f7fffffe          BL       rt_tsk_lock
;;;45     		printf("PTPD: startup failed");
000074  a01a              ADR      r0,|L1.224|
000076  f7fffffe          BL       __2printf
;;;46     		rt_tsk_unlock();
00007a  f7fffffe          BL       rt_tsk_unlock
;;;47     		return;
;;;48     	}
;;;49     
;;;50     #ifdef USE_DHCP
;;;51     	// If DHCP, wait until the default interface has an IP address.
;;;52     	while (!netif_default->ip_addr.addr)
;;;53     	{
;;;54     		// Sleep for 500 milliseconds.
;;;55     		sys_msleep(500);
;;;56     	}
;;;57     #endif
;;;58     
;;;59     	// Loop forever.
;;;60     	for (;;)
;;;61     	{
;;;62     		void *msg;
;;;63     
;;;64     		// Process the current state.
;;;65     		do
;;;66     		{
;;;67     			// doState() has a switch for the actions and events to be
;;;68     			// checked for 'port_state'. The actions and events may or may not change
;;;69     			// 'port_state' by calling toState(), but once they are done we loop around
;;;70     			// again and perform the actions required for the new 'port_state'.
;;;71     			doState(&ptpClock);
;;;72     		}
;;;73     		while (netSelect(&ptpClock.netPath, 0) > 0);
;;;74     		
;;;75     		// Wait up to 100ms for something to do, then do something anyway.
;;;76     		sys_arch_mbox_fetch(&ptp_alert_queue, &msg, 100);
;;;77     	}
;;;78     }
00007e  bd38              POP      {r3-r5,pc}
                  |L1.128|
000080  bf00              NOP                            ;60
                  |L1.130|
000082  bf00              NOP                            ;65
                  |L1.132|
000084  4815              LDR      r0,|L1.220|
000086  f7fffffe          BL       doState
00008a  2100              MOVS     r1,#0                 ;73
00008c  481a              LDR      r0,|L1.248|
00008e  f7fffffe          BL       netSelect
000092  2800              CMP      r0,#0                 ;73
000094  dcf6              BGT      |L1.132|
000096  2264              MOVS     r2,#0x64              ;76
000098  4669              MOV      r1,sp                 ;76
00009a  4818              LDR      r0,|L1.252|
00009c  f7fffffe          BL       sys_arch_mbox_fetch
0000a0  e7ef              B        |L1.130|
;;;79     
                          ENDP

                  ptpd_alert PROC
;;;80     // Notify the PTP thread of a pending operation.
;;;81     void ptpd_alert(void)
0000a2  b510              PUSH     {r4,lr}
;;;82     {
;;;83     	// Send a message to the alert queue to wake up the PTP thread.
;;;84     	sys_mbox_trypost(&ptp_alert_queue, NULL);
0000a4  2100              MOVS     r1,#0
0000a6  4815              LDR      r0,|L1.252|
0000a8  f7fffffe          BL       sys_mbox_trypost
;;;85     }
0000ac  bd10              POP      {r4,pc}
;;;86     
                          ENDP

                  ptpd_init PROC
;;;87     void ptpd_init(void)
0000ae  b508              PUSH     {r3,lr}
;;;88     {
;;;89     	// Create the alert queue mailbox.
;;;90       if (sys_mbox_new(&ptp_alert_queue, 8) != ERR_OK)
0000b0  2108              MOVS     r1,#8
0000b2  4812              LDR      r0,|L1.252|
0000b4  f7fffffe          BL       sys_mbox_new
0000b8  b110              CBZ      r0,|L1.192|
;;;91     	{
;;;92         printf("PTPD: failed to create ptp_alert_queue mbox");
0000ba  a011              ADR      r0,|L1.256|
0000bc  f7fffffe          BL       __2printf
                  |L1.192|
;;;93       }
;;;94     
;;;95     	// Create the PTP daemon thread.
;;;96     	sys_thread_new("PTPD", ptpd_thread, NULL, DEFAULT_THREAD_STACKSIZE * 2, osPriorityAboveNormal);
0000c0  2001              MOVS     r0,#1
0000c2  02c3              LSLS     r3,r0,#11
0000c4  2200              MOVS     r2,#0
0000c6  4919              LDR      r1,|L1.300|
0000c8  9000              STR      r0,[sp,#0]
0000ca  a019              ADR      r0,|L1.304|
0000cc  f7fffffe          BL       sys_thread_new
;;;97     }
0000d0  bd08              POP      {r3,pc}
;;;98     
                          ENDP

0000d2  0000              DCW      0x0000
                  |L1.212|
                          DCD      rtOpts
                  |L1.216|
                          DCD      ptpForeignRecords
                  |L1.220|
                          DCD      ptpClock
                  |L1.224|
0000e0  50545044          DCB      "PTPD: startup failed",0
0000e4  3a207374
0000e8  61727475
0000ec  70206661
0000f0  696c6564
0000f4  00      
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L1.248|
                          DCD      ptpClock+0x3cc
                  |L1.252|
                          DCD      ptp_alert_queue
                  |L1.256|
000100  50545044          DCB      "PTPD: failed to create ptp_alert_queue mbox",0
000104  3a206661
000108  696c6564
00010c  20746f20
000110  63726561
000114  74652070
000118  74705f61
00011c  6c657274
000120  5f717565
000124  7565206d
000128  626f7800
                  |L1.300|
                          DCD      ptpd_thread
                  |L1.304|
000130  50545044          DCB      "PTPD",0
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  ptp_alert_queue
                          %        92
                  rtOpts
                          %        68
                  ptpClock
                          %        1128
                  ptpForeignRecords
                          %        440

                          AREA ||.data||, DATA, ALIGN=2

                  PTPTimer
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\libraries\\ptpd-2.0.0\\src\\ptpd.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_ptpd_c_PTPTimer____REV16|
#line 114 "..\\..\\libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_ptpd_c_PTPTimer____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_ptpd_c_PTPTimer____REVSH|
#line 128
|__asm___6_ptpd_c_PTPTimer____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

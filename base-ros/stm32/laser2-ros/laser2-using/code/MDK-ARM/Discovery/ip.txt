; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\ip.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\ip.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\ip.crf ..\..\libraries\lwip-1.4.1\src\core\ipv4\ip.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ip_route PROC
;;;123    struct netif *
;;;124    ip_route(ip_addr_t *dest)
000000  b510              PUSH     {r4,lr}
;;;125    {
000002  4602              MOV      r2,r0
;;;126      struct netif *netif;
;;;127    
;;;128    #ifdef LWIP_HOOK_IP4_ROUTE
;;;129      netif = LWIP_HOOK_IP4_ROUTE(dest);
;;;130      if (netif != NULL) {
;;;131        return netif;
;;;132      }
;;;133    #endif
;;;134    
;;;135      /* iterate through netifs */
;;;136      for (netif = netif_list; netif != NULL; netif = netif->next) {
000004  48f5              LDR      r0,|L1.988|
000006  6801              LDR      r1,[r0,#0]  ; netif_list
000008  e00f              B        |L1.42|
                  |L1.10|
;;;137        /* network mask matches? */
;;;138        if (netif_is_up(netif)) {
00000a  f891002d          LDRB     r0,[r1,#0x2d]
00000e  f0000001          AND      r0,r0,#1
000012  b148              CBZ      r0,|L1.40|
;;;139          if (ip_addr_netcmp(dest, &(netif->ip_addr), &(netif->netmask))) {
000014  6810              LDR      r0,[r2,#0]
000016  688b              LDR      r3,[r1,#8]
000018  4018              ANDS     r0,r0,r3
00001a  e9d13401          LDRD     r3,r4,[r1,#4]
00001e  4023              ANDS     r3,r3,r4
000020  4298              CMP      r0,r3
000022  d101              BNE      |L1.40|
;;;140            /* return netif on which to forward IP packet */
;;;141            return netif;
000024  4608              MOV      r0,r1
                  |L1.38|
;;;142          }
;;;143        }
;;;144      }
;;;145      if ((netif_default == NULL) || (!netif_is_up(netif_default))) {
;;;146        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;147          ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
;;;148        IP_STATS_INC(ip.rterr);
;;;149        snmp_inc_ipoutnoroutes();
;;;150        return NULL;
;;;151      }
;;;152      /* no matching netif found, use default netif */
;;;153      return netif_default;
;;;154    }
000026  bd10              POP      {r4,pc}
                  |L1.40|
000028  6809              LDR      r1,[r1,#0]            ;136
                  |L1.42|
00002a  2900              CMP      r1,#0                 ;136
00002c  d1ed              BNE      |L1.10|
00002e  48ec              LDR      r0,|L1.992|
000030  6800              LDR      r0,[r0,#0]            ;145  ; netif_default
000032  b130              CBZ      r0,|L1.66|
000034  48ea              LDR      r0,|L1.992|
000036  6800              LDR      r0,[r0,#0]            ;145  ; netif_default
000038  f890002d          LDRB     r0,[r0,#0x2d]         ;145
00003c  f0000001          AND      r0,r0,#1              ;145
000040  b918              CBNZ     r0,|L1.74|
                  |L1.66|
000042  bf00              NOP                            ;146
000044  bf00              NOP                            ;146
000046  2000              MOVS     r0,#0                 ;150
000048  e7ed              B        |L1.38|
                  |L1.74|
00004a  48e5              LDR      r0,|L1.992|
00004c  6800              LDR      r0,[r0,#0]            ;153  ; netif_default
00004e  e7ea              B        |L1.38|
;;;155    
                          ENDP

                  ip_input PROC
;;;304    err_t
;;;305    ip_input(struct pbuf *p, struct netif *inp)
000050  e92d5ff0          PUSH     {r4-r12,lr}
;;;306    {
000054  4607              MOV      r7,r0
000056  460e              MOV      r6,r1
;;;307      struct ip_hdr *iphdr;
;;;308      struct netif *netif;
;;;309      u16_t iphdr_hlen;
;;;310      u16_t iphdr_len;
;;;311    #if IP_ACCEPT_LINK_LAYER_ADDRESSING
;;;312      int check_ip_src=1;
000058  f04f0a01          MOV      r10,#1
;;;313    #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
;;;314    
;;;315      IP_STATS_INC(ip.recv);
;;;316      snmp_inc_ipinreceives();
;;;317    
;;;318      /* identify the IP header */
;;;319      iphdr = (struct ip_hdr *)p->payload;
00005c  687d              LDR      r5,[r7,#4]
;;;320      if (IPH_V(iphdr) != 4) {
00005e  7828              LDRB     r0,[r5,#0]
000060  2104              MOVS     r1,#4
000062  ebb11f20          CMP      r1,r0,ASR #4
000066  d007              BEQ      |L1.120|
;;;321        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", IPH_V(iphdr)));
000068  bf00              NOP      
00006a  bf00              NOP      
;;;322        ip_debug_print(p);
;;;323        pbuf_free(p);
00006c  4638              MOV      r0,r7
00006e  f7fffffe          BL       pbuf_free
;;;324        IP_STATS_INC(ip.err);
;;;325        IP_STATS_INC(ip.drop);
;;;326        snmp_inc_ipinhdrerrors();
;;;327        return ERR_OK;
000072  2000              MOVS     r0,#0
                  |L1.116|
;;;328      }
;;;329    
;;;330    #ifdef LWIP_HOOK_IP4_INPUT
;;;331      if (LWIP_HOOK_IP4_INPUT(p, inp)) {
;;;332        /* the packet has been eaten */
;;;333        return ERR_OK;
;;;334      }
;;;335    #endif
;;;336    
;;;337      /* obtain IP header length in number of 32-bit words */
;;;338      iphdr_hlen = IPH_HL(iphdr);
;;;339      /* calculate IP header length in bytes */
;;;340      iphdr_hlen *= 4;
;;;341      /* obtain ip length in bytes */
;;;342      iphdr_len = ntohs(IPH_LEN(iphdr));
;;;343    
;;;344      /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
;;;345      if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len)) {
;;;346        if (iphdr_hlen > p->len) {
;;;347          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;348            ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
;;;349            iphdr_hlen, p->len));
;;;350        }
;;;351        if (iphdr_len > p->tot_len) {
;;;352          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;353            ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
;;;354            iphdr_len, p->tot_len));
;;;355        }
;;;356        /* free (drop) packet pbufs */
;;;357        pbuf_free(p);
;;;358        IP_STATS_INC(ip.lenerr);
;;;359        IP_STATS_INC(ip.drop);
;;;360        snmp_inc_ipindiscards();
;;;361        return ERR_OK;
;;;362      }
;;;363    
;;;364      /* verify checksum */
;;;365    #if CHECKSUM_CHECK_IP
;;;366      if (inet_chksum(iphdr, iphdr_hlen) != 0) {
;;;367    
;;;368        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;369          ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
;;;370        ip_debug_print(p);
;;;371        pbuf_free(p);
;;;372        IP_STATS_INC(ip.chkerr);
;;;373        IP_STATS_INC(ip.drop);
;;;374        snmp_inc_ipinhdrerrors();
;;;375        return ERR_OK;
;;;376      }
;;;377    #endif
;;;378    
;;;379      /* Trim pbuf. This should have been done at the netif layer,
;;;380       * but we'll do it anyway just to be sure that its done. */
;;;381      pbuf_realloc(p, iphdr_len);
;;;382    
;;;383      /* copy IP addresses to aligned ip_addr_t */
;;;384      ip_addr_copy(current_iphdr_dest, iphdr->dest);
;;;385      ip_addr_copy(current_iphdr_src, iphdr->src);
;;;386    
;;;387      /* match packet against an interface, i.e. is this packet for us? */
;;;388    #if LWIP_IGMP
;;;389      if (ip_addr_ismulticast(&current_iphdr_dest)) {
;;;390        if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, &current_iphdr_dest))) {
;;;391          netif = inp;
;;;392        } else {
;;;393          netif = NULL;
;;;394        }
;;;395      } else
;;;396    #endif /* LWIP_IGMP */
;;;397      {
;;;398        /* start trying with inp. if that's not acceptable, start walking the
;;;399           list of configured netifs.
;;;400           'first' is used as a boolean to mark whether we started walking the list */
;;;401        int first = 1;
;;;402        netif = inp;
;;;403        do {
;;;404          LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
;;;405              ip4_addr_get_u32(&iphdr->dest), ip4_addr_get_u32(&netif->ip_addr),
;;;406              ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(&netif->netmask),
;;;407              ip4_addr_get_u32(&netif->ip_addr) & ip4_addr_get_u32(&netif->netmask),
;;;408              ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(&netif->netmask)));
;;;409    
;;;410          /* interface is up and configured? */
;;;411          if ((netif_is_up(netif)) && (!ip_addr_isany(&(netif->ip_addr)))) {
;;;412            /* unicast to this interface address? */
;;;413            if (ip_addr_cmp(&current_iphdr_dest, &(netif->ip_addr)) ||
;;;414                /* or broadcast on this interface network address? */
;;;415                ip_addr_isbroadcast(&current_iphdr_dest, netif)) {
;;;416              LWIP_DEBUGF(IP_DEBUG, ("ip_input: packet accepted on interface %c%c\n",
;;;417                  netif->name[0], netif->name[1]));
;;;418              /* break out of for loop */
;;;419              break;
;;;420            }
;;;421    #if LWIP_AUTOIP
;;;422            /* connections to link-local addresses must persist after changing
;;;423               the netif's address (RFC3927 ch. 1.9) */
;;;424            if ((netif->autoip != NULL) &&
;;;425                ip_addr_cmp(&current_iphdr_dest, &(netif->autoip->llipaddr))) {
;;;426              LWIP_DEBUGF(IP_DEBUG, ("ip_input: LLA packet accepted on interface %c%c\n",
;;;427                  netif->name[0], netif->name[1]));
;;;428              /* break out of for loop */
;;;429              break;
;;;430            }
;;;431    #endif /* LWIP_AUTOIP */
;;;432          }
;;;433          if (first) {
;;;434            first = 0;
;;;435            netif = netif_list;
;;;436          } else {
;;;437            netif = netif->next;
;;;438          }
;;;439          if (netif == inp) {
;;;440            netif = netif->next;
;;;441          }
;;;442        } while(netif != NULL);
;;;443      }
;;;444    
;;;445    #if IP_ACCEPT_LINK_LAYER_ADDRESSING
;;;446      /* Pass DHCP messages regardless of destination address. DHCP traffic is addressed
;;;447       * using link layer addressing (such as Ethernet MAC) so we must not filter on IP.
;;;448       * According to RFC 1542 section 3.1.1, referred by RFC 2131).
;;;449       *
;;;450       * If you want to accept private broadcast communication while a netif is down,
;;;451       * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
;;;452       *
;;;453       * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
;;;454       */
;;;455      if (netif == NULL) {
;;;456        /* remote port is DHCP server? */
;;;457        if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
;;;458          struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
;;;459          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: UDP packet to DHCP client port %"U16_F"\n",
;;;460            ntohs(udphdr->dest)));
;;;461          if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
;;;462            LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: DHCP packet accepted.\n"));
;;;463            netif = inp;
;;;464            check_ip_src = 0;
;;;465          }
;;;466        }
;;;467      }
;;;468    #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
;;;469    
;;;470      /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
;;;471    #if IP_ACCEPT_LINK_LAYER_ADDRESSING
;;;472      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
;;;473      if (check_ip_src && !ip_addr_isany(&current_iphdr_src))
;;;474    #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
;;;475      {  if ((ip_addr_isbroadcast(&current_iphdr_src, inp)) ||
;;;476             (ip_addr_ismulticast(&current_iphdr_src))) {
;;;477          /* packet source is not valid */
;;;478          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip_input: packet source is not valid.\n"));
;;;479          /* free (drop) packet pbufs */
;;;480          pbuf_free(p);
;;;481          IP_STATS_INC(ip.drop);
;;;482          snmp_inc_ipinaddrerrors();
;;;483          snmp_inc_ipindiscards();
;;;484          return ERR_OK;
;;;485        }
;;;486      }
;;;487    
;;;488      /* packet not for us? */
;;;489      if (netif == NULL) {
;;;490        /* packet not for us, route or discard */
;;;491        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip_input: packet not for us.\n"));
;;;492    #if IP_FORWARD
;;;493        /* non-broadcast packet? */
;;;494        if (!ip_addr_isbroadcast(&current_iphdr_dest, inp)) {
;;;495          /* try to forward IP packet on (other) interfaces */
;;;496          ip_forward(p, iphdr, inp);
;;;497        } else
;;;498    #endif /* IP_FORWARD */
;;;499        {
;;;500          snmp_inc_ipinaddrerrors();
;;;501          snmp_inc_ipindiscards();
;;;502        }
;;;503        pbuf_free(p);
;;;504        return ERR_OK;
;;;505      }
;;;506      /* packet consists of multiple fragments? */
;;;507      if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
;;;508    #if IP_REASSEMBLY /* packet fragment reassembly code present? */
;;;509        LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip_reass()\n",
;;;510          ntohs(IPH_ID(iphdr)), p->tot_len, ntohs(IPH_LEN(iphdr)), !!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8));
;;;511        /* reassemble the packet*/
;;;512        p = ip_reass(p);
;;;513        /* packet not fully reassembled yet? */
;;;514        if (p == NULL) {
;;;515          return ERR_OK;
;;;516        }
;;;517        iphdr = (struct ip_hdr *)p->payload;
;;;518    #else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
;;;519        pbuf_free(p);
;;;520        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since it was fragmented (0x%"X16_F") (while IP_REASSEMBLY == 0).\n",
;;;521          ntohs(IPH_OFFSET(iphdr))));
;;;522        IP_STATS_INC(ip.opterr);
;;;523        IP_STATS_INC(ip.drop);
;;;524        /* unsupported protocol feature */
;;;525        snmp_inc_ipinunknownprotos();
;;;526        return ERR_OK;
;;;527    #endif /* IP_REASSEMBLY */
;;;528      }
;;;529    
;;;530    #if IP_OPTIONS_ALLOWED == 0 /* no support for IP options in the IP header? */
;;;531    
;;;532    #if LWIP_IGMP
;;;533      /* there is an extra "router alert" option in IGMP messages which we allow for but do not police */
;;;534      if((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
;;;535    #else
;;;536      if (iphdr_hlen > IP_HLEN) {
;;;537    #endif /* LWIP_IGMP */
;;;538        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options (while IP_OPTIONS_ALLOWED == 0).\n"));
;;;539        pbuf_free(p);
;;;540        IP_STATS_INC(ip.opterr);
;;;541        IP_STATS_INC(ip.drop);
;;;542        /* unsupported protocol feature */
;;;543        snmp_inc_ipinunknownprotos();
;;;544        return ERR_OK;
;;;545      }
;;;546    #endif /* IP_OPTIONS_ALLOWED == 0 */
;;;547    
;;;548      /* send to upper layers */
;;;549      LWIP_DEBUGF(IP_DEBUG, ("ip_input: \n"));
;;;550      ip_debug_print(p);
;;;551      LWIP_DEBUGF(IP_DEBUG, ("ip_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
;;;552    
;;;553      current_netif = inp;
;;;554      current_header = iphdr;
;;;555    
;;;556    #if LWIP_RAW
;;;557      /* raw input did not eat the packet? */
;;;558      if (raw_input(p, inp) == 0)
;;;559    #endif /* LWIP_RAW */
;;;560      {
;;;561        switch (IPH_PROTO(iphdr)) {
;;;562    #if LWIP_UDP
;;;563        case IP_PROTO_UDP:
;;;564    #if LWIP_UDPLITE
;;;565        case IP_PROTO_UDPLITE:
;;;566    #endif /* LWIP_UDPLITE */
;;;567          snmp_inc_ipindelivers();
;;;568          udp_input(p, inp);
;;;569          break;
;;;570    #endif /* LWIP_UDP */
;;;571    #if LWIP_TCP
;;;572        case IP_PROTO_TCP:
;;;573          snmp_inc_ipindelivers();
;;;574          tcp_input(p, inp);
;;;575          break;
;;;576    #endif /* LWIP_TCP */
;;;577    #if LWIP_ICMP
;;;578        case IP_PROTO_ICMP:
;;;579          snmp_inc_ipindelivers();
;;;580          icmp_input(p, inp);
;;;581          break;
;;;582    #endif /* LWIP_ICMP */
;;;583    #if LWIP_IGMP
;;;584        case IP_PROTO_IGMP:
;;;585          igmp_input(p, inp, &current_iphdr_dest);
;;;586          break;
;;;587    #endif /* LWIP_IGMP */
;;;588        default:
;;;589    #if LWIP_ICMP
;;;590          /* send ICMP destination protocol unreachable unless is was a broadcast */
;;;591          if (!ip_addr_isbroadcast(&current_iphdr_dest, inp) &&
;;;592              !ip_addr_ismulticast(&current_iphdr_dest)) {
;;;593            p->payload = iphdr;
;;;594            icmp_dest_unreach(p, ICMP_DUR_PROTO);
;;;595          }
;;;596    #endif /* LWIP_ICMP */
;;;597          pbuf_free(p);
;;;598    
;;;599          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", IPH_PROTO(iphdr)));
;;;600    
;;;601          IP_STATS_INC(ip.proterr);
;;;602          IP_STATS_INC(ip.drop);
;;;603          snmp_inc_ipinunknownprotos();
;;;604        }
;;;605      }
;;;606    
;;;607      current_netif = NULL;
;;;608      current_header = NULL;
;;;609      ip_addr_set_any(&current_iphdr_src);
;;;610      ip_addr_set_any(&current_iphdr_dest);
;;;611    
;;;612      return ERR_OK;
;;;613    }
000074  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.120|
000078  7828              LDRB     r0,[r5,#0]            ;338
00007a  f000080f          AND      r8,r0,#0xf            ;338
00007e  f64f70ff          MOV      r0,#0xffff            ;340
000082  ea000888          AND      r8,r0,r8,LSL #2       ;340
000086  8868              LDRH     r0,[r5,#2]            ;342
000088  f7fffffe          BL       lwip_ntohs
00008c  4681              MOV      r9,r0                 ;342
00008e  8978              LDRH     r0,[r7,#0xa]          ;345
000090  4540              CMP      r0,r8                 ;345
000092  db02              BLT      |L1.154|
000094  8938              LDRH     r0,[r7,#8]            ;345
000096  4548              CMP      r0,r9                 ;345
000098  da0e              BGE      |L1.184|
                  |L1.154|
00009a  8978              LDRH     r0,[r7,#0xa]          ;346
00009c  4540              CMP      r0,r8                 ;346
00009e  da01              BGE      |L1.164|
0000a0  bf00              NOP                            ;347
0000a2  bf00              NOP                            ;347
                  |L1.164|
0000a4  8938              LDRH     r0,[r7,#8]            ;351
0000a6  4548              CMP      r0,r9                 ;351
0000a8  da01              BGE      |L1.174|
0000aa  bf00              NOP                            ;352
0000ac  bf00              NOP                            ;352
                  |L1.174|
0000ae  4638              MOV      r0,r7                 ;357
0000b0  f7fffffe          BL       pbuf_free
0000b4  2000              MOVS     r0,#0                 ;361
0000b6  e7dd              B        |L1.116|
                  |L1.184|
0000b8  4649              MOV      r1,r9                 ;381
0000ba  4638              MOV      r0,r7                 ;381
0000bc  f7fffffe          BL       pbuf_realloc
0000c0  6928              LDR      r0,[r5,#0x10]         ;384
0000c2  49c8              LDR      r1,|L1.996|
0000c4  6008              STR      r0,[r1,#0]            ;384  ; current_iphdr_dest
0000c6  68e8              LDR      r0,[r5,#0xc]          ;385
0000c8  49c7              LDR      r1,|L1.1000|
0000ca  6008              STR      r0,[r1,#0]            ;385  ; current_iphdr_src
0000cc  48c5              LDR      r0,|L1.996|
0000ce  7800              LDRB     r0,[r0,#0]            ;389  ; current_iphdr_dest
0000d0  f00000f0          AND      r0,r0,#0xf0           ;389
0000d4  28e0              CMP      r0,#0xe0              ;389
0000d6  d10d              BNE      |L1.244|
0000d8  f896002d          LDRB     r0,[r6,#0x2d]         ;390
0000dc  f0000080          AND      r0,r0,#0x80           ;390
0000e0  b130              CBZ      r0,|L1.240|
0000e2  49c0              LDR      r1,|L1.996|
0000e4  4630              MOV      r0,r6                 ;390
0000e6  f7fffffe          BL       igmp_lookfor_group
0000ea  b108              CBZ      r0,|L1.240|
0000ec  4634              MOV      r4,r6                 ;391
0000ee  e02e              B        |L1.334|
                  |L1.240|
0000f0  2400              MOVS     r4,#0                 ;393
0000f2  e02c              B        |L1.334|
                  |L1.244|
0000f4  f04f0b01          MOV      r11,#1                ;401
0000f8  4634              MOV      r4,r6                 ;402
0000fa  bf00              NOP                            ;403
                  |L1.252|
0000fc  bf00              NOP                            ;404
0000fe  bf00              NOP                            ;404
000100  f894002d          LDRB     r0,[r4,#0x2d]         ;411
000104  f0000001          AND      r0,r0,#1              ;411
000108  b188              CBZ      r0,|L1.302|
00010a  1d20              ADDS     r0,r4,#4              ;411
00010c  b178              CBZ      r0,|L1.302|
00010e  6860              LDR      r0,[r4,#4]            ;411
000110  b168              CBZ      r0,|L1.302|
000112  48b4              LDR      r0,|L1.996|
000114  6800              LDR      r0,[r0,#0]            ;413  ; current_iphdr_dest
000116  6861              LDR      r1,[r4,#4]            ;413
000118  4288              CMP      r0,r1                 ;413
00011a  d005              BEQ      |L1.296|
00011c  49b1              LDR      r1,|L1.996|
00011e  6808              LDR      r0,[r1,#0]            ;415  ; current_iphdr_dest
000120  4621              MOV      r1,r4                 ;415
000122  f7fffffe          BL       ip4_addr_isbroadcast
000126  b110              CBZ      r0,|L1.302|
                  |L1.296|
000128  bf00              NOP                            ;416
00012a  bf00              NOP                            ;416
00012c  e00d              B        |L1.330|
                  |L1.302|
00012e  f1bb0f00          CMP      r11,#0                ;433
000132  d004              BEQ      |L1.318|
000134  f04f0b00          MOV      r11,#0                ;434
000138  48a8              LDR      r0,|L1.988|
00013a  6804              LDR      r4,[r0,#0]            ;435  ; netif_list
00013c  e000              B        |L1.320|
                  |L1.318|
00013e  6824              LDR      r4,[r4,#0]            ;437
                  |L1.320|
000140  42b4              CMP      r4,r6                 ;439
000142  d100              BNE      |L1.326|
000144  6824              LDR      r4,[r4,#0]            ;440
                  |L1.326|
000146  2c00              CMP      r4,#0                 ;442
000148  d1d8              BNE      |L1.252|
                  |L1.330|
00014a  bf00              NOP                            ;419
00014c  bf00              NOP                            ;443
                  |L1.334|
00014e  b984              CBNZ     r4,|L1.370|
000150  7a68              LDRB     r0,[r5,#9]            ;457
000152  2811              CMP      r0,#0x11              ;457
000154  d10d              BNE      |L1.370|
000156  eb050008          ADD      r0,r5,r8              ;458
00015a  bf00              NOP                            ;459
00015c  bf00              NOP                            ;459
00015e  8841              LDRH     r1,[r0,#2]            ;461
000160  f5b14f88          CMP      r1,#0x4400            ;461
000164  d104              BNE      |L1.368|
000166  bf00              NOP                            ;462
000168  bf00              NOP                            ;462
00016a  4634              MOV      r4,r6                 ;463
00016c  f04f0a00          MOV      r10,#0                ;464
                  |L1.368|
000170  bf00              NOP                            ;466
                  |L1.370|
000172  f1ba0f00          CMP      r10,#0                ;473
000176  d015              BEQ      |L1.420|
000178  489b              LDR      r0,|L1.1000|
00017a  6800              LDR      r0,[r0,#0]            ;473  ; current_iphdr_src
00017c  b190              CBZ      r0,|L1.420|
00017e  499a              LDR      r1,|L1.1000|
000180  6808              LDR      r0,[r1,#0]            ;475  ; current_iphdr_src
000182  4631              MOV      r1,r6                 ;475
000184  f7fffffe          BL       ip4_addr_isbroadcast
000188  b928              CBNZ     r0,|L1.406|
00018a  4897              LDR      r0,|L1.1000|
00018c  7800              LDRB     r0,[r0,#0]            ;476  ; current_iphdr_src
00018e  f00000f0          AND      r0,r0,#0xf0           ;476
000192  28e0              CMP      r0,#0xe0              ;476
000194  d106              BNE      |L1.420|
                  |L1.406|
000196  bf00              NOP                            ;478
000198  bf00              NOP                            ;478
00019a  4638              MOV      r0,r7                 ;480
00019c  f7fffffe          BL       pbuf_free
0001a0  2000              MOVS     r0,#0                 ;484
0001a2  e767              B        |L1.116|
                  |L1.420|
0001a4  b934              CBNZ     r4,|L1.436|
0001a6  bf00              NOP                            ;491
0001a8  bf00              NOP                            ;491
0001aa  4638              MOV      r0,r7                 ;503
0001ac  f7fffffe          BL       pbuf_free
0001b0  2000              MOVS     r0,#0                 ;504
0001b2  e75f              B        |L1.116|
                  |L1.436|
0001b4  88e8              LDRH     r0,[r5,#6]            ;507
0001b6  f64f713f          MOV      r1,#0xff3f            ;507
0001ba  4008              ANDS     r0,r0,r1              ;507
0001bc  b130              CBZ      r0,|L1.460|
0001be  4638              MOV      r0,r7                 ;519
0001c0  f7fffffe          BL       pbuf_free
0001c4  bf00              NOP                            ;520
0001c6  bf00              NOP                            ;520
0001c8  2000              MOVS     r0,#0                 ;526
0001ca  e753              B        |L1.116|
                  |L1.460|
0001cc  bf00              NOP                            ;549
0001ce  bf00              NOP                            ;549
0001d0  bf00              NOP                            ;551
0001d2  bf00              NOP                            ;551
0001d4  4885              LDR      r0,|L1.1004|
0001d6  6006              STR      r6,[r0,#0]            ;553  ; current_netif
0001d8  4885              LDR      r0,|L1.1008|
0001da  6005              STR      r5,[r0,#0]            ;554  ; current_header
0001dc  4631              MOV      r1,r6                 ;558
0001de  4638              MOV      r0,r7                 ;558
0001e0  f7fffffe          BL       raw_input
0001e4  bba8              CBNZ     r0,|L1.594|
0001e6  7a68              LDRB     r0,[r5,#9]            ;561
0001e8  2801              CMP      r0,#1                 ;561
0001ea  d00f              BEQ      |L1.524|
0001ec  2802              CMP      r0,#2                 ;561
0001ee  d012              BEQ      |L1.534|
0001f0  2806              CMP      r0,#6                 ;561
0001f2  d006              BEQ      |L1.514|
0001f4  2811              CMP      r0,#0x11              ;561
0001f6  d114              BNE      |L1.546|
0001f8  4631              MOV      r1,r6                 ;568
0001fa  4638              MOV      r0,r7                 ;568
0001fc  f7fffffe          BL       udp_input
000200  e026              B        |L1.592|
                  |L1.514|
000202  4631              MOV      r1,r6                 ;574
000204  4638              MOV      r0,r7                 ;574
000206  f7fffffe          BL       tcp_input
00020a  e021              B        |L1.592|
                  |L1.524|
00020c  4631              MOV      r1,r6                 ;580
00020e  4638              MOV      r0,r7                 ;580
000210  f7fffffe          BL       icmp_input
000214  e01c              B        |L1.592|
                  |L1.534|
000216  4a73              LDR      r2,|L1.996|
000218  4631              MOV      r1,r6                 ;585
00021a  4638              MOV      r0,r7                 ;585
00021c  f7fffffe          BL       igmp_input
000220  e016              B        |L1.592|
                  |L1.546|
000222  4970              LDR      r1,|L1.996|
000224  6808              LDR      r0,[r1,#0]            ;591  ; current_iphdr_dest
000226  4631              MOV      r1,r6                 ;591
000228  f7fffffe          BL       ip4_addr_isbroadcast
00022c  b950              CBNZ     r0,|L1.580|
00022e  486d              LDR      r0,|L1.996|
000230  7800              LDRB     r0,[r0,#0]            ;592  ; current_iphdr_dest
000232  f00000f0          AND      r0,r0,#0xf0           ;592
000236  28e0              CMP      r0,#0xe0              ;592
000238  d004              BEQ      |L1.580|
00023a  607d              STR      r5,[r7,#4]            ;593
00023c  2102              MOVS     r1,#2                 ;594
00023e  4638              MOV      r0,r7                 ;594
000240  f7fffffe          BL       icmp_dest_unreach
                  |L1.580|
000244  4638              MOV      r0,r7                 ;597
000246  f7fffffe          BL       pbuf_free
00024a  bf00              NOP                            ;599
00024c  bf00              NOP                            ;599
00024e  bf00              NOP                            ;561
                  |L1.592|
000250  bf00              NOP                            ;569
                  |L1.594|
000252  2000              MOVS     r0,#0                 ;607
000254  4965              LDR      r1,|L1.1004|
000256  6008              STR      r0,[r1,#0]            ;607  ; current_netif
000258  4965              LDR      r1,|L1.1008|
00025a  6008              STR      r0,[r1,#0]            ;608  ; current_header
00025c  4962              LDR      r1,|L1.1000|
00025e  6008              STR      r0,[r1,#0]            ;609  ; current_iphdr_src
000260  4960              LDR      r1,|L1.996|
000262  6008              STR      r0,[r1,#0]            ;610  ; current_iphdr_dest
000264  bf00              NOP                            ;612
000266  e705              B        |L1.116|
;;;614    
                          ENDP

                  ip_output_if_opt PROC
;;;654     */
;;;655    err_t ip_output_if_opt(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
000268  e92d4fff          PUSH     {r0-r11,lr}
;;;656           u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
;;;657           u16_t optlen)
;;;658    {
00026c  b081              SUB      sp,sp,#4
00026e  4605              MOV      r5,r0
000270  460f              MOV      r7,r1
000272  4692              MOV      r10,r2
000274  f8ddb040          LDR      r11,[sp,#0x40]
000278  9e12              LDR      r6,[sp,#0x48]
;;;659    #endif /* IP_OPTIONS_SEND */
;;;660      struct ip_hdr *iphdr;
;;;661      ip_addr_t dest_addr;
;;;662    #if CHECKSUM_GEN_IP_INLINE
;;;663      u32_t chk_sum = 0;
;;;664    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;665    
;;;666      /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
;;;667         gets altered as the packet is passed down the stack */
;;;668      LWIP_ASSERT("p->ref == 1", p->ref == 1);
00027a  bf00              NOP      
00027c  bf00              NOP      
;;;669    
;;;670      snmp_inc_ipoutrequests();
;;;671    
;;;672      /* Should the IP header be generated or is it already included in p? */
;;;673      if (dest != IP_HDRINCL) {
00027e  f1ba0f00          CMP      r10,#0
000282  d063              BEQ      |L1.844|
;;;674        u16_t ip_hlen = IP_HLEN;
000284  f04f0814          MOV      r8,#0x14
;;;675    #if IP_OPTIONS_SEND
;;;676        u16_t optlen_aligned = 0;
000288  f04f0900          MOV      r9,#0
;;;677        if (optlen != 0) {
00028c  b316              CBZ      r6,|L1.724|
;;;678    #if CHECKSUM_GEN_IP_INLINE
;;;679          int i;
;;;680    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;681          /* round up to a multiple of 4 */
;;;682          optlen_aligned = ((optlen + 3) & ~3);
00028e  1cf0              ADDS     r0,r6,#3
000290  f0200003          BIC      r0,r0,#3
000294  fa1ff980          UXTH     r9,r0
;;;683          ip_hlen += optlen_aligned;
000298  eb080009          ADD      r0,r8,r9
00029c  fa1ff880          UXTH     r8,r0
;;;684          /* First write in the IP options */
;;;685          if (pbuf_header(p, optlen_aligned)) {
0002a0  fa0ff189          SXTH     r1,r9
0002a4  4628              MOV      r0,r5
0002a6  f7fffffe          BL       pbuf_header
0002aa  b130              CBZ      r0,|L1.698|
;;;686            LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output_if_opt: not enough room for IP options in pbuf\n"));
0002ac  bf00              NOP      
0002ae  bf00              NOP      
;;;687            IP_STATS_INC(ip.err);
;;;688            snmp_inc_ipoutdiscards();
;;;689            return ERR_BUF;
0002b0  f06f0001          MVN      r0,#1
                  |L1.692|
;;;690          }
;;;691          MEMCPY(p->payload, ip_options, optlen);
;;;692          if (optlen < optlen_aligned) {
;;;693            /* zero the remaining bytes */
;;;694            memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
;;;695          }
;;;696    #if CHECKSUM_GEN_IP_INLINE
;;;697          for (i = 0; i < optlen_aligned/2; i++) {
;;;698            chk_sum += ((u16_t*)p->payload)[i];
;;;699          }
;;;700    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;701        }
;;;702    #endif /* IP_OPTIONS_SEND */
;;;703        /* generate IP header */
;;;704        if (pbuf_header(p, IP_HLEN)) {
;;;705          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip_output: not enough room for IP header in pbuf\n"));
;;;706    
;;;707          IP_STATS_INC(ip.err);
;;;708          snmp_inc_ipoutdiscards();
;;;709          return ERR_BUF;
;;;710        }
;;;711    
;;;712        iphdr = (struct ip_hdr *)p->payload;
;;;713        LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
;;;714                   (p->len >= sizeof(struct ip_hdr)));
;;;715    
;;;716        IPH_TTL_SET(iphdr, ttl);
;;;717        IPH_PROTO_SET(iphdr, proto);
;;;718    #if CHECKSUM_GEN_IP_INLINE
;;;719        chk_sum += LWIP_MAKE_U16(proto, ttl);
;;;720    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;721    
;;;722        /* dest cannot be NULL here */
;;;723        ip_addr_copy(iphdr->dest, *dest);
;;;724    #if CHECKSUM_GEN_IP_INLINE
;;;725        chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
;;;726        chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
;;;727    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;728    
;;;729        IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
;;;730        IPH_TOS_SET(iphdr, tos);
;;;731    #if CHECKSUM_GEN_IP_INLINE
;;;732        chk_sum += LWIP_MAKE_U16(tos, iphdr->_v_hl);
;;;733    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;734        IPH_LEN_SET(iphdr, htons(p->tot_len));
;;;735    #if CHECKSUM_GEN_IP_INLINE
;;;736        chk_sum += iphdr->_len;
;;;737    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;738        IPH_OFFSET_SET(iphdr, 0);
;;;739        IPH_ID_SET(iphdr, htons(ip_id));
;;;740    #if CHECKSUM_GEN_IP_INLINE
;;;741        chk_sum += iphdr->_id;
;;;742    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;743        ++ip_id;
;;;744    
;;;745        if (ip_addr_isany(src)) {
;;;746          ip_addr_copy(iphdr->src, netif->ip_addr);
;;;747        } else {
;;;748          /* src cannot be NULL here */
;;;749          ip_addr_copy(iphdr->src, *src);
;;;750        }
;;;751    
;;;752    #if CHECKSUM_GEN_IP_INLINE
;;;753        chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
;;;754        chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
;;;755        chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
;;;756        chk_sum = (chk_sum >> 16) + chk_sum;
;;;757        chk_sum = ~chk_sum;
;;;758        iphdr->_chksum = chk_sum; /* network order */
;;;759    #else /* CHECKSUM_GEN_IP_INLINE */
;;;760        IPH_CHKSUM_SET(iphdr, 0);
;;;761    #if CHECKSUM_GEN_IP
;;;762        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
;;;763    #endif
;;;764    #endif /* CHECKSUM_GEN_IP_INLINE */
;;;765      } else {
;;;766        /* IP header already included in p */
;;;767        iphdr = (struct ip_hdr *)p->payload;
;;;768        ip_addr_copy(dest_addr, iphdr->dest);
;;;769        dest = &dest_addr;
;;;770      }
;;;771    
;;;772      IP_STATS_INC(ip.xmit);
;;;773    
;;;774      LWIP_DEBUGF(IP_DEBUG, ("ip_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], netif->num));
;;;775      ip_debug_print(p);
;;;776    
;;;777    #if ENABLE_LOOPBACK
;;;778      if (ip_addr_cmp(dest, &netif->ip_addr)) {
;;;779        /* Packet to self, enqueue it for loopback */
;;;780        LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
;;;781        return netif_loop_output(netif, p, dest);
;;;782      }
;;;783    #if LWIP_IGMP
;;;784      if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
;;;785        netif_loop_output(netif, p, dest);
;;;786      }
;;;787    #endif /* LWIP_IGMP */
;;;788    #endif /* ENABLE_LOOPBACK */
;;;789    #if IP_FRAG
;;;790      /* don't fragment if interface has mtu set to 0 [loopif] */
;;;791      if (netif->mtu && (p->tot_len > netif->mtu)) {
;;;792        return ip_frag(p, netif, dest);
;;;793      }
;;;794    #endif /* IP_FRAG */
;;;795    
;;;796      LWIP_DEBUGF(IP_DEBUG, ("netif->output()"));
;;;797      return netif->output(netif, p, dest);
;;;798    }
0002b4  b005              ADD      sp,sp,#0x14
0002b6  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.698|
0002ba  4632              MOV      r2,r6                 ;691
0002bc  6868              LDR      r0,[r5,#4]            ;691
0002be  9911              LDR      r1,[sp,#0x44]         ;691
0002c0  f7fffffe          BL       __aeabi_memcpy
0002c4  454e              CMP      r6,r9                 ;692
0002c6  da05              BGE      |L1.724|
0002c8  eba90106          SUB      r1,r9,r6              ;694
0002cc  686a              LDR      r2,[r5,#4]            ;694
0002ce  1990              ADDS     r0,r2,r6              ;694
0002d0  f7fffffe          BL       __aeabi_memclr
                  |L1.724|
0002d4  2114              MOVS     r1,#0x14              ;704
0002d6  4628              MOV      r0,r5                 ;704
0002d8  f7fffffe          BL       pbuf_header
0002dc  b120              CBZ      r0,|L1.744|
0002de  bf00              NOP                            ;705
0002e0  bf00              NOP                            ;705
0002e2  f06f0001          MVN      r0,#1                 ;709
0002e6  e7e5              B        |L1.692|
                  |L1.744|
0002e8  686c              LDR      r4,[r5,#4]            ;712
0002ea  bf00              NOP                            ;713
0002ec  bf00              NOP                            ;713
0002ee  9804              LDR      r0,[sp,#0x10]         ;716
0002f0  7220              STRB     r0,[r4,#8]            ;716
0002f2  980f              LDR      r0,[sp,#0x3c]         ;717
0002f4  7260              STRB     r0,[r4,#9]            ;717
0002f6  f8da0000          LDR      r0,[r10,#0]           ;723
0002fa  6120              STR      r0,[r4,#0x10]         ;723
0002fc  4640              MOV      r0,r8                 ;729
0002fe  ea4f71e8          ASR      r1,r8,#31             ;729
000302  eb087191          ADD      r1,r8,r1,LSR #30      ;729
000306  f3c10187          UBFX     r1,r1,#2,#8           ;729
00030a  f0410140          ORR      r1,r1,#0x40           ;729
00030e  7021              STRB     r1,[r4,#0]            ;729
000310  980e              LDR      r0,[sp,#0x38]         ;730
000312  7060              STRB     r0,[r4,#1]            ;730
000314  8928              LDRH     r0,[r5,#8]            ;734
000316  f7fffffe          BL       lwip_htons
00031a  8060              STRH     r0,[r4,#2]            ;734
00031c  2000              MOVS     r0,#0                 ;738
00031e  80e0              STRH     r0,[r4,#6]            ;738
000320  4834              LDR      r0,|L1.1012|
000322  8800              LDRH     r0,[r0,#0]            ;739  ; ip_id
000324  f7fffffe          BL       lwip_htons
000328  80a0              STRH     r0,[r4,#4]            ;739
00032a  4832              LDR      r0,|L1.1012|
00032c  8800              LDRH     r0,[r0,#0]            ;743  ; ip_id
00032e  1c40              ADDS     r0,r0,#1              ;743
000330  4930              LDR      r1,|L1.1012|
000332  8008              STRH     r0,[r1,#0]            ;743
000334  b10f              CBZ      r7,|L1.826|
000336  6838              LDR      r0,[r7,#0]            ;745
000338  b918              CBNZ     r0,|L1.834|
                  |L1.826|
00033a  f8db0004          LDR      r0,[r11,#4]           ;746
00033e  60e0              STR      r0,[r4,#0xc]          ;746
000340  e001              B        |L1.838|
                  |L1.834|
000342  6838              LDR      r0,[r7,#0]            ;749
000344  60e0              STR      r0,[r4,#0xc]          ;749
                  |L1.838|
000346  2000              MOVS     r0,#0                 ;760
000348  8160              STRH     r0,[r4,#0xa]          ;760
00034a  e003              B        |L1.852|
                  |L1.844|
00034c  686c              LDR      r4,[r5,#4]            ;767
00034e  6920              LDR      r0,[r4,#0x10]         ;768
000350  9000              STR      r0,[sp,#0]            ;768
000352  46ea              MOV      r10,sp                ;769
                  |L1.852|
000354  bf00              NOP                            ;774
000356  bf00              NOP                            ;774
000358  bf00              NOP                            ;796
00035a  bf00              NOP                            ;796
00035c  4652              MOV      r2,r10                ;797
00035e  4629              MOV      r1,r5                 ;797
000360  4658              MOV      r0,r11                ;797
000362  f8db3014          LDR      r3,[r11,#0x14]        ;797
000366  4798              BLX      r3                    ;797
000368  e7a4              B        |L1.692|
;;;799    
                          ENDP

                  ip_output_if PROC
;;;640    err_t
;;;641    ip_output_if(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
00036a  e92d47f0          PUSH     {r4-r10,lr}
;;;642                 u8_t ttl, u8_t tos,
;;;643                 u8_t proto, struct netif *netif)
;;;644    {
00036e  b086              SUB      sp,sp,#0x18
000370  4604              MOV      r4,r0
000372  460d              MOV      r5,r1
000374  4616              MOV      r6,r2
000376  461f              MOV      r7,r3
000378  e9dd9a0f          LDRD     r9,r10,[sp,#0x3c]
00037c  f8dd8038          LDR      r8,[sp,#0x38]
;;;645    #if IP_OPTIONS_SEND
;;;646      return ip_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
000380  2000              MOVS     r0,#0
000382  e9cda002          STRD     r10,r0,[sp,#8]
000386  463b              MOV      r3,r7
000388  4632              MOV      r2,r6
00038a  4629              MOV      r1,r5
00038c  e9cd8900          STRD     r8,r9,[sp,#0]
000390  9004              STR      r0,[sp,#0x10]
000392  4620              MOV      r0,r4
000394  f7fffffe          BL       ip_output_if_opt
;;;647    }
000398  b006              ADD      sp,sp,#0x18
00039a  e8bd87f0          POP      {r4-r10,pc}
;;;648    
                          ENDP

                  ip_output PROC
;;;817    err_t
;;;818    ip_output(struct pbuf *p, ip_addr_t *src, ip_addr_t *dest,
00039e  e92d4ffe          PUSH     {r1-r11,lr}
;;;819              u8_t ttl, u8_t tos, u8_t proto)
;;;820    {
0003a2  4606              MOV      r6,r0
0003a4  460f              MOV      r7,r1
0003a6  4615              MOV      r5,r2
0003a8  4698              MOV      r8,r3
0003aa  e9dd9a0c          LDRD     r9,r10,[sp,#0x30]
;;;821      struct netif *netif;
;;;822    
;;;823      /* pbufs passed to IP must have a ref-count of 1 as their payload pointer
;;;824         gets altered as the packet is passed down the stack */
;;;825      LWIP_ASSERT("p->ref == 1", p->ref == 1);
0003ae  bf00              NOP      
0003b0  bf00              NOP      
;;;826    
;;;827      if ((netif = ip_route(dest)) == NULL) {
0003b2  4628              MOV      r0,r5
0003b4  f7fffffe          BL       ip_route
0003b8  1e04              SUBS     r4,r0,#0
0003ba  d104              BNE      |L1.966|
;;;828        LWIP_DEBUGF(IP_DEBUG, ("ip_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
0003bc  bf00              NOP      
0003be  bf00              NOP      
;;;829          ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
;;;830        IP_STATS_INC(ip.rterr);
;;;831        return ERR_RTE;
0003c0  1f00              SUBS     r0,r0,#4
                  |L1.962|
;;;832      }
;;;833    
;;;834      return ip_output_if(p, src, dest, ttl, tos, proto, netif);
;;;835    }
0003c2  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.966|
0003c6  4643              MOV      r3,r8                 ;834
0003c8  462a              MOV      r2,r5                 ;834
0003ca  4639              MOV      r1,r7                 ;834
0003cc  4630              MOV      r0,r6                 ;834
0003ce  e9cd9a00          STRD     r9,r10,[sp,#0]        ;834
0003d2  9402              STR      r4,[sp,#8]            ;834
0003d4  f7fffffe          BL       ip_output_if
0003d8  e7f3              B        |L1.962|
;;;836    
                          ENDP

0003da  0000              DCW      0x0000
                  |L1.988|
                          DCD      netif_list
                  |L1.992|
                          DCD      netif_default
                  |L1.996|
                          DCD      current_iphdr_dest
                  |L1.1000|
                          DCD      current_iphdr_src
                  |L1.1004|
                          DCD      current_netif
                  |L1.1008|
                          DCD      current_header
                  |L1.1012|
                          DCD      ip_id

                          AREA ||.data||, DATA, ALIGN=2

                  current_netif
                          DCD      0x00000000
                  current_header
                          DCD      0x00000000
                  current_iphdr_src
                          DCD      0x00000000
                  current_iphdr_dest
                          DCD      0x00000000
                  ip_id
000010  0000              DCB      0x00,0x00

; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\dhcp.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\dhcp.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\dhcp.crf ..\..\libraries\lwip-1.4.1\src\core\dhcp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  dhcp_delete_msg PROC
;;;1734   static void
;;;1735   dhcp_delete_msg(struct dhcp *dhcp)
000000  b510              PUSH     {r4,lr}
;;;1736   {
000002  4604              MOV      r4,r0
;;;1737     LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
000004  bf00              NOP      
000006  b904              CBNZ     r4,|L1.10|
                  |L1.8|
;;;1738     LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
;;;1739     LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
;;;1740     if (dhcp->p_out != NULL) {
;;;1741       pbuf_free(dhcp->p_out);
;;;1742     }
;;;1743     dhcp->p_out = NULL;
;;;1744     dhcp->msg_out = NULL;
;;;1745   }
000008  bd10              POP      {r4,pc}
                  |L1.10|
00000a  bf00              NOP                            ;1737
00000c  bf00              NOP                            ;1738
00000e  bf00              NOP                            ;1738
000010  bf00              NOP                            ;1739
000012  bf00              NOP                            ;1739
000014  6920              LDR      r0,[r4,#0x10]         ;1740
000016  b110              CBZ      r0,|L1.30|
000018  6920              LDR      r0,[r4,#0x10]         ;1741
00001a  f7fffffe          BL       pbuf_free
                  |L1.30|
00001e  2000              MOVS     r0,#0                 ;1743
000020  6120              STR      r0,[r4,#0x10]         ;1743
000022  6160              STR      r0,[r4,#0x14]         ;1744
000024  bf00              NOP      
000026  e7ef              B        |L1.8|
;;;1746   
                          ENDP

                  dhcp_option_trailer PROC
;;;1755   static void
;;;1756   dhcp_option_trailer(struct dhcp *dhcp)
000028  bf00              NOP      
;;;1757   {
;;;1758     LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
00002a  b900              CBNZ     r0,|L1.46|
                  |L1.44|
;;;1759     LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
;;;1760     LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
;;;1761     dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
;;;1762     /* packet is too small, or not 4 byte aligned? */
;;;1763     while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
;;;1764            (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
;;;1765       /* add a fill/padding byte */
;;;1766       dhcp->msg_out->options[dhcp->options_out_len++] = 0;
;;;1767     }
;;;1768   }
00002c  4770              BX       lr
                  |L1.46|
00002e  bf00              NOP                            ;1758
000030  bf00              NOP                            ;1759
000032  bf00              NOP                            ;1759
000034  bf00              NOP                            ;1760
000036  bf00              NOP                            ;1760
000038  22ff              MOVS     r2,#0xff              ;1761
00003a  8b03              LDRH     r3,[r0,#0x18]         ;1761
00003c  1c59              ADDS     r1,r3,#1              ;1761
00003e  8301              STRH     r1,[r0,#0x18]         ;1761
000040  6941              LDR      r1,[r0,#0x14]         ;1761
000042  31f0              ADDS     r1,r1,#0xf0           ;1761
000044  54ca              STRB     r2,[r1,r3]            ;1761
000046  e006              B        |L1.86|
                  |L1.72|
000048  2200              MOVS     r2,#0                 ;1766
00004a  8b03              LDRH     r3,[r0,#0x18]         ;1766
00004c  1c59              ADDS     r1,r3,#1              ;1766
00004e  8301              STRH     r1,[r0,#0x18]         ;1766
000050  6941              LDR      r1,[r0,#0x14]         ;1766
000052  31f0              ADDS     r1,r1,#0xf0           ;1766
000054  54ca              STRB     r2,[r1,r3]            ;1766
                  |L1.86|
000056  8b01              LDRH     r1,[r0,#0x18]         ;1763
000058  2944              CMP      r1,#0x44              ;1763
00005a  d303              BCC      |L1.100|
00005c  7e01              LDRB     r1,[r0,#0x18]         ;1763
00005e  f0010103          AND      r1,r1,#3              ;1763
000062  b111              CBZ      r1,|L1.106|
                  |L1.100|
000064  8b01              LDRH     r1,[r0,#0x18]         ;1764
000066  2944              CMP      r1,#0x44              ;1764
000068  d3ee              BCC      |L1.72|
                  |L1.106|
00006a  bf00              NOP      
00006c  e7de              B        |L1.44|
;;;1769   
                          ENDP

                  dhcp_option_byte PROC
;;;1278   static void
;;;1279   dhcp_option_byte(struct dhcp *dhcp, u8_t value)
00006e  bf00              NOP      
;;;1280   {
;;;1281     LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
000070  bf00              NOP      
;;;1282     dhcp->msg_out->options[dhcp->options_out_len++] = value;
000072  8b03              LDRH     r3,[r0,#0x18]
000074  1c5a              ADDS     r2,r3,#1
000076  8302              STRH     r2,[r0,#0x18]
000078  6942              LDR      r2,[r0,#0x14]
00007a  32f0              ADDS     r2,r2,#0xf0
00007c  54d1              STRB     r1,[r2,r3]
;;;1283   }
00007e  4770              BX       lr
;;;1284   
                          ENDP

                  dhcp_option PROC
;;;1267   static void
;;;1268   dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
000080  b510              PUSH     {r4,lr}
;;;1269   {
;;;1270     LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
000082  bf00              NOP      
000084  bf00              NOP      
;;;1271     dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
000086  8b04              LDRH     r4,[r0,#0x18]
000088  1c63              ADDS     r3,r4,#1
00008a  8303              STRH     r3,[r0,#0x18]
00008c  6943              LDR      r3,[r0,#0x14]
00008e  33f0              ADDS     r3,r3,#0xf0
000090  5519              STRB     r1,[r3,r4]
;;;1272     dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
000092  8b04              LDRH     r4,[r0,#0x18]
000094  1c63              ADDS     r3,r4,#1
000096  8303              STRH     r3,[r0,#0x18]
000098  6943              LDR      r3,[r0,#0x14]
00009a  33f0              ADDS     r3,r3,#0xf0
00009c  551a              STRB     r2,[r3,r4]
;;;1273   }
00009e  bd10              POP      {r4,pc}
;;;1274   /*
                          ENDP

                  dhcp_option_short PROC
;;;1285   static void
;;;1286   dhcp_option_short(struct dhcp *dhcp, u16_t value)
0000a0  b510              PUSH     {r4,lr}
;;;1287   {
;;;1288     LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
0000a2  bf00              NOP      
0000a4  bf00              NOP      
;;;1289     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
0000a6  0a0b              LSRS     r3,r1,#8
0000a8  8b04              LDRH     r4,[r0,#0x18]
0000aa  1c62              ADDS     r2,r4,#1
0000ac  8302              STRH     r2,[r0,#0x18]
0000ae  6942              LDR      r2,[r0,#0x14]
0000b0  32f0              ADDS     r2,r2,#0xf0
0000b2  5513              STRB     r3,[r2,r4]
;;;1290     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
0000b4  8b04              LDRH     r4,[r0,#0x18]
0000b6  1c62              ADDS     r2,r4,#1
0000b8  8302              STRH     r2,[r0,#0x18]
0000ba  6942              LDR      r2,[r0,#0x14]
0000bc  32f0              ADDS     r2,r2,#0xf0
0000be  5511              STRB     r1,[r2,r4]
;;;1291   }
0000c0  bd10              POP      {r4,pc}
;;;1292   
                          ENDP

                  dhcp_create_msg PROC
;;;1640   static err_t
;;;1641   dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
0000c2  e92d41f0          PUSH     {r4-r8,lr}
;;;1642   {
0000c6  4606              MOV      r6,r0
0000c8  460c              MOV      r4,r1
0000ca  4617              MOV      r7,r2
;;;1643     u16_t i;
;;;1644   #ifndef DHCP_GLOBAL_XID
;;;1645     /** default global transaction identifier starting value (easy to match
;;;1646      *  with a packet analyser). We simply increment for each new request.
;;;1647      *  Predefine DHCP_GLOBAL_XID to a better value or a function call to generate one
;;;1648      *  at runtime, any supporting function prototypes can be defined in DHCP_GLOBAL_XID_HEADER */
;;;1649   #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
;;;1650     static u32_t xid;
;;;1651   #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1652     static u32_t xid = 0xABCD0000;
;;;1653   #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1654   #else
;;;1655     if (!xid_initialised) {
;;;1656       xid = DHCP_GLOBAL_XID;
;;;1657       xid_initialised = !xid_initialised;
;;;1658     }
;;;1659   #endif
;;;1660     LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
0000cc  bf00              NOP      
0000ce  b91e              CBNZ     r6,|L1.216|
0000d0  f06f000d          MVN      r0,#0xd
                  |L1.212|
;;;1661     LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
;;;1662     LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
;;;1663     LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
;;;1664     dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
;;;1665     if (dhcp->p_out == NULL) {
;;;1666       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
;;;1667         ("dhcp_create_msg(): could not allocate pbuf\n"));
;;;1668       return ERR_MEM;
;;;1669     }
;;;1670     LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
;;;1671              (dhcp->p_out->len >= sizeof(struct dhcp_msg)));
;;;1672   
;;;1673     /* reuse transaction identifier in retransmissions */
;;;1674     if (dhcp->tries == 0) {
;;;1675   #if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
;;;1676       xid = LWIP_RAND();
;;;1677   #else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1678       xid++;
;;;1679   #endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
;;;1680     }
;;;1681     dhcp->xid = xid;
;;;1682     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
;;;1683                 ("transaction id xid(%"X32_F")\n", xid));
;;;1684   
;;;1685     dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
;;;1686   
;;;1687     dhcp->msg_out->op = DHCP_BOOTREQUEST;
;;;1688     /* TODO: make link layer independent */
;;;1689     dhcp->msg_out->htype = DHCP_HTYPE_ETH;
;;;1690     dhcp->msg_out->hlen = netif->hwaddr_len;
;;;1691     dhcp->msg_out->hops = 0;
;;;1692     dhcp->msg_out->xid = htonl(dhcp->xid);
;;;1693     dhcp->msg_out->secs = 0;
;;;1694     /* we don't need the broadcast flag since we can receive unicast traffic
;;;1695        before being fully configured! */
;;;1696     dhcp->msg_out->flags = 0;
;;;1697     ip_addr_set_zero(&dhcp->msg_out->ciaddr);
;;;1698     /* set ciaddr to netif->ip_addr based on message_type and state */
;;;1699     if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) ||
;;;1700         ((message_type == DHCP_REQUEST) && /* DHCP_BOUND not used for sending! */
;;;1701          ((dhcp->state==DHCP_RENEWING) || dhcp->state==DHCP_REBINDING))) {
;;;1702       ip_addr_copy(dhcp->msg_out->ciaddr, netif->ip_addr);
;;;1703     }
;;;1704     ip_addr_set_zero(&dhcp->msg_out->yiaddr);
;;;1705     ip_addr_set_zero(&dhcp->msg_out->siaddr);
;;;1706     ip_addr_set_zero(&dhcp->msg_out->giaddr);
;;;1707     for (i = 0; i < DHCP_CHADDR_LEN; i++) {
;;;1708       /* copy netif hardware address, pad with zeroes */
;;;1709       dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
;;;1710     }
;;;1711     for (i = 0; i < DHCP_SNAME_LEN; i++) {
;;;1712       dhcp->msg_out->sname[i] = 0;
;;;1713     }
;;;1714     for (i = 0; i < DHCP_FILE_LEN; i++) {
;;;1715       dhcp->msg_out->file[i] = 0;
;;;1716     }
;;;1717     dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
;;;1718     dhcp->options_out_len = 0;
;;;1719     /* fill options field with an incrementing array (for debugging purposes) */
;;;1720     for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
;;;1721       dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
;;;1722     }
;;;1723     /* Add option MESSAGE_TYPE */
;;;1724     dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
;;;1725     dhcp_option_byte(dhcp, message_type);
;;;1726     return ERR_OK;
;;;1727   }
0000d4  e8bd81f0          POP      {r4-r8,pc}
                  |L1.216|
0000d8  bf00              NOP                            ;1660
0000da  bf00              NOP                            ;1661
0000dc  b914              CBNZ     r4,|L1.228|
0000de  f06f0005          MVN      r0,#5                 ;1661
0000e2  e7f7              B        |L1.212|
                  |L1.228|
0000e4  bf00              NOP                            ;1661
0000e6  bf00              NOP                            ;1662
0000e8  bf00              NOP                            ;1662
0000ea  bf00              NOP                            ;1663
0000ec  bf00              NOP                            ;1663
0000ee  2200              MOVS     r2,#0                 ;1664
0000f0  f44f719a          MOV      r1,#0x134             ;1664
0000f4  4610              MOV      r0,r2                 ;1664
0000f6  f7fffffe          BL       pbuf_alloc
0000fa  6120              STR      r0,[r4,#0x10]         ;1664
0000fc  6920              LDR      r0,[r4,#0x10]         ;1665
0000fe  b920              CBNZ     r0,|L1.266|
000100  bf00              NOP                            ;1666
000102  bf00              NOP                            ;1666
000104  f04f30ff          MOV      r0,#0xffffffff        ;1668
000108  e7e4              B        |L1.212|
                  |L1.266|
00010a  bf00              NOP                            ;1670
00010c  bf00              NOP                            ;1670
00010e  7b60              LDRB     r0,[r4,#0xd]          ;1674
000110  b918              CBNZ     r0,|L1.282|
000112  f7fffffe          BL       rand
000116  49fe              LDR      r1,|L1.1296|
000118  6008              STR      r0,[r1,#0]            ;1676  ; xid
                  |L1.282|
00011a  48fd              LDR      r0,|L1.1296|
00011c  6800              LDR      r0,[r0,#0]            ;1681  ; xid
00011e  6020              STR      r0,[r4,#0]            ;1681
000120  bf00              NOP                            ;1682
000122  bf00              NOP                            ;1682
000124  6920              LDR      r0,[r4,#0x10]         ;1685
000126  6840              LDR      r0,[r0,#4]            ;1685
000128  6160              STR      r0,[r4,#0x14]         ;1685
00012a  2001              MOVS     r0,#1                 ;1687
00012c  6961              LDR      r1,[r4,#0x14]         ;1687
00012e  7008              STRB     r0,[r1,#0]            ;1687
000130  6961              LDR      r1,[r4,#0x14]         ;1689
000132  7048              STRB     r0,[r1,#1]            ;1689
000134  f8960026          LDRB     r0,[r6,#0x26]         ;1690
000138  6961              LDR      r1,[r4,#0x14]         ;1690
00013a  7088              STRB     r0,[r1,#2]            ;1690
00013c  2000              MOVS     r0,#0                 ;1691
00013e  6961              LDR      r1,[r4,#0x14]         ;1691
000140  70c8              STRB     r0,[r1,#3]            ;1691
000142  6820              LDR      r0,[r4,#0]            ;1692
000144  f7fffffe          BL       lwip_htonl
000148  6961              LDR      r1,[r4,#0x14]         ;1692
00014a  6048              STR      r0,[r1,#4]            ;1692
00014c  2000              MOVS     r0,#0                 ;1693
00014e  6961              LDR      r1,[r4,#0x14]         ;1693
000150  8108              STRH     r0,[r1,#8]            ;1693
000152  6961              LDR      r1,[r4,#0x14]         ;1696
000154  8148              STRH     r0,[r1,#0xa]          ;1696
000156  6961              LDR      r1,[r4,#0x14]         ;1697
000158  60c8              STR      r0,[r1,#0xc]          ;1697
00015a  2f08              CMP      r7,#8                 ;1699
00015c  d009              BEQ      |L1.370|
00015e  2f04              CMP      r7,#4                 ;1699
000160  d007              BEQ      |L1.370|
000162  2f03              CMP      r7,#3                 ;1700
000164  d108              BNE      |L1.376|
000166  7b20              LDRB     r0,[r4,#0xc]          ;1701
000168  2805              CMP      r0,#5                 ;1701
00016a  d002              BEQ      |L1.370|
00016c  7b20              LDRB     r0,[r4,#0xc]          ;1701
00016e  2804              CMP      r0,#4                 ;1701
000170  d102              BNE      |L1.376|
                  |L1.370|
000172  6870              LDR      r0,[r6,#4]            ;1702
000174  6961              LDR      r1,[r4,#0x14]         ;1702
000176  60c8              STR      r0,[r1,#0xc]          ;1702
                  |L1.376|
000178  2000              MOVS     r0,#0                 ;1704
00017a  6961              LDR      r1,[r4,#0x14]         ;1704
00017c  6108              STR      r0,[r1,#0x10]         ;1704
00017e  6961              LDR      r1,[r4,#0x14]         ;1705
000180  6148              STR      r0,[r1,#0x14]         ;1705
000182  6961              LDR      r1,[r4,#0x14]         ;1706
000184  6188              STR      r0,[r1,#0x18]         ;1706
000186  2500              MOVS     r5,#0                 ;1707
000188  e00d              B        |L1.422|
                  |L1.394|
00018a  f8960026          LDRB     r0,[r6,#0x26]         ;1709
00018e  42a8              CMP      r0,r5                 ;1709
000190  dd03              BLE      |L1.410|
000192  f1060027          ADD      r0,r6,#0x27           ;1709
000196  5d40              LDRB     r0,[r0,r5]            ;1709
000198  e000              B        |L1.412|
                  |L1.410|
00019a  2000              MOVS     r0,#0                 ;1709
                  |L1.412|
00019c  6961              LDR      r1,[r4,#0x14]         ;1709
00019e  311c              ADDS     r1,r1,#0x1c           ;1709
0001a0  5548              STRB     r0,[r1,r5]            ;1709
0001a2  1c68              ADDS     r0,r5,#1              ;1707
0001a4  b285              UXTH     r5,r0                 ;1707
                  |L1.422|
0001a6  2d10              CMP      r5,#0x10              ;1707
0001a8  d3ef              BCC      |L1.394|
0001aa  2500              MOVS     r5,#0                 ;1711
0001ac  e005              B        |L1.442|
                  |L1.430|
0001ae  2100              MOVS     r1,#0                 ;1712
0001b0  6960              LDR      r0,[r4,#0x14]         ;1712
0001b2  302c              ADDS     r0,r0,#0x2c           ;1712
0001b4  5541              STRB     r1,[r0,r5]            ;1712
0001b6  1c68              ADDS     r0,r5,#1              ;1711
0001b8  b285              UXTH     r5,r0                 ;1711
                  |L1.442|
0001ba  2d40              CMP      r5,#0x40              ;1711
0001bc  d3f7              BCC      |L1.430|
0001be  2500              MOVS     r5,#0                 ;1714
0001c0  e005              B        |L1.462|
                  |L1.450|
0001c2  2100              MOVS     r1,#0                 ;1715
0001c4  6960              LDR      r0,[r4,#0x14]         ;1715
0001c6  306c              ADDS     r0,r0,#0x6c           ;1715
0001c8  5541              STRB     r1,[r0,r5]            ;1715
0001ca  1c68              ADDS     r0,r5,#1              ;1714
0001cc  b285              UXTH     r5,r0                 ;1714
                  |L1.462|
0001ce  2d80              CMP      r5,#0x80              ;1714
0001d0  d3f7              BCC      |L1.450|
0001d2  48d0              LDR      r0,|L1.1300|
0001d4  6961              LDR      r1,[r4,#0x14]         ;1717
0001d6  f8c100ec          STR      r0,[r1,#0xec]         ;1717
0001da  2000              MOVS     r0,#0                 ;1718
0001dc  8320              STRH     r0,[r4,#0x18]         ;1718
0001de  2500              MOVS     r5,#0                 ;1720
0001e0  e004              B        |L1.492|
                  |L1.482|
0001e2  6960              LDR      r0,[r4,#0x14]         ;1721
0001e4  30f0              ADDS     r0,r0,#0xf0           ;1721
0001e6  5545              STRB     r5,[r0,r5]            ;1721
0001e8  1c68              ADDS     r0,r5,#1              ;1720
0001ea  b285              UXTH     r5,r0                 ;1720
                  |L1.492|
0001ec  2d44              CMP      r5,#0x44              ;1720
0001ee  d3f8              BCC      |L1.482|
0001f0  2201              MOVS     r2,#1                 ;1724
0001f2  2135              MOVS     r1,#0x35              ;1724
0001f4  4620              MOV      r0,r4                 ;1724
0001f6  f7fffffe          BL       dhcp_option
0001fa  4639              MOV      r1,r7                 ;1725
0001fc  4620              MOV      r0,r4                 ;1725
0001fe  f7fffffe          BL       dhcp_option_byte
000202  2000              MOVS     r0,#0                 ;1726
000204  e766              B        |L1.212|
;;;1728   
                          ENDP

                  dhcp_set_state PROC
;;;1252   static void
;;;1253   dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
000206  7b02              LDRB     r2,[r0,#0xc]
;;;1254   {
;;;1255     if (new_state != dhcp->state) {
000208  428a              CMP      r2,r1
00020a  d003              BEQ      |L1.532|
;;;1256       dhcp->state = new_state;
00020c  7301              STRB     r1,[r0,#0xc]
;;;1257       dhcp->tries = 0;
00020e  2200              MOVS     r2,#0
000210  7342              STRB     r2,[r0,#0xd]
;;;1258       dhcp->request_timeout = 0;
000212  8342              STRH     r2,[r0,#0x1a]
                  |L1.532|
;;;1259     }
;;;1260   }
000214  4770              BX       lr
;;;1261   
                          ENDP

                  dhcp_discover PROC
;;;871    static err_t
;;;872    dhcp_discover(struct netif *netif)
000216  b5f8              PUSH     {r3-r7,lr}
;;;873    {
000218  4605              MOV      r5,r0
;;;874      struct dhcp *dhcp = netif->dhcp;
00021a  6a2c              LDR      r4,[r5,#0x20]
;;;875      err_t result = ERR_OK;
00021c  2600              MOVS     r6,#0
;;;876      u16_t msecs;
;;;877      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
00021e  bf00              NOP      
000220  bf00              NOP      
;;;878      ip_addr_set_any(&dhcp->offered_ip_addr);
000222  2000              MOVS     r0,#0
000224  6260              STR      r0,[r4,#0x24]
;;;879      dhcp_set_state(dhcp, DHCP_SELECTING);
000226  2106              MOVS     r1,#6
000228  4620              MOV      r0,r4
00022a  f7fffffe          BL       dhcp_set_state
;;;880      /* create and initialize the DHCP message header */
;;;881      result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
00022e  2201              MOVS     r2,#1
000230  4621              MOV      r1,r4
000232  4628              MOV      r0,r5
000234  f7fffffe          BL       dhcp_create_msg
000238  4606              MOV      r6,r0
;;;882      if (result == ERR_OK) {
00023a  2e00              CMP      r6,#0
00023c  d13a              BNE      |L1.692|
;;;883        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
00023e  bf00              NOP      
000240  bf00              NOP      
;;;884    
;;;885        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000242  2202              MOVS     r2,#2
000244  2139              MOVS     r1,#0x39
000246  4620              MOV      r0,r4
000248  f7fffffe          BL       dhcp_option
;;;886        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
00024c  8ca9              LDRH     r1,[r5,#0x24]
00024e  4620              MOV      r0,r4
000250  f7fffffe          BL       dhcp_option_short
;;;887    
;;;888        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
000254  2204              MOVS     r2,#4
000256  2137              MOVS     r1,#0x37
000258  4620              MOV      r0,r4
00025a  f7fffffe          BL       dhcp_option
;;;889        dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
00025e  2101              MOVS     r1,#1
000260  4620              MOV      r0,r4
000262  f7fffffe          BL       dhcp_option_byte
;;;890        dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
000266  2103              MOVS     r1,#3
000268  4620              MOV      r0,r4
00026a  f7fffffe          BL       dhcp_option_byte
;;;891        dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
00026e  211c              MOVS     r1,#0x1c
000270  4620              MOV      r0,r4
000272  f7fffffe          BL       dhcp_option_byte
;;;892        dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
000276  2106              MOVS     r1,#6
000278  4620              MOV      r0,r4
00027a  f7fffffe          BL       dhcp_option_byte
;;;893    
;;;894        dhcp_option_trailer(dhcp);
00027e  4620              MOV      r0,r4
000280  f7fffffe          BL       dhcp_option_trailer
;;;895    
;;;896        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
000284  bf00              NOP      
000286  bf00              NOP      
;;;897        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000288  8b22              LDRH     r2,[r4,#0x18]
00028a  32f0              ADDS     r2,r2,#0xf0
00028c  b291              UXTH     r1,r2
00028e  6920              LDR      r0,[r4,#0x10]
000290  f7fffffe          BL       pbuf_realloc
;;;898    
;;;899        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
000294  bf00              NOP      
000296  bf00              NOP      
;;;900        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000298  9500              STR      r5,[sp,#0]
00029a  2343              MOVS     r3,#0x43
00029c  4a9e              LDR      r2,|L1.1304|
00029e  6921              LDR      r1,[r4,#0x10]
0002a0  6860              LDR      r0,[r4,#4]
0002a2  f7fffffe          BL       udp_sendto_if
;;;901        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
0002a6  bf00              NOP      
0002a8  bf00              NOP      
;;;902        dhcp_delete_msg(dhcp);
0002aa  4620              MOV      r0,r4
0002ac  f7fffffe          BL       dhcp_delete_msg
;;;903        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
0002b0  bf00              NOP      
0002b2  e001              B        |L1.696|
                  |L1.692|
;;;904      } else {
;;;905        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
0002b4  bf00              NOP      
0002b6  bf00              NOP      
                  |L1.696|
;;;906      }
;;;907      dhcp->tries++;
0002b8  7b60              LDRB     r0,[r4,#0xd]
0002ba  1c40              ADDS     r0,r0,#1
0002bc  7360              STRB     r0,[r4,#0xd]
;;;908    #if LWIP_DHCP_AUTOIP_COOP
;;;909      if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
;;;910        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
;;;911        autoip_start(netif);
;;;912      }
;;;913    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;914      msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
0002be  7b60              LDRB     r0,[r4,#0xd]
0002c0  2806              CMP      r0,#6
0002c2  da03              BGE      |L1.716|
0002c4  7b61              LDRB     r1,[r4,#0xd]
0002c6  2001              MOVS     r0,#1
0002c8  4088              LSLS     r0,r0,r1
0002ca  e000              B        |L1.718|
                  |L1.716|
0002cc  203c              MOVS     r0,#0x3c
                  |L1.718|
0002ce  eb000140          ADD      r1,r0,r0,LSL #1
0002d2  ebc110c0          RSB      r0,r1,r0,LSL #7
0002d6  f64f71ff          MOV      r1,#0xffff
0002da  ea0107c0          AND      r7,r1,r0,LSL #3
;;;915      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0002de  f20710f3          ADD      r0,r7,#0x1f3
0002e2  f44f71fa          MOV      r1,#0x1f4
0002e6  fb90f0f1          SDIV     r0,r0,r1
0002ea  8360              STRH     r0,[r4,#0x1a]
;;;916      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
0002ec  bf00              NOP      
0002ee  bf00              NOP      
;;;917      return result;
0002f0  4630              MOV      r0,r6
;;;918    }
0002f2  bdf8              POP      {r3-r7,pc}
;;;919    
                          ENDP

                  dhcp_handle_nak PROC
;;;196    static void
;;;197    dhcp_handle_nak(struct netif *netif)
0002f4  b570              PUSH     {r4-r6,lr}
;;;198    {
0002f6  4604              MOV      r4,r0
;;;199      struct dhcp *dhcp = netif->dhcp;
0002f8  6a25              LDR      r5,[r4,#0x20]
;;;200      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
0002fa  bf00              NOP      
0002fc  bf00              NOP      
;;;201        (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;202      /* Set the interface down since the address must no longer be used, as per RFC2131 */
;;;203      netif_set_down(netif);
0002fe  4620              MOV      r0,r4
000300  f7fffffe          BL       netif_set_down
;;;204      /* remove IP address from interface */
;;;205      netif_set_ipaddr(netif, IP_ADDR_ANY);
000304  4985              LDR      r1,|L1.1308|
000306  4620              MOV      r0,r4
000308  f7fffffe          BL       netif_set_ipaddr
;;;206      netif_set_gw(netif, IP_ADDR_ANY);
00030c  4983              LDR      r1,|L1.1308|
00030e  4620              MOV      r0,r4
000310  f7fffffe          BL       netif_set_gw
;;;207      netif_set_netmask(netif, IP_ADDR_ANY); 
000314  4981              LDR      r1,|L1.1308|
000316  4620              MOV      r0,r4
000318  f7fffffe          BL       netif_set_netmask
;;;208      /* Change to a defined state */
;;;209      dhcp_set_state(dhcp, DHCP_BACKING_OFF);
00031c  210c              MOVS     r1,#0xc
00031e  4628              MOV      r0,r5
000320  f7fffffe          BL       dhcp_set_state
;;;210      /* We can immediately restart discovery */
;;;211      dhcp_discover(netif);
000324  4620              MOV      r0,r4
000326  f7fffffe          BL       dhcp_discover
;;;212    }
00032a  bd70              POP      {r4-r6,pc}
;;;213    
                          ENDP

                  dhcp_check PROC
;;;224    static void
;;;225    dhcp_check(struct netif *netif)
00032c  e92d41f0          PUSH     {r4-r8,lr}
;;;226    {
000330  4606              MOV      r6,r0
;;;227      struct dhcp *dhcp = netif->dhcp;
000332  6a34              LDR      r4,[r6,#0x20]
;;;228      err_t result;
;;;229      u16_t msecs;
;;;230      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
000334  bf00              NOP      
000336  bf00              NOP      
;;;231        (s16_t)netif->name[1]));
;;;232      dhcp_set_state(dhcp, DHCP_CHECKING);
000338  2108              MOVS     r1,#8
00033a  4620              MOV      r0,r4
00033c  f7fffffe          BL       dhcp_set_state
;;;233      /* create an ARP query for the offered IP address, expecting that no host
;;;234         responds, as the IP address should not be in use. */
;;;235      result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
000340  2200              MOVS     r2,#0
000342  f1040124          ADD      r1,r4,#0x24
000346  4630              MOV      r0,r6
000348  f7fffffe          BL       etharp_query
00034c  4605              MOV      r5,r0
;;;236      if (result != ERR_OK) {
00034e  b10d              CBZ      r5,|L1.852|
;;;237        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
000350  bf00              NOP      
000352  bf00              NOP      
                  |L1.852|
;;;238      }
;;;239      dhcp->tries++;
000354  7b60              LDRB     r0,[r4,#0xd]
000356  1c40              ADDS     r0,r0,#1
000358  7360              STRB     r0,[r4,#0xd]
;;;240      msecs = 500;
00035a  f44f77fa          MOV      r7,#0x1f4
;;;241      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00035e  f20710f3          ADD      r0,r7,#0x1f3
000362  4639              MOV      r1,r7
000364  fb90f0f1          SDIV     r0,r0,r1
000368  8360              STRH     r0,[r4,#0x1a]
;;;242      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
00036a  bf00              NOP      
00036c  bf00              NOP      
;;;243    }
00036e  e8bd81f0          POP      {r4-r8,pc}
;;;244    #endif /* DHCP_DOES_ARP_CHECK */
                          ENDP

                  dhcp_option_long PROC
;;;1293   static void
;;;1294   dhcp_option_long(struct dhcp *dhcp, u32_t value)
000372  b510              PUSH     {r4,lr}
;;;1295   {
;;;1296     LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
000374  bf00              NOP      
000376  bf00              NOP      
;;;1297     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
000378  0e0b              LSRS     r3,r1,#24
00037a  8b04              LDRH     r4,[r0,#0x18]
00037c  1c62              ADDS     r2,r4,#1
00037e  8302              STRH     r2,[r0,#0x18]
000380  6942              LDR      r2,[r0,#0x14]
000382  32f0              ADDS     r2,r2,#0xf0
000384  5513              STRB     r3,[r2,r4]
;;;1298     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
000386  f3c14307          UBFX     r3,r1,#16,#8
00038a  8b04              LDRH     r4,[r0,#0x18]
00038c  1c62              ADDS     r2,r4,#1
00038e  8302              STRH     r2,[r0,#0x18]
000390  6942              LDR      r2,[r0,#0x14]
000392  32f0              ADDS     r2,r2,#0xf0
000394  5513              STRB     r3,[r2,r4]
;;;1299     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
000396  f3c12307          UBFX     r3,r1,#8,#8
00039a  8b04              LDRH     r4,[r0,#0x18]
00039c  1c62              ADDS     r2,r4,#1
00039e  8302              STRH     r2,[r0,#0x18]
0003a0  6942              LDR      r2,[r0,#0x14]
0003a2  32f0              ADDS     r2,r2,#0xf0
0003a4  5513              STRB     r3,[r2,r4]
;;;1300     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
0003a6  8b04              LDRH     r4,[r0,#0x18]
0003a8  1c62              ADDS     r2,r4,#1
0003aa  8302              STRH     r2,[r0,#0x18]
0003ac  6942              LDR      r2,[r0,#0x14]
0003ae  32f0              ADDS     r2,r2,#0xf0
0003b0  5511              STRB     r1,[r2,r4]
;;;1301   }
0003b2  bd10              POP      {r4,pc}
;;;1302   
                          ENDP

                  dhcp_select PROC
;;;282    static err_t
;;;283    dhcp_select(struct netif *netif)
0003b4  e92d43f8          PUSH     {r3-r9,lr}
;;;284    {
0003b8  4605              MOV      r5,r0
;;;285      struct dhcp *dhcp = netif->dhcp;
0003ba  6a2c              LDR      r4,[r5,#0x20]
;;;286      err_t result;
;;;287      u16_t msecs;
;;;288    
;;;289      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
0003bc  bf00              NOP      
0003be  bf00              NOP      
;;;290      dhcp_set_state(dhcp, DHCP_REQUESTING);
0003c0  2101              MOVS     r1,#1
0003c2  4620              MOV      r0,r4
0003c4  f7fffffe          BL       dhcp_set_state
;;;291    
;;;292      /* create and initialize the DHCP message header */
;;;293      result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
0003c8  2203              MOVS     r2,#3
0003ca  4621              MOV      r1,r4
0003cc  4628              MOV      r0,r5
0003ce  f7fffffe          BL       dhcp_create_msg
0003d2  4606              MOV      r6,r0
;;;294      if (result == ERR_OK) {
0003d4  2e00              CMP      r6,#0
0003d6  d14c              BNE      |L1.1138|
;;;295        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
0003d8  2202              MOVS     r2,#2
0003da  2139              MOVS     r1,#0x39
0003dc  4620              MOV      r0,r4
0003de  f7fffffe          BL       dhcp_option
;;;296        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
0003e2  8ca9              LDRH     r1,[r5,#0x24]
0003e4  4620              MOV      r0,r4
0003e6  f7fffffe          BL       dhcp_option_short
;;;297    
;;;298        /* MUST request the offered IP address */
;;;299        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
0003ea  2204              MOVS     r2,#4
0003ec  2132              MOVS     r1,#0x32
0003ee  4620              MOV      r0,r4
0003f0  f7fffffe          BL       dhcp_option
;;;300        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
0003f4  6a60              LDR      r0,[r4,#0x24]
0003f6  f7fffffe          BL       lwip_ntohl
0003fa  4680              MOV      r8,r0
0003fc  4641              MOV      r1,r8
0003fe  4620              MOV      r0,r4
000400  f7fffffe          BL       dhcp_option_long
;;;301    
;;;302        dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
000404  2204              MOVS     r2,#4
000406  2136              MOVS     r1,#0x36
000408  4620              MOV      r0,r4
00040a  f7fffffe          BL       dhcp_option
;;;303        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->server_ip_addr)));
00040e  6a20              LDR      r0,[r4,#0x20]
000410  f7fffffe          BL       lwip_ntohl
000414  4680              MOV      r8,r0
000416  4641              MOV      r1,r8
000418  4620              MOV      r0,r4
00041a  f7fffffe          BL       dhcp_option_long
;;;304    
;;;305        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
00041e  2204              MOVS     r2,#4
000420  2137              MOVS     r1,#0x37
000422  4620              MOV      r0,r4
000424  f7fffffe          BL       dhcp_option
;;;306        dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
000428  2101              MOVS     r1,#1
00042a  4620              MOV      r0,r4
00042c  f7fffffe          BL       dhcp_option_byte
;;;307        dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
000430  2103              MOVS     r1,#3
000432  4620              MOV      r0,r4
000434  f7fffffe          BL       dhcp_option_byte
;;;308        dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
000438  211c              MOVS     r1,#0x1c
00043a  4620              MOV      r0,r4
00043c  f7fffffe          BL       dhcp_option_byte
;;;309        dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
000440  2106              MOVS     r1,#6
000442  4620              MOV      r0,r4
000444  f7fffffe          BL       dhcp_option_byte
;;;310    
;;;311    #if LWIP_NETIF_HOSTNAME
;;;312        dhcp_option_hostname(dhcp, netif);
;;;313    #endif /* LWIP_NETIF_HOSTNAME */
;;;314    
;;;315        dhcp_option_trailer(dhcp);
000448  4620              MOV      r0,r4
00044a  f7fffffe          BL       dhcp_option_trailer
;;;316        /* shrink the pbuf to the actual content length */
;;;317        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
00044e  8b22              LDRH     r2,[r4,#0x18]
000450  32f0              ADDS     r2,r2,#0xf0
000452  b291              UXTH     r1,r2
000454  6920              LDR      r0,[r4,#0x10]
000456  f7fffffe          BL       pbuf_realloc
;;;318    
;;;319        /* send broadcast to any DHCP server */
;;;320        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
00045a  9500              STR      r5,[sp,#0]
00045c  2343              MOVS     r3,#0x43
00045e  4a2e              LDR      r2,|L1.1304|
000460  6921              LDR      r1,[r4,#0x10]
000462  6860              LDR      r0,[r4,#4]
000464  f7fffffe          BL       udp_sendto_if
;;;321        dhcp_delete_msg(dhcp);
000468  4620              MOV      r0,r4
00046a  f7fffffe          BL       dhcp_delete_msg
;;;322        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
00046e  bf00              NOP      
000470  e001              B        |L1.1142|
                  |L1.1138|
;;;323      } else {
;;;324        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
000472  bf00              NOP      
000474  bf00              NOP      
                  |L1.1142|
;;;325      }
;;;326      dhcp->tries++;
000476  7b60              LDRB     r0,[r4,#0xd]
000478  1c40              ADDS     r0,r0,#1
00047a  7360              STRB     r0,[r4,#0xd]
;;;327      msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
00047c  7b60              LDRB     r0,[r4,#0xd]
00047e  2806              CMP      r0,#6
000480  da03              BGE      |L1.1162|
000482  7b61              LDRB     r1,[r4,#0xd]
000484  2001              MOVS     r0,#1
000486  4088              LSLS     r0,r0,r1
000488  e000              B        |L1.1164|
                  |L1.1162|
00048a  203c              MOVS     r0,#0x3c
                  |L1.1164|
00048c  eb000140          ADD      r1,r0,r0,LSL #1
000490  ebc110c0          RSB      r0,r1,r0,LSL #7
000494  f64f71ff          MOV      r1,#0xffff
000498  ea0107c0          AND      r7,r1,r0,LSL #3
;;;328      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00049c  f20710f3          ADD      r0,r7,#0x1f3
0004a0  f44f71fa          MOV      r1,#0x1f4
0004a4  fb90f0f1          SDIV     r0,r0,r1
0004a8  8360              STRH     r0,[r4,#0x1a]
;;;329      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
0004aa  bf00              NOP      
0004ac  bf00              NOP      
;;;330      return result;
0004ae  4630              MOV      r0,r6
;;;331    }
0004b0  e8bd83f8          POP      {r3-r9,pc}
;;;332    
                          ENDP

                  dhcp_handle_offer PROC
;;;251    static void
;;;252    dhcp_handle_offer(struct netif *netif)
0004b4  b570              PUSH     {r4-r6,lr}
;;;253    {
0004b6  4605              MOV      r5,r0
;;;254      struct dhcp *dhcp = netif->dhcp;
0004b8  6a2c              LDR      r4,[r5,#0x20]
;;;255      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
0004ba  bf00              NOP      
0004bc  bf00              NOP      
;;;256        (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;257      /* obtain the server address */
;;;258      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
0004be  4818              LDR      r0,|L1.1312|
0004c0  7880              LDRB     r0,[r0,#2]  ; dhcp_rx_options_given
0004c2  b178              CBZ      r0,|L1.1252|
;;;259        ip4_addr_set_u32(&dhcp->server_ip_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
0004c4  4917              LDR      r1,|L1.1316|
0004c6  6888              LDR      r0,[r1,#8]  ; dhcp_rx_options_val
0004c8  f7fffffe          BL       lwip_htonl
0004cc  6220              STR      r0,[r4,#0x20]
;;;260        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
0004ce  bf00              NOP      
0004d0  bf00              NOP      
;;;261          ip4_addr_get_u32(&dhcp->server_ip_addr)));
;;;262        /* remember offered address */
;;;263        ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
0004d2  68a0              LDR      r0,[r4,#8]
0004d4  6900              LDR      r0,[r0,#0x10]
0004d6  6260              STR      r0,[r4,#0x24]
;;;264        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
0004d8  bf00              NOP      
0004da  bf00              NOP      
;;;265          ip4_addr_get_u32(&dhcp->offered_ip_addr)));
;;;266    
;;;267        dhcp_select(netif);
0004dc  4628              MOV      r0,r5
0004de  f7fffffe          BL       dhcp_select
0004e2  e001              B        |L1.1256|
                  |L1.1252|
;;;268      } else {
;;;269        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
0004e4  bf00              NOP      
0004e6  bf00              NOP      
                  |L1.1256|
;;;270          ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
;;;271      }
;;;272    }
0004e8  bd70              POP      {r4-r6,pc}
;;;273    
                          ENDP

                  dhcp_renew PROC
;;;1021   err_t
;;;1022   dhcp_renew(struct netif *netif)
0004ea  b5f8              PUSH     {r3-r7,lr}
;;;1023   {
0004ec  4605              MOV      r5,r0
;;;1024     struct dhcp *dhcp = netif->dhcp;
0004ee  6a2c              LDR      r4,[r5,#0x20]
;;;1025     err_t result;
;;;1026     u16_t msecs;
;;;1027     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
0004f0  bf00              NOP      
0004f2  bf00              NOP      
;;;1028     dhcp_set_state(dhcp, DHCP_RENEWING);
0004f4  2105              MOVS     r1,#5
0004f6  4620              MOV      r0,r4
0004f8  f7fffffe          BL       dhcp_set_state
;;;1029   
;;;1030     /* create and initialize the DHCP message header */
;;;1031     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
0004fc  2203              MOVS     r2,#3
0004fe  4621              MOV      r1,r4
000500  4628              MOV      r0,r5
000502  f7fffffe          BL       dhcp_create_msg
000506  4606              MOV      r6,r0
;;;1032     if (result == ERR_OK) {
000508  bb5e              CBNZ     r6,|L1.1378|
;;;1033       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
00050a  2202              MOVS     r2,#2
00050c  2139              MOVS     r1,#0x39
00050e  e00b              B        |L1.1320|
                  |L1.1296|
                          DCD      xid
                  |L1.1300|
                          DCD      0x63538263
                  |L1.1304|
                          DCD      ip_addr_broadcast
                  |L1.1308|
                          DCD      ip_addr_any
                  |L1.1312|
                          DCD      dhcp_rx_options_given
                  |L1.1316|
                          DCD      dhcp_rx_options_val
                  |L1.1320|
000528  4620              MOV      r0,r4
00052a  f7fffffe          BL       dhcp_option
;;;1034       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
00052e  8ca9              LDRH     r1,[r5,#0x24]
000530  4620              MOV      r0,r4
000532  f7fffffe          BL       dhcp_option_short
;;;1035   
;;;1036   #if 0
;;;1037       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
;;;1038       dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
;;;1039   #endif
;;;1040   
;;;1041   #if 0
;;;1042       dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
;;;1043       dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
;;;1044   #endif
;;;1045   
;;;1046   #if LWIP_NETIF_HOSTNAME
;;;1047       dhcp_option_hostname(dhcp, netif);
;;;1048   #endif /* LWIP_NETIF_HOSTNAME */
;;;1049   
;;;1050       /* append DHCP message trailer */
;;;1051       dhcp_option_trailer(dhcp);
000536  4620              MOV      r0,r4
000538  f7fffffe          BL       dhcp_option_trailer
;;;1052   
;;;1053       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
00053c  8b22              LDRH     r2,[r4,#0x18]
00053e  32f0              ADDS     r2,r2,#0xf0
000540  b291              UXTH     r1,r2
000542  6920              LDR      r0,[r4,#0x10]
000544  f7fffffe          BL       pbuf_realloc
;;;1054   
;;;1055       udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
000548  9500              STR      r5,[sp,#0]
00054a  2343              MOVS     r3,#0x43
00054c  f1040220          ADD      r2,r4,#0x20
000550  6921              LDR      r1,[r4,#0x10]
000552  6860              LDR      r0,[r4,#4]
000554  f7fffffe          BL       udp_sendto_if
;;;1056       dhcp_delete_msg(dhcp);
000558  4620              MOV      r0,r4
00055a  f7fffffe          BL       dhcp_delete_msg
;;;1057   
;;;1058       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
00055e  bf00              NOP      
000560  e001              B        |L1.1382|
                  |L1.1378|
;;;1059     } else {
;;;1060       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
000562  bf00              NOP      
000564  bf00              NOP      
                  |L1.1382|
;;;1061     }
;;;1062     dhcp->tries++;
000566  7b60              LDRB     r0,[r4,#0xd]
000568  1c40              ADDS     r0,r0,#1
00056a  7360              STRB     r0,[r4,#0xd]
;;;1063     /* back-off on retries, but to a maximum of 20 seconds */
;;;1064     msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
00056c  7b60              LDRB     r0,[r4,#0xd]
00056e  280a              CMP      r0,#0xa
000570  da05              BGE      |L1.1406|
000572  7b60              LDRB     r0,[r4,#0xd]
000574  f44f61fa          MOV      r1,#0x7d0
000578  fb10f001          SMULBB   r0,r0,r1
00057c  e001              B        |L1.1410|
                  |L1.1406|
00057e  f6446020          MOV      r0,#0x4e20
                  |L1.1410|
000582  b287              UXTH     r7,r0
;;;1065     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000584  f20710f3          ADD      r0,r7,#0x1f3
000588  f44f71fa          MOV      r1,#0x1f4
00058c  fb90f0f1          SDIV     r0,r0,r1
000590  8360              STRH     r0,[r4,#0x1a]
;;;1066     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
000592  bf00              NOP      
000594  bf00              NOP      
;;;1067     return result;
000596  4630              MOV      r0,r6
;;;1068   }
000598  bdf8              POP      {r3-r7,pc}
;;;1069   
                          ENDP

                  dhcp_t1_timeout PROC
;;;464    static void
;;;465    dhcp_t1_timeout(struct netif *netif)
00059a  b570              PUSH     {r4-r6,lr}
;;;466    {
00059c  4605              MOV      r5,r0
;;;467      struct dhcp *dhcp = netif->dhcp;
00059e  6a2c              LDR      r4,[r5,#0x20]
;;;468      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
0005a0  bf00              NOP      
0005a2  bf00              NOP      
;;;469      if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
0005a4  7b20              LDRB     r0,[r4,#0xc]
0005a6  2801              CMP      r0,#1
0005a8  d005              BEQ      |L1.1462|
0005aa  7b20              LDRB     r0,[r4,#0xc]
0005ac  280a              CMP      r0,#0xa
0005ae  d002              BEQ      |L1.1462|
;;;470          (dhcp->state == DHCP_RENEWING)) {
0005b0  7b20              LDRB     r0,[r4,#0xc]
0005b2  2805              CMP      r0,#5
0005b4  d104              BNE      |L1.1472|
                  |L1.1462|
;;;471        /* just retry to renew - note that the rebind timer (t2) will
;;;472         * eventually time-out if renew tries fail. */
;;;473        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
0005b6  bf00              NOP      
0005b8  bf00              NOP      
;;;474                    ("dhcp_t1_timeout(): must renew\n"));
;;;475        /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
;;;476           DHCP_RENEWING, not DHCP_BOUND */
;;;477        dhcp_renew(netif);
0005ba  4628              MOV      r0,r5
0005bc  f7fffffe          BL       dhcp_renew
                  |L1.1472|
;;;478      }
;;;479    }
0005c0  bd70              POP      {r4-r6,pc}
;;;480    
                          ENDP

                  dhcp_rebind PROC
;;;1075   static err_t
;;;1076   dhcp_rebind(struct netif *netif)
0005c2  b5f8              PUSH     {r3-r7,lr}
;;;1077   {
0005c4  4605              MOV      r5,r0
;;;1078     struct dhcp *dhcp = netif->dhcp;
0005c6  6a2c              LDR      r4,[r5,#0x20]
;;;1079     err_t result;
;;;1080     u16_t msecs;
;;;1081     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
0005c8  bf00              NOP      
0005ca  bf00              NOP      
;;;1082     dhcp_set_state(dhcp, DHCP_REBINDING);
0005cc  2104              MOVS     r1,#4
0005ce  4620              MOV      r0,r4
0005d0  f7fffffe          BL       dhcp_set_state
;;;1083   
;;;1084     /* create and initialize the DHCP message header */
;;;1085     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
0005d4  2203              MOVS     r2,#3
0005d6  4621              MOV      r1,r4
0005d8  4628              MOV      r0,r5
0005da  f7fffffe          BL       dhcp_create_msg
0005de  4606              MOV      r6,r0
;;;1086     if (result == ERR_OK) {
0005e0  b9ee              CBNZ     r6,|L1.1566|
;;;1087       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
0005e2  2202              MOVS     r2,#2
0005e4  2139              MOVS     r1,#0x39
0005e6  4620              MOV      r0,r4
0005e8  f7fffffe          BL       dhcp_option
;;;1088       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
0005ec  8ca9              LDRH     r1,[r5,#0x24]
0005ee  4620              MOV      r0,r4
0005f0  f7fffffe          BL       dhcp_option_short
;;;1089   
;;;1090   #if LWIP_NETIF_HOSTNAME
;;;1091       dhcp_option_hostname(dhcp, netif);
;;;1092   #endif /* LWIP_NETIF_HOSTNAME */
;;;1093   
;;;1094   #if 0
;;;1095       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
;;;1096       dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
;;;1097   
;;;1098       dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
;;;1099       dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
;;;1100   #endif
;;;1101   
;;;1102       dhcp_option_trailer(dhcp);
0005f4  4620              MOV      r0,r4
0005f6  f7fffffe          BL       dhcp_option_trailer
;;;1103   
;;;1104       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
0005fa  8b22              LDRH     r2,[r4,#0x18]
0005fc  32f0              ADDS     r2,r2,#0xf0
0005fe  b291              UXTH     r1,r2
000600  6920              LDR      r0,[r4,#0x10]
000602  f7fffffe          BL       pbuf_realloc
;;;1105   
;;;1106       /* broadcast to server */
;;;1107       udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000606  9500              STR      r5,[sp,#0]
000608  2343              MOVS     r3,#0x43
00060a  4af9              LDR      r2,|L1.2544|
00060c  6921              LDR      r1,[r4,#0x10]
00060e  6860              LDR      r0,[r4,#4]
000610  f7fffffe          BL       udp_sendto_if
;;;1108       dhcp_delete_msg(dhcp);
000614  4620              MOV      r0,r4
000616  f7fffffe          BL       dhcp_delete_msg
;;;1109       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
00061a  bf00              NOP      
00061c  e001              B        |L1.1570|
                  |L1.1566|
;;;1110     } else {
;;;1111       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
00061e  bf00              NOP      
000620  bf00              NOP      
                  |L1.1570|
;;;1112     }
;;;1113     dhcp->tries++;
000622  7b60              LDRB     r0,[r4,#0xd]
000624  1c40              ADDS     r0,r0,#1
000626  7360              STRB     r0,[r4,#0xd]
;;;1114     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
000628  7b60              LDRB     r0,[r4,#0xd]
00062a  280a              CMP      r0,#0xa
00062c  da05              BGE      |L1.1594|
00062e  7b60              LDRB     r0,[r4,#0xd]
000630  f44f717a          MOV      r1,#0x3e8
000634  fb10f001          SMULBB   r0,r0,r1
000638  e001              B        |L1.1598|
                  |L1.1594|
00063a  f2427010          MOV      r0,#0x2710
                  |L1.1598|
00063e  b287              UXTH     r7,r0
;;;1115     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000640  f20710f3          ADD      r0,r7,#0x1f3
000644  f44f71fa          MOV      r1,#0x1f4
000648  fb90f0f1          SDIV     r0,r0,r1
00064c  8360              STRH     r0,[r4,#0x1a]
;;;1116     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
00064e  bf00              NOP      
000650  bf00              NOP      
;;;1117     return result;
000652  4630              MOV      r0,r6
;;;1118   }
000654  bdf8              POP      {r3-r7,pc}
;;;1119   
                          ENDP

                  dhcp_t2_timeout PROC
;;;486    static void
;;;487    dhcp_t2_timeout(struct netif *netif)
000656  b570              PUSH     {r4-r6,lr}
;;;488    {
000658  4605              MOV      r5,r0
;;;489      struct dhcp *dhcp = netif->dhcp;
00065a  6a2c              LDR      r4,[r5,#0x20]
;;;490      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
00065c  bf00              NOP      
00065e  bf00              NOP      
;;;491      if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) ||
000660  7b20              LDRB     r0,[r4,#0xc]
000662  2801              CMP      r0,#1
000664  d005              BEQ      |L1.1650|
000666  7b20              LDRB     r0,[r4,#0xc]
000668  280a              CMP      r0,#0xa
00066a  d002              BEQ      |L1.1650|
;;;492          (dhcp->state == DHCP_RENEWING)) {
00066c  7b20              LDRB     r0,[r4,#0xc]
00066e  2805              CMP      r0,#5
000670  d104              BNE      |L1.1660|
                  |L1.1650|
;;;493        /* just retry to rebind */
;;;494        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
000672  bf00              NOP      
000674  bf00              NOP      
;;;495                    ("dhcp_t2_timeout(): must rebind\n"));
;;;496        /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
;;;497           DHCP_REBINDING, not DHCP_BOUND */
;;;498        dhcp_rebind(netif);
000676  4628              MOV      r0,r5
000678  f7fffffe          BL       dhcp_rebind
                  |L1.1660|
;;;499      }
;;;500    }
00067c  bd70              POP      {r4-r6,pc}
;;;501    
                          ENDP

                  dhcp_coarse_tmr PROC
;;;336    void
;;;337    dhcp_coarse_tmr()
00067e  b510              PUSH     {r4,lr}
;;;338    {
;;;339      struct netif *netif = netif_list;
000680  48dc              LDR      r0,|L1.2548|
000682  6804              LDR      r4,[r0,#0]  ; netif_list
;;;340      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
000684  bf00              NOP      
000686  bf00              NOP      
;;;341      /* iterate through all network interfaces */
;;;342      while (netif != NULL) {
000688  e01b              B        |L1.1730|
                  |L1.1674|
;;;343        /* only act on DHCP configured interfaces */
;;;344        if (netif->dhcp != NULL) {
00068a  6a20              LDR      r0,[r4,#0x20]
00068c  b1c0              CBZ      r0,|L1.1728|
;;;345          /* timer is active (non zero), and triggers (zeroes) now? */
;;;346          if (netif->dhcp->t2_timeout-- == 1) {
00068e  6a20              LDR      r0,[r4,#0x20]
000690  8bc1              LDRH     r1,[r0,#0x1e]
000692  1e48              SUBS     r0,r1,#1
000694  6a22              LDR      r2,[r4,#0x20]
000696  83d0              STRH     r0,[r2,#0x1e]
000698  2901              CMP      r1,#1
00069a  d105              BNE      |L1.1704|
;;;347            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
00069c  bf00              NOP      
00069e  bf00              NOP      
;;;348            /* this clients' rebind timeout triggered */
;;;349            dhcp_t2_timeout(netif);
0006a0  4620              MOV      r0,r4
0006a2  f7fffffe          BL       dhcp_t2_timeout
0006a6  e00b              B        |L1.1728|
                  |L1.1704|
;;;350          /* timer is active (non zero), and triggers (zeroes) now */
;;;351          } else if (netif->dhcp->t1_timeout-- == 1) {
0006a8  6a20              LDR      r0,[r4,#0x20]
0006aa  8b81              LDRH     r1,[r0,#0x1c]
0006ac  1e48              SUBS     r0,r1,#1
0006ae  6a22              LDR      r2,[r4,#0x20]
0006b0  8390              STRH     r0,[r2,#0x1c]
0006b2  2901              CMP      r1,#1
0006b4  d104              BNE      |L1.1728|
;;;352            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
0006b6  bf00              NOP      
0006b8  bf00              NOP      
;;;353            /* this clients' renewal timeout triggered */
;;;354            dhcp_t1_timeout(netif);
0006ba  4620              MOV      r0,r4
0006bc  f7fffffe          BL       dhcp_t1_timeout
                  |L1.1728|
;;;355          }
;;;356        }
;;;357        /* proceed to next netif */
;;;358        netif = netif->next;
0006c0  6824              LDR      r4,[r4,#0]
                  |L1.1730|
0006c2  2c00              CMP      r4,#0                 ;342
0006c4  d1e1              BNE      |L1.1674|
;;;359      }
;;;360    }
0006c6  bd10              POP      {r4,pc}
;;;361    
                          ENDP

                  dhcp_reboot PROC
;;;1125   static err_t
;;;1126   dhcp_reboot(struct netif *netif)
0006c8  e92d43f8          PUSH     {r3-r9,lr}
;;;1127   {
0006cc  4605              MOV      r5,r0
;;;1128     struct dhcp *dhcp = netif->dhcp;
0006ce  6a2c              LDR      r4,[r5,#0x20]
;;;1129     err_t result;
;;;1130     u16_t msecs;
;;;1131     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
0006d0  bf00              NOP      
0006d2  bf00              NOP      
;;;1132     dhcp_set_state(dhcp, DHCP_REBOOTING);
0006d4  2103              MOVS     r1,#3
0006d6  4620              MOV      r0,r4
0006d8  f7fffffe          BL       dhcp_set_state
;;;1133   
;;;1134     /* create and initialize the DHCP message header */
;;;1135     result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
0006dc  2203              MOVS     r2,#3
0006de  4621              MOV      r1,r4
0006e0  4628              MOV      r0,r5
0006e2  f7fffffe          BL       dhcp_create_msg
0006e6  4606              MOV      r6,r0
;;;1136     if (result == ERR_OK) {
0006e8  bb5e              CBNZ     r6,|L1.1858|
;;;1137       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
0006ea  2202              MOVS     r2,#2
0006ec  2139              MOVS     r1,#0x39
0006ee  4620              MOV      r0,r4
0006f0  f7fffffe          BL       dhcp_option
;;;1138       dhcp_option_short(dhcp, 576);
0006f4  f44f7110          MOV      r1,#0x240
0006f8  4620              MOV      r0,r4
0006fa  f7fffffe          BL       dhcp_option_short
;;;1139   
;;;1140       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
0006fe  2204              MOVS     r2,#4
000700  2132              MOVS     r1,#0x32
000702  4620              MOV      r0,r4
000704  f7fffffe          BL       dhcp_option
;;;1141       dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
000708  6a60              LDR      r0,[r4,#0x24]
00070a  f7fffffe          BL       lwip_ntohl
00070e  4680              MOV      r8,r0
000710  4641              MOV      r1,r8
000712  4620              MOV      r0,r4
000714  f7fffffe          BL       dhcp_option_long
;;;1142   
;;;1143       dhcp_option_trailer(dhcp);
000718  4620              MOV      r0,r4
00071a  f7fffffe          BL       dhcp_option_trailer
;;;1144   
;;;1145       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
00071e  8b22              LDRH     r2,[r4,#0x18]
000720  32f0              ADDS     r2,r2,#0xf0
000722  b291              UXTH     r1,r2
000724  6920              LDR      r0,[r4,#0x10]
000726  f7fffffe          BL       pbuf_realloc
;;;1146   
;;;1147       /* broadcast to server */
;;;1148       udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
00072a  9500              STR      r5,[sp,#0]
00072c  2343              MOVS     r3,#0x43
00072e  4ab0              LDR      r2,|L1.2544|
000730  6921              LDR      r1,[r4,#0x10]
000732  6860              LDR      r0,[r4,#4]
000734  f7fffffe          BL       udp_sendto_if
;;;1149       dhcp_delete_msg(dhcp);
000738  4620              MOV      r0,r4
00073a  f7fffffe          BL       dhcp_delete_msg
;;;1150       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
00073e  bf00              NOP      
000740  e001              B        |L1.1862|
                  |L1.1858|
;;;1151     } else {
;;;1152       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
000742  bf00              NOP      
000744  bf00              NOP      
                  |L1.1862|
;;;1153     }
;;;1154     dhcp->tries++;
000746  7b60              LDRB     r0,[r4,#0xd]
000748  1c40              ADDS     r0,r0,#1
00074a  7360              STRB     r0,[r4,#0xd]
;;;1155     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
00074c  7b60              LDRB     r0,[r4,#0xd]
00074e  280a              CMP      r0,#0xa
000750  da05              BGE      |L1.1886|
000752  7b60              LDRB     r0,[r4,#0xd]
000754  f44f717a          MOV      r1,#0x3e8
000758  fb10f001          SMULBB   r0,r0,r1
00075c  e001              B        |L1.1890|
                  |L1.1886|
00075e  f2427010          MOV      r0,#0x2710
                  |L1.1890|
000762  b287              UXTH     r7,r0
;;;1156     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000764  f20710f3          ADD      r0,r7,#0x1f3
000768  f44f71fa          MOV      r1,#0x1f4
00076c  fb90f0f1          SDIV     r0,r0,r1
000770  8360              STRH     r0,[r4,#0x1a]
;;;1157     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
000772  bf00              NOP      
000774  bf00              NOP      
;;;1158     return result;
000776  4630              MOV      r0,r6
;;;1159   }
000778  e8bd83f8          POP      {r3-r9,pc}
;;;1160   
                          ENDP

                  dhcp_release PROC
;;;1167   err_t
;;;1168   dhcp_release(struct netif *netif)
00077c  b5f8              PUSH     {r3-r7,lr}
;;;1169   {
00077e  4605              MOV      r5,r0
;;;1170     struct dhcp *dhcp = netif->dhcp;
000780  6a2c              LDR      r4,[r5,#0x20]
;;;1171     err_t result;
;;;1172     u16_t msecs;
;;;1173     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
000782  bf00              NOP      
000784  bf00              NOP      
;;;1174   
;;;1175     /* idle DHCP client */
;;;1176     dhcp_set_state(dhcp, DHCP_OFF);
000786  2100              MOVS     r1,#0
000788  4620              MOV      r0,r4
00078a  f7fffffe          BL       dhcp_set_state
;;;1177     /* clean old DHCP offer */
;;;1178     ip_addr_set_zero(&dhcp->server_ip_addr);
00078e  2000              MOVS     r0,#0
000790  6220              STR      r0,[r4,#0x20]
;;;1179     ip_addr_set_zero(&dhcp->offered_ip_addr);
000792  6260              STR      r0,[r4,#0x24]
;;;1180     ip_addr_set_zero(&dhcp->offered_sn_mask);
000794  62a0              STR      r0,[r4,#0x28]
;;;1181     ip_addr_set_zero(&dhcp->offered_gw_addr);
000796  62e0              STR      r0,[r4,#0x2c]
;;;1182   #if LWIP_DHCP_BOOTP_FILE
;;;1183     ip_addr_set_zero(&dhcp->offered_si_addr);
;;;1184   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1185     dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
000798  63a0              STR      r0,[r4,#0x38]
00079a  6360              STR      r0,[r4,#0x34]
00079c  6320              STR      r0,[r4,#0x30]
;;;1186     
;;;1187     /* create and initialize the DHCP message header */
;;;1188     result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
00079e  2207              MOVS     r2,#7
0007a0  4621              MOV      r1,r4
0007a2  4628              MOV      r0,r5
0007a4  f7fffffe          BL       dhcp_create_msg
0007a8  4606              MOV      r6,r0
;;;1189     if (result == ERR_OK) {
0007aa  b9ae              CBNZ     r6,|L1.2008|
;;;1190       dhcp_option_trailer(dhcp);
0007ac  4620              MOV      r0,r4
0007ae  f7fffffe          BL       dhcp_option_trailer
;;;1191   
;;;1192       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
0007b2  8b22              LDRH     r2,[r4,#0x18]
0007b4  32f0              ADDS     r2,r2,#0xf0
0007b6  b291              UXTH     r1,r2
0007b8  6920              LDR      r0,[r4,#0x10]
0007ba  f7fffffe          BL       pbuf_realloc
;;;1193   
;;;1194       udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
0007be  9500              STR      r5,[sp,#0]
0007c0  2343              MOVS     r3,#0x43
0007c2  f1040220          ADD      r2,r4,#0x20
0007c6  6921              LDR      r1,[r4,#0x10]
0007c8  6860              LDR      r0,[r4,#4]
0007ca  f7fffffe          BL       udp_sendto_if
;;;1195       dhcp_delete_msg(dhcp);
0007ce  4620              MOV      r0,r4
0007d0  f7fffffe          BL       dhcp_delete_msg
;;;1196       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
0007d4  bf00              NOP      
0007d6  e001              B        |L1.2012|
                  |L1.2008|
;;;1197     } else {
;;;1198       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
0007d8  bf00              NOP      
0007da  bf00              NOP      
                  |L1.2012|
;;;1199     }
;;;1200     dhcp->tries++;
0007dc  7b60              LDRB     r0,[r4,#0xd]
0007de  1c40              ADDS     r0,r0,#1
0007e0  7360              STRB     r0,[r4,#0xd]
;;;1201     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
0007e2  7b60              LDRB     r0,[r4,#0xd]
0007e4  280a              CMP      r0,#0xa
0007e6  da05              BGE      |L1.2036|
0007e8  7b60              LDRB     r0,[r4,#0xd]
0007ea  f44f717a          MOV      r1,#0x3e8
0007ee  fb10f001          SMULBB   r0,r0,r1
0007f2  e001              B        |L1.2040|
                  |L1.2036|
0007f4  f2427010          MOV      r0,#0x2710
                  |L1.2040|
0007f8  b287              UXTH     r7,r0
;;;1202     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0007fa  f20710f3          ADD      r0,r7,#0x1f3
0007fe  f44f71fa          MOV      r1,#0x1f4
000802  fb90f0f1          SDIV     r0,r0,r1
000806  8360              STRH     r0,[r4,#0x1a]
;;;1203     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
000808  bf00              NOP      
00080a  bf00              NOP      
;;;1204     /* bring the interface down */
;;;1205     netif_set_down(netif);
00080c  4628              MOV      r0,r5
00080e  f7fffffe          BL       netif_set_down
;;;1206     /* remove IP address from interface */
;;;1207     netif_set_ipaddr(netif, IP_ADDR_ANY);
000812  4979              LDR      r1,|L1.2552|
000814  4628              MOV      r0,r5
000816  f7fffffe          BL       netif_set_ipaddr
;;;1208     netif_set_gw(netif, IP_ADDR_ANY);
00081a  4977              LDR      r1,|L1.2552|
00081c  4628              MOV      r0,r5
00081e  f7fffffe          BL       netif_set_gw
;;;1209     netif_set_netmask(netif, IP_ADDR_ANY);
000822  4975              LDR      r1,|L1.2552|
000824  4628              MOV      r0,r5
000826  f7fffffe          BL       netif_set_netmask
;;;1210     
;;;1211     return result;
00082a  4630              MOV      r0,r6
;;;1212   }
00082c  bdf8              POP      {r3-r7,pc}
;;;1213   
                          ENDP

                  dhcp_bind PROC
;;;926    static void
;;;927    dhcp_bind(struct netif *netif)
00082e  b57c              PUSH     {r2-r6,lr}
;;;928    {
000830  4606              MOV      r6,r0
;;;929      u32_t timeout;
;;;930      struct dhcp *dhcp;
;;;931      ip_addr_t sn_mask, gw_addr;
;;;932      LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
000832  bf00              NOP      
000834  b906              CBNZ     r6,|L1.2104|
                  |L1.2102|
;;;933      dhcp = netif->dhcp;
;;;934      LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
;;;935      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;936    
;;;937      /* temporary DHCP lease? */
;;;938      if (dhcp->offered_t1_renew != 0xffffffffUL) {
;;;939        /* set renewal period timer */
;;;940        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
;;;941        timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
;;;942        if(timeout > 0xffff) {
;;;943          timeout = 0xffff;
;;;944        }
;;;945        dhcp->t1_timeout = (u16_t)timeout;
;;;946        if (dhcp->t1_timeout == 0) {
;;;947          dhcp->t1_timeout = 1;
;;;948        }
;;;949        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
;;;950      }
;;;951      /* set renewal period timer */
;;;952      if (dhcp->offered_t2_rebind != 0xffffffffUL) {
;;;953        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
;;;954        timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
;;;955        if(timeout > 0xffff) {
;;;956          timeout = 0xffff;
;;;957        }
;;;958        dhcp->t2_timeout = (u16_t)timeout;
;;;959        if (dhcp->t2_timeout == 0) {
;;;960          dhcp->t2_timeout = 1;
;;;961        }
;;;962        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
;;;963      }
;;;964    
;;;965      /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
;;;966      if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
;;;967        dhcp->t1_timeout = 0;
;;;968      }
;;;969    
;;;970      if (dhcp->subnet_mask_given) {
;;;971        /* copy offered network mask */
;;;972        ip_addr_copy(sn_mask, dhcp->offered_sn_mask);
;;;973      } else {
;;;974        /* subnet mask not given, choose a safe subnet mask given the network class */
;;;975        u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
;;;976        if (first_octet <= 127) {
;;;977          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
;;;978        } else if (first_octet >= 192) {
;;;979          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
;;;980        } else {
;;;981          ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
;;;982        }
;;;983      }
;;;984    
;;;985      ip_addr_copy(gw_addr, dhcp->offered_gw_addr);
;;;986      /* gateway address not given? */
;;;987      if (ip_addr_isany(&gw_addr)) {
;;;988        /* copy network address */
;;;989        ip_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
;;;990        /* use first host address on network as gateway */
;;;991        ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
;;;992      }
;;;993    
;;;994    #if LWIP_DHCP_AUTOIP_COOP
;;;995      if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;996        autoip_stop(netif);
;;;997        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;998      }
;;;999    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1000   
;;;1001     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n",
;;;1002       ip4_addr_get_u32(&dhcp->offered_ip_addr)));
;;;1003     netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
;;;1004     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n",
;;;1005       ip4_addr_get_u32(&sn_mask)));
;;;1006     netif_set_netmask(netif, &sn_mask);
;;;1007     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n",
;;;1008       ip4_addr_get_u32(&gw_addr)));
;;;1009     netif_set_gw(netif, &gw_addr);
;;;1010     /* bring the interface up */
;;;1011     netif_set_up(netif);
;;;1012     /* netif is now bound to DHCP leased address */
;;;1013     dhcp_set_state(dhcp, DHCP_BOUND);
;;;1014   }
000836  bd7c              POP      {r2-r6,pc}
                  |L1.2104|
000838  bf00              NOP                            ;932
00083a  6a34              LDR      r4,[r6,#0x20]         ;933
00083c  bf00              NOP                            ;934
00083e  b904              CBNZ     r4,|L1.2114|
000840  e7f9              B        |L1.2102|
                  |L1.2114|
000842  bf00              NOP                            ;934
000844  bf00              NOP                            ;935
000846  bf00              NOP                            ;935
000848  6b60              LDR      r0,[r4,#0x34]         ;938
00084a  1c40              ADDS     r0,r0,#1              ;938
00084c  b190              CBZ      r0,|L1.2164|
00084e  bf00              NOP                            ;940
000850  bf00              NOP                            ;940
000852  6b60              LDR      r0,[r4,#0x34]         ;941
000854  301e              ADDS     r0,r0,#0x1e           ;941
000856  213c              MOVS     r1,#0x3c              ;941
000858  fbb0f5f1          UDIV     r5,r0,r1              ;941
00085c  f5b53f80          CMP      r5,#0x10000           ;942
000860  d301              BCC      |L1.2150|
000862  f64f75ff          MOV      r5,#0xffff            ;943
                  |L1.2150|
000866  83a5              STRH     r5,[r4,#0x1c]         ;945
000868  8ba0              LDRH     r0,[r4,#0x1c]         ;946
00086a  b908              CBNZ     r0,|L1.2160|
00086c  2001              MOVS     r0,#1                 ;947
00086e  83a0              STRH     r0,[r4,#0x1c]         ;947
                  |L1.2160|
000870  bf00              NOP                            ;949
000872  bf00              NOP                            ;949
                  |L1.2164|
000874  6ba0              LDR      r0,[r4,#0x38]         ;952
000876  1c40              ADDS     r0,r0,#1              ;952
000878  b190              CBZ      r0,|L1.2208|
00087a  bf00              NOP                            ;953
00087c  bf00              NOP                            ;953
00087e  6ba0              LDR      r0,[r4,#0x38]         ;954
000880  301e              ADDS     r0,r0,#0x1e           ;954
000882  213c              MOVS     r1,#0x3c              ;954
000884  fbb0f5f1          UDIV     r5,r0,r1              ;954
000888  f5b53f80          CMP      r5,#0x10000           ;955
00088c  d301              BCC      |L1.2194|
00088e  f64f75ff          MOV      r5,#0xffff            ;956
                  |L1.2194|
000892  83e5              STRH     r5,[r4,#0x1e]         ;958
000894  8be0              LDRH     r0,[r4,#0x1e]         ;959
000896  b908              CBNZ     r0,|L1.2204|
000898  2001              MOVS     r0,#1                 ;960
00089a  83e0              STRH     r0,[r4,#0x1e]         ;960
                  |L1.2204|
00089c  bf00              NOP                            ;962
00089e  bf00              NOP                            ;962
                  |L1.2208|
0008a0  8ba0              LDRH     r0,[r4,#0x1c]         ;966
0008a2  8be1              LDRH     r1,[r4,#0x1e]         ;966
0008a4  4288              CMP      r0,r1                 ;966
0008a6  db04              BLT      |L1.2226|
0008a8  8be0              LDRH     r0,[r4,#0x1e]         ;966
0008aa  2800              CMP      r0,#0                 ;966
0008ac  dd01              BLE      |L1.2226|
0008ae  2000              MOVS     r0,#0                 ;967
0008b0  83a0              STRH     r0,[r4,#0x1c]         ;967
                  |L1.2226|
0008b2  7ba0              LDRB     r0,[r4,#0xe]          ;970
0008b4  b110              CBZ      r0,|L1.2236|
0008b6  6aa0              LDR      r0,[r4,#0x28]         ;972
0008b8  9001              STR      r0,[sp,#4]            ;972
0008ba  e010              B        |L1.2270|
                  |L1.2236|
0008bc  f8940024          LDRB     r0,[r4,#0x24]         ;975
0008c0  287f              CMP      r0,#0x7f              ;976
0008c2  dc02              BGT      |L1.2250|
0008c4  21ff              MOVS     r1,#0xff              ;977
0008c6  9101              STR      r1,[sp,#4]            ;977
0008c8  e008              B        |L1.2268|
                  |L1.2250|
0008ca  28c0              CMP      r0,#0xc0              ;978
0008cc  db03              BLT      |L1.2262|
0008ce  f06f417f          MVN      r1,#0xff000000        ;979
0008d2  9101              STR      r1,[sp,#4]            ;979
0008d4  e002              B        |L1.2268|
                  |L1.2262|
0008d6  f64f71ff          MOV      r1,#0xffff            ;981
0008da  9101              STR      r1,[sp,#4]            ;981
                  |L1.2268|
0008dc  bf00              NOP                            ;983
                  |L1.2270|
0008de  6ae0              LDR      r0,[r4,#0x2c]         ;985
0008e0  9000              STR      r0,[sp,#0]            ;985
0008e2  4668              MOV      r0,sp                 ;987
0008e4  b108              CBZ      r0,|L1.2282|
0008e6  9800              LDR      r0,[sp,#0]            ;987
0008e8  b938              CBNZ     r0,|L1.2298|
                  |L1.2282|
0008ea  6a60              LDR      r0,[r4,#0x24]         ;989
0008ec  9901              LDR      r1,[sp,#4]            ;989
0008ee  4008              ANDS     r0,r0,r1              ;989
0008f0  9000              STR      r0,[sp,#0]            ;989
0008f2  9800              LDR      r0,[sp,#0]            ;991
0008f4  f0407080          ORR      r0,r0,#0x1000000      ;991
0008f8  9000              STR      r0,[sp,#0]            ;991
                  |L1.2298|
0008fa  bf00              NOP                            ;1001
0008fc  bf00              NOP                            ;1001
0008fe  f1040124          ADD      r1,r4,#0x24           ;1003
000902  4630              MOV      r0,r6                 ;1003
000904  f7fffffe          BL       netif_set_ipaddr
000908  bf00              NOP                            ;1004
00090a  bf00              NOP                            ;1004
00090c  a901              ADD      r1,sp,#4              ;1006
00090e  4630              MOV      r0,r6                 ;1006
000910  f7fffffe          BL       netif_set_netmask
000914  bf00              NOP                            ;1007
000916  bf00              NOP                            ;1007
000918  4669              MOV      r1,sp                 ;1009
00091a  4630              MOV      r0,r6                 ;1009
00091c  f7fffffe          BL       netif_set_gw
000920  4630              MOV      r0,r6                 ;1011
000922  f7fffffe          BL       netif_set_up
000926  210a              MOVS     r1,#0xa               ;1013
000928  4620              MOV      r0,r4                 ;1013
00092a  f7fffffe          BL       dhcp_set_state
00092e  bf00              NOP      
000930  e781              B        |L1.2102|
;;;1015   
                          ENDP

                  dhcp_timeout PROC
;;;401    static void
;;;402    dhcp_timeout(struct netif *netif)
000932  b570              PUSH     {r4-r6,lr}
;;;403    {
000934  4605              MOV      r5,r0
;;;404      struct dhcp *dhcp = netif->dhcp;
000936  6a2c              LDR      r4,[r5,#0x20]
;;;405      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
000938  bf00              NOP      
00093a  bf00              NOP      
;;;406      /* back-off period has passed, or server selection timed out */
;;;407      if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
00093c  7b20              LDRB     r0,[r4,#0xc]
00093e  280c              CMP      r0,#0xc
000940  d002              BEQ      |L1.2376|
000942  7b20              LDRB     r0,[r4,#0xc]
000944  2806              CMP      r0,#6
000946  d105              BNE      |L1.2388|
                  |L1.2376|
;;;408        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
000948  bf00              NOP      
00094a  bf00              NOP      
;;;409        dhcp_discover(netif);
00094c  4628              MOV      r0,r5
00094e  f7fffffe          BL       dhcp_discover
000952  e056              B        |L1.2562|
                  |L1.2388|
;;;410      /* receiving the requested lease timed out */
;;;411      } else if (dhcp->state == DHCP_REQUESTING) {
000954  7b20              LDRB     r0,[r4,#0xc]
000956  2801              CMP      r0,#1
000958  d111              BNE      |L1.2430|
;;;412        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
00095a  bf00              NOP      
00095c  bf00              NOP      
;;;413        if (dhcp->tries <= 5) {
00095e  7b60              LDRB     r0,[r4,#0xd]
000960  2805              CMP      r0,#5
000962  dc03              BGT      |L1.2412|
;;;414          dhcp_select(netif);
000964  4628              MOV      r0,r5
000966  f7fffffe          BL       dhcp_select
00096a  e04a              B        |L1.2562|
                  |L1.2412|
;;;415        } else {
;;;416          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
00096c  bf00              NOP      
00096e  bf00              NOP      
;;;417          dhcp_release(netif);
000970  4628              MOV      r0,r5
000972  f7fffffe          BL       dhcp_release
;;;418          dhcp_discover(netif);
000976  4628              MOV      r0,r5
000978  f7fffffe          BL       dhcp_discover
00097c  e041              B        |L1.2562|
                  |L1.2430|
;;;419        }
;;;420    #if DHCP_DOES_ARP_CHECK
;;;421      /* received no ARP reply for the offered address (which is good) */
;;;422      } else if (dhcp->state == DHCP_CHECKING) {
00097e  7b20              LDRB     r0,[r4,#0xc]
000980  2808              CMP      r0,#8
000982  d10c              BNE      |L1.2462|
;;;423        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
000984  bf00              NOP      
000986  bf00              NOP      
;;;424        if (dhcp->tries <= 1) {
000988  7b60              LDRB     r0,[r4,#0xd]
00098a  2801              CMP      r0,#1
00098c  dc03              BGT      |L1.2454|
;;;425          dhcp_check(netif);
00098e  4628              MOV      r0,r5
000990  f7fffffe          BL       dhcp_check
000994  e035              B        |L1.2562|
                  |L1.2454|
;;;426        /* no ARP replies on the offered address,
;;;427           looks like the IP address is indeed free */
;;;428        } else {
;;;429          /* bind the interface to the offered address */
;;;430          dhcp_bind(netif);
000996  4628              MOV      r0,r5
000998  f7fffffe          BL       dhcp_bind
00099c  e031              B        |L1.2562|
                  |L1.2462|
;;;431        }
;;;432    #endif /* DHCP_DOES_ARP_CHECK */
;;;433      }
;;;434      /* did not get response to renew request? */
;;;435      else if (dhcp->state == DHCP_RENEWING) {
00099e  7b20              LDRB     r0,[r4,#0xc]
0009a0  2805              CMP      r0,#5
0009a2  d105              BNE      |L1.2480|
;;;436        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
0009a4  bf00              NOP      
0009a6  bf00              NOP      
;;;437        /* just retry renewal */
;;;438        /* note that the rebind timer will eventually time-out if renew does not work */
;;;439        dhcp_renew(netif);
0009a8  4628              MOV      r0,r5
0009aa  f7fffffe          BL       dhcp_renew
0009ae  e028              B        |L1.2562|
                  |L1.2480|
;;;440      /* did not get response to rebind request? */
;;;441      } else if (dhcp->state == DHCP_REBINDING) {
0009b0  7b20              LDRB     r0,[r4,#0xc]
0009b2  2804              CMP      r0,#4
0009b4  d111              BNE      |L1.2522|
;;;442        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
0009b6  bf00              NOP      
0009b8  bf00              NOP      
;;;443        if (dhcp->tries <= 8) {
0009ba  7b60              LDRB     r0,[r4,#0xd]
0009bc  2808              CMP      r0,#8
0009be  dc03              BGT      |L1.2504|
;;;444          dhcp_rebind(netif);
0009c0  4628              MOV      r0,r5
0009c2  f7fffffe          BL       dhcp_rebind
0009c6  e01c              B        |L1.2562|
                  |L1.2504|
;;;445        } else {
;;;446          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
0009c8  bf00              NOP      
0009ca  bf00              NOP      
;;;447          dhcp_release(netif);
0009cc  4628              MOV      r0,r5
0009ce  f7fffffe          BL       dhcp_release
;;;448          dhcp_discover(netif);
0009d2  4628              MOV      r0,r5
0009d4  f7fffffe          BL       dhcp_discover
0009d8  e013              B        |L1.2562|
                  |L1.2522|
;;;449        }
;;;450      } else if (dhcp->state == DHCP_REBOOTING) {
0009da  7b20              LDRB     r0,[r4,#0xc]
0009dc  2803              CMP      r0,#3
0009de  d110              BNE      |L1.2562|
;;;451        if (dhcp->tries < REBOOT_TRIES) {
0009e0  7b60              LDRB     r0,[r4,#0xd]
0009e2  2802              CMP      r0,#2
0009e4  da0a              BGE      |L1.2556|
;;;452          dhcp_reboot(netif);
0009e6  4628              MOV      r0,r5
0009e8  f7fffffe          BL       dhcp_reboot
0009ec  e009              B        |L1.2562|
0009ee  0000              DCW      0x0000
                  |L1.2544|
                          DCD      ip_addr_broadcast
                  |L1.2548|
                          DCD      netif_list
                  |L1.2552|
                          DCD      ip_addr_any
                  |L1.2556|
;;;453        } else {
;;;454          dhcp_discover(netif);
0009fc  4628              MOV      r0,r5
0009fe  f7fffffe          BL       dhcp_discover
                  |L1.2562|
;;;455        }
;;;456      }
;;;457    }
000a02  bd70              POP      {r4-r6,pc}
;;;458    
                          ENDP

                  dhcp_fine_tmr PROC
;;;368    void
;;;369    dhcp_fine_tmr()
000a04  b510              PUSH     {r4,lr}
;;;370    {
;;;371      struct netif *netif = netif_list;
000a06  48fe              LDR      r0,|L1.3584|
000a08  6804              LDR      r4,[r0,#0]  ; netif_list
;;;372      /* loop through netif's */
;;;373      while (netif != NULL) {
000a0a  e01a              B        |L1.2626|
                  |L1.2572|
;;;374        /* only act on DHCP configured interfaces */
;;;375        if (netif->dhcp != NULL) {
000a0c  6a20              LDR      r0,[r4,#0x20]
000a0e  b1b8              CBZ      r0,|L1.2624|
;;;376          /* timer is active (non zero), and is about to trigger now */      
;;;377          if (netif->dhcp->request_timeout > 1) {
000a10  6a20              LDR      r0,[r4,#0x20]
000a12  8b40              LDRH     r0,[r0,#0x1a]
000a14  2801              CMP      r0,#1
000a16  dd05              BLE      |L1.2596|
;;;378            netif->dhcp->request_timeout--;
000a18  6a20              LDR      r0,[r4,#0x20]
000a1a  8b40              LDRH     r0,[r0,#0x1a]
000a1c  1e40              SUBS     r0,r0,#1
000a1e  6a21              LDR      r1,[r4,#0x20]
000a20  8348              STRH     r0,[r1,#0x1a]
000a22  e00d              B        |L1.2624|
                  |L1.2596|
;;;379          }
;;;380          else if (netif->dhcp->request_timeout == 1) {
000a24  6a20              LDR      r0,[r4,#0x20]
000a26  8b40              LDRH     r0,[r0,#0x1a]
000a28  2801              CMP      r0,#1
000a2a  d109              BNE      |L1.2624|
;;;381            netif->dhcp->request_timeout--;
000a2c  6a20              LDR      r0,[r4,#0x20]
000a2e  8b40              LDRH     r0,[r0,#0x1a]
000a30  1e40              SUBS     r0,r0,#1
000a32  6a21              LDR      r1,[r4,#0x20]
000a34  8348              STRH     r0,[r1,#0x1a]
;;;382            /* { netif->dhcp->request_timeout == 0 } */
;;;383            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
000a36  bf00              NOP      
000a38  bf00              NOP      
;;;384            /* this client's request timeout triggered */
;;;385            dhcp_timeout(netif);
000a3a  4620              MOV      r0,r4
000a3c  f7fffffe          BL       dhcp_timeout
                  |L1.2624|
;;;386          }
;;;387        }
;;;388        /* proceed to next network interface */
;;;389        netif = netif->next;
000a40  6824              LDR      r4,[r4,#0]
                  |L1.2626|
000a42  2c00              CMP      r4,#0                 ;373
000a44  d1e2              BNE      |L1.2572|
;;;390      }
;;;391    }
000a46  bd10              POP      {r4,pc}
;;;392    
                          ENDP

                  dhcp_handle_ack PROC
;;;507    static void
;;;508    dhcp_handle_ack(struct netif *netif)
000a48  b570              PUSH     {r4-r6,lr}
;;;509    {
000a4a  4605              MOV      r5,r0
;;;510      struct dhcp *dhcp = netif->dhcp;
000a4c  6a2c              LDR      r4,[r5,#0x20]
;;;511    #if LWIP_DNS
;;;512      u8_t n;
;;;513    #endif /* LWIP_DNS */
;;;514    
;;;515      /* clear options we might not get from the ACK */
;;;516      ip_addr_set_zero(&dhcp->offered_sn_mask);
000a4e  2000              MOVS     r0,#0
000a50  62a0              STR      r0,[r4,#0x28]
;;;517      ip_addr_set_zero(&dhcp->offered_gw_addr);
000a52  62e0              STR      r0,[r4,#0x2c]
;;;518    #if LWIP_DHCP_BOOTP_FILE
;;;519      ip_addr_set_zero(&dhcp->offered_si_addr);
;;;520    #endif /* LWIP_DHCP_BOOTP_FILE */
;;;521    
;;;522      /* lease time given? */
;;;523      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
000a54  48eb              LDR      r0,|L1.3588|
000a56  78c0              LDRB     r0,[r0,#3]  ; dhcp_rx_options_given
000a58  b110              CBZ      r0,|L1.2656|
;;;524        /* remember offered lease time */
;;;525        dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
000a5a  48eb              LDR      r0,|L1.3592|
000a5c  68c0              LDR      r0,[r0,#0xc]  ; dhcp_rx_options_val
000a5e  6320              STR      r0,[r4,#0x30]
                  |L1.2656|
;;;526      }
;;;527      /* renewal period given? */
;;;528      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
000a60  48e8              LDR      r0,|L1.3588|
000a62  7900              LDRB     r0,[r0,#4]  ; dhcp_rx_options_given
000a64  b118              CBZ      r0,|L1.2670|
;;;529        /* remember given renewal period */
;;;530        dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
000a66  48e8              LDR      r0,|L1.3592|
000a68  6900              LDR      r0,[r0,#0x10]  ; dhcp_rx_options_val
000a6a  6360              STR      r0,[r4,#0x34]
000a6c  e002              B        |L1.2676|
                  |L1.2670|
;;;531      } else {
;;;532        /* calculate safe periods for renewal */
;;;533        dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
000a6e  6b20              LDR      r0,[r4,#0x30]
000a70  0840              LSRS     r0,r0,#1
000a72  6360              STR      r0,[r4,#0x34]
                  |L1.2676|
;;;534      }
;;;535    
;;;536      /* renewal period given? */
;;;537      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
000a74  48e3              LDR      r0,|L1.3588|
000a76  7940              LDRB     r0,[r0,#5]  ; dhcp_rx_options_given
000a78  b118              CBZ      r0,|L1.2690|
;;;538        /* remember given rebind period */
;;;539        dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
000a7a  48e3              LDR      r0,|L1.3592|
000a7c  6940              LDR      r0,[r0,#0x14]  ; dhcp_rx_options_val
000a7e  63a0              STR      r0,[r4,#0x38]
000a80  e001              B        |L1.2694|
                  |L1.2690|
;;;540      } else {
;;;541        /* calculate safe periods for rebinding */
;;;542        dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
000a82  6b20              LDR      r0,[r4,#0x30]
000a84  63a0              STR      r0,[r4,#0x38]
                  |L1.2694|
;;;543      }
;;;544    
;;;545      /* (y)our internet address */
;;;546      ip_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
000a86  68a0              LDR      r0,[r4,#8]
000a88  6900              LDR      r0,[r0,#0x10]
000a8a  6260              STR      r0,[r4,#0x24]
;;;547    
;;;548    #if LWIP_DHCP_BOOTP_FILE
;;;549      /* copy boot server address,
;;;550         boot file name copied in dhcp_parse_reply if not overloaded */
;;;551      ip_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
;;;552    #endif /* LWIP_DHCP_BOOTP_FILE */
;;;553    
;;;554      /* subnet mask given? */
;;;555      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
000a8c  48dd              LDR      r0,|L1.3588|
000a8e  7980              LDRB     r0,[r0,#6]  ; dhcp_rx_options_given
000a90  b138              CBZ      r0,|L1.2722|
;;;556        /* remember given subnet mask */
;;;557        ip4_addr_set_u32(&dhcp->offered_sn_mask, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
000a92  49dd              LDR      r1,|L1.3592|
000a94  6988              LDR      r0,[r1,#0x18]  ; dhcp_rx_options_val
000a96  f7fffffe          BL       lwip_htonl
000a9a  62a0              STR      r0,[r4,#0x28]
;;;558        dhcp->subnet_mask_given = 1;
000a9c  2001              MOVS     r0,#1
000a9e  73a0              STRB     r0,[r4,#0xe]
000aa0  e001              B        |L1.2726|
                  |L1.2722|
;;;559      } else {
;;;560        dhcp->subnet_mask_given = 0;
000aa2  2000              MOVS     r0,#0
000aa4  73a0              STRB     r0,[r4,#0xe]
                  |L1.2726|
;;;561      }
;;;562    
;;;563      /* gateway router */
;;;564      if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
000aa6  48d7              LDR      r0,|L1.3588|
000aa8  79c0              LDRB     r0,[r0,#7]  ; dhcp_rx_options_given
000aaa  b120              CBZ      r0,|L1.2742|
;;;565        ip4_addr_set_u32(&dhcp->offered_gw_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
000aac  49d6              LDR      r1,|L1.3592|
000aae  69c8              LDR      r0,[r1,#0x1c]  ; dhcp_rx_options_val
000ab0  f7fffffe          BL       lwip_htonl
000ab4  62e0              STR      r0,[r4,#0x2c]
                  |L1.2742|
;;;566      }
;;;567      
;;;568    #if LWIP_DNS
;;;569      /* DNS servers */
;;;570      n = 0;
;;;571      while(dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n) && (n < DNS_MAX_SERVERS)) {
;;;572        ip_addr_t dns_addr;
;;;573        ip4_addr_set_u32(&dns_addr, htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
;;;574        dns_setserver(n, &dns_addr);
;;;575        n++;
;;;576      }
;;;577    #endif /* LWIP_DNS */
;;;578    }
000ab6  bd70              POP      {r4-r6,pc}
;;;579    
                          ENDP

                  dhcp_set_struct PROC
;;;586    void
;;;587    dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
000ab8  b570              PUSH     {r4-r6,lr}
;;;588    {
000aba  4605              MOV      r5,r0
000abc  460c              MOV      r4,r1
;;;589      LWIP_ASSERT("netif != NULL", netif != NULL);
000abe  bf00              NOP      
000ac0  bf00              NOP      
;;;590      LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
000ac2  bf00              NOP      
000ac4  bf00              NOP      
;;;591      LWIP_ASSERT("netif already has a struct dhcp set", netif->dhcp == NULL);
000ac6  bf00              NOP      
000ac8  bf00              NOP      
;;;592    
;;;593      /* clear data structure */
;;;594      memset(dhcp, 0, sizeof(struct dhcp));
000aca  213c              MOVS     r1,#0x3c
000acc  4620              MOV      r0,r4
000ace  f7fffffe          BL       __aeabi_memclr4
;;;595      /* dhcp_set_state(&dhcp, DHCP_OFF); */
;;;596      netif->dhcp = dhcp;
000ad2  622c              STR      r4,[r5,#0x20]
;;;597    }
000ad4  bd70              POP      {r4-r6,pc}
;;;598    
                          ENDP

                  dhcp_cleanup PROC
;;;605     */
;;;606    void dhcp_cleanup(struct netif *netif)
000ad6  b510              PUSH     {r4,lr}
;;;607    {
000ad8  4604              MOV      r4,r0
;;;608      LWIP_ASSERT("netif != NULL", netif != NULL);
000ada  bf00              NOP      
000adc  bf00              NOP      
;;;609    
;;;610      if (netif->dhcp != NULL) {
000ade  6a20              LDR      r0,[r4,#0x20]
000ae0  b120              CBZ      r0,|L1.2796|
;;;611        mem_free(netif->dhcp);
000ae2  6a20              LDR      r0,[r4,#0x20]
000ae4  f7fffffe          BL       mem_free
;;;612        netif->dhcp = NULL;
000ae8  2000              MOVS     r0,#0
000aea  6220              STR      r0,[r4,#0x20]
                  |L1.2796|
;;;613      }
;;;614    }
000aec  bd10              POP      {r4,pc}
;;;615    
                          ENDP

                  dhcp_stop PROC
;;;1219   void
;;;1220   dhcp_stop(struct netif *netif)
000aee  b570              PUSH     {r4-r6,lr}
;;;1221   {
000af0  4605              MOV      r5,r0
;;;1222     struct dhcp *dhcp;
;;;1223     LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
000af2  bf00              NOP      
000af4  b905              CBNZ     r5,|L1.2808|
                  |L1.2806|
;;;1224     dhcp = netif->dhcp;
;;;1225     /* Remove the flag that says this netif is handled by DHCP. */
;;;1226     netif->flags &= ~NETIF_FLAG_DHCP;
;;;1227   
;;;1228     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
;;;1229     /* netif is DHCP configured? */
;;;1230     if (dhcp != NULL) {
;;;1231   #if LWIP_DHCP_AUTOIP_COOP
;;;1232       if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;1233         autoip_stop(netif);
;;;1234         dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;1235       }
;;;1236   #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1237   
;;;1238       if (dhcp->pcb != NULL) {
;;;1239         udp_remove(dhcp->pcb);
;;;1240         dhcp->pcb = NULL;
;;;1241       }
;;;1242       LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
;;;1243       dhcp_set_state(dhcp, DHCP_OFF);
;;;1244     }
;;;1245   }
000af6  bd70              POP      {r4-r6,pc}
                  |L1.2808|
000af8  bf00              NOP                            ;1223
000afa  6a2c              LDR      r4,[r5,#0x20]         ;1224
000afc  f895002d          LDRB     r0,[r5,#0x2d]         ;1226
000b00  f0200008          BIC      r0,r0,#8              ;1226
000b04  f885002d          STRB     r0,[r5,#0x2d]         ;1226
000b08  bf00              NOP                            ;1228
000b0a  bf00              NOP                            ;1228
000b0c  b164              CBZ      r4,|L1.2856|
000b0e  6860              LDR      r0,[r4,#4]            ;1238
000b10  b120              CBZ      r0,|L1.2844|
000b12  6860              LDR      r0,[r4,#4]            ;1239
000b14  f7fffffe          BL       udp_remove
000b18  2000              MOVS     r0,#0                 ;1240
000b1a  6060              STR      r0,[r4,#4]            ;1240
                  |L1.2844|
000b1c  bf00              NOP                            ;1242
000b1e  bf00              NOP                            ;1242
000b20  2100              MOVS     r1,#0                 ;1243
000b22  4620              MOV      r0,r4                 ;1243
000b24  f7fffffe          BL       dhcp_set_state
                  |L1.2856|
000b28  bf00              NOP      
000b2a  e7e4              B        |L1.2806|
;;;1246   
                          ENDP

                  dhcp_parse_reply PROC
;;;1336   static err_t
;;;1337   dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
000b2c  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;1338   {
000b30  b089              SUB      sp,sp,#0x24
000b32  4689              MOV      r9,r1
;;;1339     u8_t *options;
;;;1340     u16_t offset;
;;;1341     u16_t offset_max;
;;;1342     u16_t options_idx;
;;;1343     u16_t options_idx_max;
;;;1344     struct pbuf *q;
;;;1345     int parse_file_as_options = 0;
000b34  2000              MOVS     r0,#0
000b36  9006              STR      r0,[sp,#0x18]
;;;1346     int parse_sname_as_options = 0;
000b38  9005              STR      r0,[sp,#0x14]
;;;1347   
;;;1348     /* clear received options */
;;;1349     dhcp_clear_all_options(dhcp);
000b3a  210a              MOVS     r1,#0xa
000b3c  48b1              LDR      r0,|L1.3588|
000b3e  f7fffffe          BL       __aeabi_memclr4
;;;1350     /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
;;;1351     if (p->len < DHCP_SNAME_OFS) {
000b42  f8b9000a          LDRH     r0,[r9,#0xa]
000b46  282c              CMP      r0,#0x2c
000b48  da04              BGE      |L1.2900|
;;;1352       return ERR_BUF;
000b4a  f06f0001          MVN      r0,#1
                  |L1.2894|
;;;1353     }
;;;1354     dhcp->msg_in = (struct dhcp_msg *)p->payload;
;;;1355   #if LWIP_DHCP_BOOTP_FILE
;;;1356     /* clear boot file name */
;;;1357     dhcp->boot_file_name[0] = 0;
;;;1358   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1359   
;;;1360     /* parse options */
;;;1361   
;;;1362     /* start with options field */
;;;1363     options_idx = DHCP_OPTIONS_OFS;
;;;1364     /* parse options to the end of the received packet */
;;;1365     options_idx_max = p->tot_len;
;;;1366   again:
;;;1367     q = p;
;;;1368     while((q != NULL) && (options_idx >= q->len)) {
;;;1369       options_idx -= q->len;
;;;1370       options_idx_max -= q->len;
;;;1371       q = q->next;
;;;1372     }
;;;1373     if (q == NULL) {
;;;1374       return ERR_BUF;
;;;1375     }
;;;1376     offset = options_idx;
;;;1377     offset_max = options_idx_max;
;;;1378     options = (u8_t*)q->payload;
;;;1379     /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
;;;1380     while((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
;;;1381       u8_t op = options[offset];
;;;1382       u8_t len;
;;;1383       u8_t decode_len = 0;
;;;1384       int decode_idx = -1;
;;;1385       u16_t val_offset = offset + 2;
;;;1386       /* len byte might be in the next pbuf */
;;;1387       if (offset + 1 < q->len) {
;;;1388         len = options[offset + 1];
;;;1389       } else {
;;;1390         len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
;;;1391       }
;;;1392       /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
;;;1393       decode_len = len;
;;;1394       switch(op) {
;;;1395         /* case(DHCP_OPTION_END): handled above */
;;;1396         case(DHCP_OPTION_PAD):
;;;1397           /* special option: no len encoded */
;;;1398           decode_len = len = 0;
;;;1399           /* will be increased below */
;;;1400           offset--;
;;;1401           break;
;;;1402         case(DHCP_OPTION_SUBNET_MASK):
;;;1403           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1404           decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
;;;1405           break;
;;;1406         case(DHCP_OPTION_ROUTER):
;;;1407           decode_len = 4; /* only copy the first given router */
;;;1408           LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
;;;1409           decode_idx = DHCP_OPTION_IDX_ROUTER;
;;;1410           break;
;;;1411         case(DHCP_OPTION_DNS_SERVER):
;;;1412           /* special case: there might be more than one server */
;;;1413           LWIP_ERROR("len % 4 == 0", len % 4 == 0, return ERR_VAL;);
;;;1414           /* limit number of DNS servers */
;;;1415           decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
;;;1416           LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
;;;1417           decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
;;;1418           break;
;;;1419         case(DHCP_OPTION_LEASE_TIME):
;;;1420           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1421           decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
;;;1422           break;
;;;1423         case(DHCP_OPTION_OVERLOAD):
;;;1424           LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
;;;1425           decode_idx = DHCP_OPTION_IDX_OVERLOAD;
;;;1426           break;
;;;1427         case(DHCP_OPTION_MESSAGE_TYPE):
;;;1428           LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
;;;1429           decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
;;;1430           break;
;;;1431         case(DHCP_OPTION_SERVER_ID):
;;;1432           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1433           decode_idx = DHCP_OPTION_IDX_SERVER_ID;
;;;1434           break;
;;;1435         case(DHCP_OPTION_T1):
;;;1436           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1437           decode_idx = DHCP_OPTION_IDX_T1;
;;;1438           break;
;;;1439         case(DHCP_OPTION_T2):
;;;1440           LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
;;;1441           decode_idx = DHCP_OPTION_IDX_T2;
;;;1442           break;
;;;1443         default:
;;;1444           decode_len = 0;
;;;1445           LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", op));
;;;1446           break;
;;;1447       }
;;;1448       offset += len + 2;
;;;1449       if (decode_len > 0) {
;;;1450         u32_t value = 0;
;;;1451         u16_t copy_len;
;;;1452   decode_next:
;;;1453         LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
;;;1454         if (!dhcp_option_given(dhcp, decode_idx)) {
;;;1455           copy_len = LWIP_MIN(decode_len, 4);
;;;1456           pbuf_copy_partial(q, &value, copy_len, val_offset);
;;;1457           if (decode_len > 4) {
;;;1458             /* decode more than one u32_t */
;;;1459             LWIP_ERROR("decode_len % 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
;;;1460             dhcp_got_option(dhcp, decode_idx);
;;;1461             dhcp_set_option_value(dhcp, decode_idx, htonl(value));
;;;1462             decode_len -= 4;
;;;1463             val_offset += 4;
;;;1464             decode_idx++;
;;;1465             goto decode_next;
;;;1466           } else if (decode_len == 4) {
;;;1467             value = ntohl(value);
;;;1468           } else {
;;;1469             LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
;;;1470             value = ((u8_t*)&value)[0];
;;;1471           }
;;;1472           dhcp_got_option(dhcp, decode_idx);
;;;1473           dhcp_set_option_value(dhcp, decode_idx, value);
;;;1474         }
;;;1475       }
;;;1476       if (offset >= q->len) {
;;;1477         offset -= q->len;
;;;1478         offset_max -= q->len;
;;;1479         if ((offset < offset_max) && offset_max) {
;;;1480           q = q->next;
;;;1481           LWIP_ASSERT("next pbuf was null", q);
;;;1482           options = (u8_t*)q->payload;
;;;1483         } else {
;;;1484           // We've run out of bytes, probably no end marker. Don't proceed.
;;;1485           break;
;;;1486         }
;;;1487       }
;;;1488     }
;;;1489     /* is this an overloaded message? */
;;;1490     if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
;;;1491       u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
;;;1492       dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
;;;1493       if (overload == DHCP_OVERLOAD_FILE) {
;;;1494         parse_file_as_options = 1;
;;;1495         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
;;;1496       } else if (overload == DHCP_OVERLOAD_SNAME) {
;;;1497         parse_sname_as_options = 1;
;;;1498         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
;;;1499       } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
;;;1500         parse_sname_as_options = 1;
;;;1501         parse_file_as_options = 1;
;;;1502         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
;;;1503       } else {
;;;1504         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
;;;1505       }
;;;1506   #if LWIP_DHCP_BOOTP_FILE
;;;1507       if (!parse_file_as_options) {
;;;1508         /* only do this for ACK messages */
;;;1509         if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) &&
;;;1510           (dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) == DHCP_ACK))
;;;1511         /* copy bootp file name, don't care for sname (server hostname) */
;;;1512         pbuf_copy_partial(p, dhcp->boot_file_name, DHCP_FILE_LEN-1, DHCP_FILE_OFS);
;;;1513         /* make sure the string is really NULL-terminated */
;;;1514         dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
;;;1515       }
;;;1516   #endif /* LWIP_DHCP_BOOTP_FILE */
;;;1517     }
;;;1518     if (parse_file_as_options) {
;;;1519       /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
;;;1520       parse_file_as_options = 0;
;;;1521       options_idx = DHCP_FILE_OFS;
;;;1522       options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
;;;1523       goto again;
;;;1524     } else if (parse_sname_as_options) {
;;;1525       parse_sname_as_options = 0;
;;;1526       options_idx = DHCP_SNAME_OFS;
;;;1527       options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
;;;1528       goto again;
;;;1529     }
;;;1530     return ERR_OK;
;;;1531   }
000b4e  b00b              ADD      sp,sp,#0x2c
000b50  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2900|
000b54  f8d91004          LDR      r1,[r9,#4]            ;1354
000b58  9809              LDR      r0,[sp,#0x24]         ;1354
000b5a  6081              STR      r1,[r0,#8]            ;1354
000b5c  f04f0bf0          MOV      r11,#0xf0             ;1363
000b60  f8b90008          LDRH     r0,[r9,#8]            ;1365
000b64  9007              STR      r0,[sp,#0x1c]         ;1365
000b66  bf00              NOP                            ;1366
                  |L1.2920|
000b68  464c              MOV      r4,r9                 ;1367
000b6a  e00a              B        |L1.2946|
                  |L1.2924|
000b6c  8960              LDRH     r0,[r4,#0xa]          ;1369
000b6e  ebab0000          SUB      r0,r11,r0             ;1369
000b72  fa1ffb80          UXTH     r11,r0                ;1369
000b76  8961              LDRH     r1,[r4,#0xa]          ;1370
000b78  9807              LDR      r0,[sp,#0x1c]         ;1370
000b7a  1a40              SUBS     r0,r0,r1              ;1370
000b7c  b280              UXTH     r0,r0                 ;1370
000b7e  9007              STR      r0,[sp,#0x1c]         ;1370
000b80  6824              LDR      r4,[r4,#0]            ;1371
                  |L1.2946|
000b82  b114              CBZ      r4,|L1.2954|
000b84  8960              LDRH     r0,[r4,#0xa]          ;1368
000b86  4558              CMP      r0,r11                ;1368
000b88  ddf0              BLE      |L1.2924|
                  |L1.2954|
000b8a  b914              CBNZ     r4,|L1.2962|
000b8c  f06f0001          MVN      r0,#1                 ;1374
000b90  e7dd              B        |L1.2894|
                  |L1.2962|
000b92  465f              MOV      r7,r11                ;1376
000b94  f8dda01c          LDR      r10,[sp,#0x1c]        ;1377
000b98  6860              LDR      r0,[r4,#4]            ;1378
000b9a  9008              STR      r0,[sp,#0x20]         ;1378
000b9c  e119              B        |L1.3538|
                  |L1.2974|
000b9e  9808              LDR      r0,[sp,#0x20]         ;1381
000ba0  5dc0              LDRB     r0,[r0,r7]            ;1381
000ba2  9004              STR      r0,[sp,#0x10]         ;1381
000ba4  2600              MOVS     r6,#0                 ;1383
000ba6  f04f38ff          MOV      r8,#0xffffffff        ;1384
000baa  1cb8              ADDS     r0,r7,#2              ;1385
000bac  b280              UXTH     r0,r0                 ;1385
000bae  9003              STR      r0,[sp,#0xc]          ;1385
000bb0  8961              LDRH     r1,[r4,#0xa]          ;1387
000bb2  1c78              ADDS     r0,r7,#1              ;1387
000bb4  4281              CMP      r1,r0                 ;1387
000bb6  dd03              BLE      |L1.3008|
000bb8  1c79              ADDS     r1,r7,#1              ;1388
000bba  9808              LDR      r0,[sp,#0x20]         ;1388
000bbc  5c45              LDRB     r5,[r0,r1]            ;1388
000bbe  e007              B        |L1.3024|
                  |L1.3008|
000bc0  6820              LDR      r0,[r4,#0]            ;1390
000bc2  b118              CBZ      r0,|L1.3020|
000bc4  6820              LDR      r0,[r4,#0]            ;1390
000bc6  6840              LDR      r0,[r0,#4]            ;1390
000bc8  7800              LDRB     r0,[r0,#0]            ;1390
000bca  e000              B        |L1.3022|
                  |L1.3020|
000bcc  2000              MOVS     r0,#0                 ;1390
                  |L1.3022|
000bce  4605              MOV      r5,r0                 ;1390
                  |L1.3024|
000bd0  462e              MOV      r6,r5                 ;1393
000bd2  9804              LDR      r0,[sp,#0x10]         ;1394
000bd4  2834              CMP      r0,#0x34              ;1394
000bd6  d056              BEQ      |L1.3206|
000bd8  dc0b              BGT      |L1.3058|
000bda  2803              CMP      r0,#3                 ;1394
000bdc  d022              BEQ      |L1.3108|
000bde  dc03              BGT      |L1.3048|
000be0  b180              CBZ      r0,|L1.3076|
000be2  2801              CMP      r0,#1                 ;1394
000be4  d173              BNE      |L1.3278|
000be6  e013              B        |L1.3088|
                  |L1.3048|
000be8  2806              CMP      r0,#6                 ;1394
000bea  d026              BEQ      |L1.3130|
000bec  2833              CMP      r0,#0x33              ;1394
000bee  d17d              BNE      |L1.3308|
000bf0  e03f              B        |L1.3186|
                  |L1.3058|
000bf2  2835              CMP      r0,#0x35              ;1394
000bf4  d051              BEQ      |L1.3226|
000bf6  2836              CMP      r0,#0x36              ;1394
000bf8  d059              BEQ      |L1.3246|
000bfa  283a              CMP      r0,#0x3a              ;1394
000bfc  d061              BEQ      |L1.3266|
000bfe  283b              CMP      r0,#0x3b              ;1394
000c00  d174              BNE      |L1.3308|
000c02  e069              B        |L1.3288|
                  |L1.3076|
000c04  2000              MOVS     r0,#0                 ;1398
000c06  4605              MOV      r5,r0                 ;1398
000c08  4606              MOV      r6,r0                 ;1398
000c0a  1e78              SUBS     r0,r7,#1              ;1400
000c0c  b287              UXTH     r7,r0                 ;1400
000c0e  e071              B        |L1.3316|
                  |L1.3088|
000c10  bf00              NOP                            ;1403
000c12  2d04              CMP      r5,#4                 ;1403
000c14  d002              BEQ      |L1.3100|
000c16  f06f0005          MVN      r0,#5                 ;1403
000c1a  e798              B        |L1.2894|
                  |L1.3100|
000c1c  bf00              NOP                            ;1403
000c1e  f04f0806          MOV      r8,#6                 ;1404
000c22  e067              B        |L1.3316|
                  |L1.3108|
000c24  2604              MOVS     r6,#4                 ;1407
000c26  bf00              NOP                            ;1408
000c28  42b5              CMP      r5,r6                 ;1408
000c2a  da02              BGE      |L1.3122|
000c2c  f06f0005          MVN      r0,#5                 ;1408
000c30  e78d              B        |L1.2894|
                  |L1.3122|
000c32  bf00              NOP                            ;1408
000c34  f04f0807          MOV      r8,#7                 ;1409
000c38  e05c              B        |L1.3316|
                  |L1.3130|
000c3a  bf00              NOP                            ;1413
000c3c  17e9              ASRS     r1,r5,#31             ;1413
000c3e  eb057191          ADD      r1,r5,r1,LSR #30      ;1413
000c42  1089              ASRS     r1,r1,#2              ;1413
000c44  eba50181          SUB      r1,r5,r1,LSL #2       ;1413
000c48  b111              CBZ      r1,|L1.3152|
000c4a  f06f0005          MVN      r0,#5                 ;1413
000c4e  e77e              B        |L1.2894|
                  |L1.3152|
000c50  bf00              NOP                            ;1413
000c52  2d08              CMP      r5,#8                 ;1415
000c54  da01              BGE      |L1.3162|
000c56  4628              MOV      r0,r5                 ;1415
000c58  e000              B        |L1.3164|
                  |L1.3162|
000c5a  2008              MOVS     r0,#8                 ;1415
                  |L1.3164|
000c5c  4606              MOV      r6,r0                 ;1415
000c5e  bf00              NOP                            ;1416
000c60  42b5              CMP      r5,r6                 ;1416
000c62  da02              BGE      |L1.3178|
000c64  f06f0005          MVN      r0,#5                 ;1416
000c68  e771              B        |L1.2894|
                  |L1.3178|
000c6a  bf00              NOP                            ;1416
000c6c  f04f0808          MOV      r8,#8                 ;1417
000c70  e040              B        |L1.3316|
                  |L1.3186|
000c72  bf00              NOP                            ;1420
000c74  2d04              CMP      r5,#4                 ;1420
000c76  d002              BEQ      |L1.3198|
000c78  f06f0005          MVN      r0,#5                 ;1420
000c7c  e767              B        |L1.2894|
                  |L1.3198|
000c7e  bf00              NOP                            ;1420
000c80  f04f0803          MOV      r8,#3                 ;1421
000c84  e036              B        |L1.3316|
                  |L1.3206|
000c86  bf00              NOP                            ;1424
000c88  2d01              CMP      r5,#1                 ;1424
000c8a  d002              BEQ      |L1.3218|
000c8c  f06f0005          MVN      r0,#5                 ;1424
000c90  e75d              B        |L1.2894|
                  |L1.3218|
000c92  bf00              NOP                            ;1424
000c94  f04f0800          MOV      r8,#0                 ;1425
000c98  e02c              B        |L1.3316|
                  |L1.3226|
000c9a  bf00              NOP                            ;1428
000c9c  2d01              CMP      r5,#1                 ;1428
000c9e  d002              BEQ      |L1.3238|
000ca0  f06f0005          MVN      r0,#5                 ;1428
000ca4  e753              B        |L1.2894|
                  |L1.3238|
000ca6  bf00              NOP                            ;1428
000ca8  f04f0801          MOV      r8,#1                 ;1429
000cac  e022              B        |L1.3316|
                  |L1.3246|
000cae  bf00              NOP                            ;1432
000cb0  2d04              CMP      r5,#4                 ;1432
000cb2  d002              BEQ      |L1.3258|
000cb4  f06f0005          MVN      r0,#5                 ;1432
000cb8  e749              B        |L1.2894|
                  |L1.3258|
000cba  bf00              NOP                            ;1432
000cbc  f04f0802          MOV      r8,#2                 ;1433
000cc0  e018              B        |L1.3316|
                  |L1.3266|
000cc2  bf00              NOP                            ;1436
000cc4  2d04              CMP      r5,#4                 ;1436
000cc6  d003              BEQ      |L1.3280|
000cc8  f06f0005          MVN      r0,#5                 ;1436
000ccc  e73f              B        |L1.2894|
                  |L1.3278|
000cce  e00d              B        |L1.3308|
                  |L1.3280|
000cd0  bf00              NOP                            ;1436
000cd2  f04f0804          MOV      r8,#4                 ;1437
000cd6  e00d              B        |L1.3316|
                  |L1.3288|
000cd8  bf00              NOP                            ;1440
000cda  2d04              CMP      r5,#4                 ;1440
000cdc  d002              BEQ      |L1.3300|
000cde  f06f0005          MVN      r0,#5                 ;1440
000ce2  e734              B        |L1.2894|
                  |L1.3300|
000ce4  bf00              NOP                            ;1440
000ce6  f04f0805          MOV      r8,#5                 ;1441
000cea  e003              B        |L1.3316|
                  |L1.3308|
000cec  2600              MOVS     r6,#0                 ;1444
000cee  bf00              NOP                            ;1445
000cf0  bf00              NOP                            ;1445
000cf2  bf00              NOP                            ;1446
                  |L1.3316|
000cf4  bf00              NOP                            ;1401
000cf6  1ca8              ADDS     r0,r5,#2              ;1448
000cf8  4438              ADD      r0,r0,r7              ;1448
000cfa  b287              UXTH     r7,r0                 ;1448
000cfc  2e00              CMP      r6,#0                 ;1449
000cfe  dd50              BLE      |L1.3490|
000d00  2000              MOVS     r0,#0                 ;1450
000d02  9002              STR      r0,[sp,#8]            ;1450
000d04  bf00              NOP                            ;1452
                  |L1.3334|
000d06  bf00              NOP                            ;1453
000d08  bf00              NOP                            ;1453
000d0a  483e              LDR      r0,|L1.3588|
000d0c  f8100008          LDRB     r0,[r0,r8]            ;1454
000d10  bb98              CBNZ     r0,|L1.3450|
000d12  2e04              CMP      r6,#4                 ;1455
000d14  da01              BGE      |L1.3354|
000d16  4630              MOV      r0,r6                 ;1455
000d18  e000              B        |L1.3356|
                  |L1.3354|
000d1a  2004              MOVS     r0,#4                 ;1455
                  |L1.3356|
000d1c  9001              STR      r0,[sp,#4]            ;1455
000d1e  a902              ADD      r1,sp,#8              ;1456
000d20  4620              MOV      r0,r4                 ;1456
000d22  9b03              LDR      r3,[sp,#0xc]          ;1456
000d24  9a01              LDR      r2,[sp,#4]            ;1456
000d26  f7fffffe          BL       pbuf_copy_partial
000d2a  2e04              CMP      r6,#4                 ;1457
000d2c  dd1e              BLE      |L1.3436|
000d2e  bf00              NOP                            ;1459
000d30  17f1              ASRS     r1,r6,#31             ;1459
000d32  eb067191          ADD      r1,r6,r1,LSR #30      ;1459
000d36  1089              ASRS     r1,r1,#2              ;1459
000d38  eba60181          SUB      r1,r6,r1,LSL #2       ;1459
000d3c  b111              CBZ      r1,|L1.3396|
000d3e  f06f0005          MVN      r0,#5                 ;1459
000d42  e704              B        |L1.2894|
                  |L1.3396|
000d44  bf00              NOP                            ;1459
000d46  2001              MOVS     r0,#1                 ;1460
000d48  492e              LDR      r1,|L1.3588|
000d4a  f8010008          STRB     r0,[r1,r8]            ;1460
000d4e  9802              LDR      r0,[sp,#8]            ;1461
000d50  f7fffffe          BL       lwip_htonl
000d54  492c              LDR      r1,|L1.3592|
000d56  f8410028          STR      r0,[r1,r8,LSL #2]     ;1461
000d5a  1f30              SUBS     r0,r6,#4              ;1462
000d5c  b2c6              UXTB     r6,r0                 ;1462
000d5e  9803              LDR      r0,[sp,#0xc]          ;1463
000d60  1d00              ADDS     r0,r0,#4              ;1463
000d62  b280              UXTH     r0,r0                 ;1463
000d64  9003              STR      r0,[sp,#0xc]          ;1463
000d66  f1080801          ADD      r8,r8,#1              ;1464
000d6a  e7cc              B        |L1.3334|
                  |L1.3436|
000d6c  2e04              CMP      r6,#4                 ;1466
000d6e  d105              BNE      |L1.3452|
000d70  9802              LDR      r0,[sp,#8]            ;1467
000d72  f7fffffe          BL       lwip_ntohl
000d76  9002              STR      r0,[sp,#8]            ;1467
000d78  e00a              B        |L1.3472|
                  |L1.3450|
000d7a  e011              B        |L1.3488|
                  |L1.3452|
000d7c  bf00              NOP                            ;1469
000d7e  2e01              CMP      r6,#1                 ;1469
000d80  d002              BEQ      |L1.3464|
000d82  f06f0005          MVN      r0,#5                 ;1469
000d86  e6e2              B        |L1.2894|
                  |L1.3464|
000d88  bf00              NOP                            ;1469
000d8a  f89d0008          LDRB     r0,[sp,#8]            ;1470
000d8e  9002              STR      r0,[sp,#8]            ;1470
                  |L1.3472|
000d90  2001              MOVS     r0,#1                 ;1472
000d92  491c              LDR      r1,|L1.3588|
000d94  f8010008          STRB     r0,[r1,r8]            ;1472
000d98  491b              LDR      r1,|L1.3592|
000d9a  9802              LDR      r0,[sp,#8]            ;1473
000d9c  f8410028          STR      r0,[r1,r8,LSL #2]     ;1473
                  |L1.3488|
000da0  bf00              NOP                            ;1475
                  |L1.3490|
000da2  8960              LDRH     r0,[r4,#0xa]          ;1476
000da4  42b8              CMP      r0,r7                 ;1476
000da6  dc13              BGT      |L1.3536|
000da8  8960              LDRH     r0,[r4,#0xa]          ;1477
000daa  1a38              SUBS     r0,r7,r0              ;1477
000dac  b287              UXTH     r7,r0                 ;1477
000dae  8960              LDRH     r0,[r4,#0xa]          ;1478
000db0  ebaa0000          SUB      r0,r10,r0             ;1478
000db4  fa1ffa80          UXTH     r10,r0                ;1478
000db8  4557              CMP      r7,r10                ;1479
000dba  da08              BGE      |L1.3534|
000dbc  f1ba0f00          CMP      r10,#0                ;1479
000dc0  d005              BEQ      |L1.3534|
000dc2  6824              LDR      r4,[r4,#0]            ;1480
000dc4  bf00              NOP                            ;1481
000dc6  bf00              NOP                            ;1481
000dc8  6860              LDR      r0,[r4,#4]            ;1482
000dca  9008              STR      r0,[sp,#0x20]         ;1482
000dcc  e000              B        |L1.3536|
                  |L1.3534|
000dce  e008              B        |L1.3554|
                  |L1.3536|
000dd0  bf00              NOP                            ;1488
                  |L1.3538|
000dd2  b134              CBZ      r4,|L1.3554|
000dd4  9808              LDR      r0,[sp,#0x20]         ;1380
000dd6  5dc0              LDRB     r0,[r0,r7]            ;1380
000dd8  28ff              CMP      r0,#0xff              ;1380
000dda  d002              BEQ      |L1.3554|
000ddc  4557              CMP      r7,r10                ;1380
000dde  f6ffaede          BLT      |L1.2974|
                  |L1.3554|
000de2  bf00              NOP                            ;1485
000de4  4807              LDR      r0,|L1.3588|
000de6  7800              LDRB     r0,[r0,#0]            ;1490  ; dhcp_rx_options_given
000de8  b300              CBZ      r0,|L1.3628|
000dea  4907              LDR      r1,|L1.3592|
000dec  6808              LDR      r0,[r1,#0]            ;1491  ; dhcp_rx_options_val
000dee  2100              MOVS     r1,#0                 ;1492
000df0  4a04              LDR      r2,|L1.3588|
000df2  7011              STRB     r1,[r2,#0]            ;1492
000df4  2801              CMP      r0,#1                 ;1493
000df6  d109              BNE      |L1.3596|
000df8  2101              MOVS     r1,#1                 ;1494
000dfa  9106              STR      r1,[sp,#0x18]         ;1494
000dfc  bf00              NOP                            ;1495
000dfe  e014              B        |L1.3626|
                  |L1.3584|
                          DCD      netif_list
                  |L1.3588|
                          DCD      dhcp_rx_options_given
                  |L1.3592|
                          DCD      dhcp_rx_options_val
                  |L1.3596|
000e0c  2802              CMP      r0,#2                 ;1496
000e0e  d103              BNE      |L1.3608|
000e10  2101              MOVS     r1,#1                 ;1497
000e12  9105              STR      r1,[sp,#0x14]         ;1497
000e14  bf00              NOP                            ;1498
000e16  e008              B        |L1.3626|
                  |L1.3608|
000e18  2803              CMP      r0,#3                 ;1499
000e1a  d104              BNE      |L1.3622|
000e1c  2101              MOVS     r1,#1                 ;1500
000e1e  9105              STR      r1,[sp,#0x14]         ;1500
000e20  9106              STR      r1,[sp,#0x18]         ;1501
000e22  bf00              NOP                            ;1502
000e24  e001              B        |L1.3626|
                  |L1.3622|
000e26  bf00              NOP                            ;1504
000e28  bf00              NOP                            ;1504
                  |L1.3626|
000e2a  bf00              NOP                            ;1517
                  |L1.3628|
000e2c  9806              LDR      r0,[sp,#0x18]         ;1518
000e2e  b130              CBZ      r0,|L1.3646|
000e30  2000              MOVS     r0,#0                 ;1520
000e32  9006              STR      r0,[sp,#0x18]         ;1520
000e34  f04f0b6c          MOV      r11,#0x6c             ;1521
000e38  20ec              MOVS     r0,#0xec              ;1522
000e3a  9007              STR      r0,[sp,#0x1c]         ;1522
000e3c  e694              B        |L1.2920|
                  |L1.3646|
000e3e  9805              LDR      r0,[sp,#0x14]         ;1524
000e40  b130              CBZ      r0,|L1.3664|
000e42  2000              MOVS     r0,#0                 ;1525
000e44  9005              STR      r0,[sp,#0x14]         ;1525
000e46  f04f0b2c          MOV      r11,#0x2c             ;1526
000e4a  206c              MOVS     r0,#0x6c              ;1527
000e4c  9007              STR      r0,[sp,#0x1c]         ;1527
000e4e  e68b              B        |L1.2920|
                  |L1.3664|
000e50  2000              MOVS     r0,#0                 ;1530
000e52  e67c              B        |L1.2894|
;;;1532   
                          ENDP

                  dhcp_recv PROC
;;;1536   static void
;;;1537   dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *addr, u16_t port)
000e54  e92d5ff0          PUSH     {r4-r12,lr}
;;;1538   {
000e58  4681              MOV      r9,r0
000e5a  4615              MOV      r5,r2
000e5c  f8ddb028          LDR      r11,[sp,#0x28]
;;;1539     struct netif *netif = (struct netif *)arg;
000e60  464f              MOV      r7,r9
;;;1540     struct dhcp *dhcp = netif->dhcp;
000e62  6a3c              LDR      r4,[r7,#0x20]
;;;1541     struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
000e64  f8d5a004          LDR      r10,[r5,#4]
;;;1542     u8_t msg_type;
;;;1543     u8_t i;
;;;1544     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void*)p,
000e68  bf00              NOP      
000e6a  bf00              NOP      
;;;1545       ip4_addr1_16(addr), ip4_addr2_16(addr), ip4_addr3_16(addr), ip4_addr4_16(addr), port));
;;;1546     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
000e6c  bf00              NOP      
000e6e  bf00              NOP      
;;;1547     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
000e70  bf00              NOP      
000e72  bf00              NOP      
;;;1548     /* prevent warnings about unused arguments */
;;;1549     LWIP_UNUSED_ARG(pcb);
;;;1550     LWIP_UNUSED_ARG(addr);
;;;1551     LWIP_UNUSED_ARG(port);
;;;1552   
;;;1553     LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
000e74  bf00              NOP      
000e76  bf00              NOP      
;;;1554   
;;;1555     if (p->len < DHCP_MIN_REPLY_LEN) {
000e78  8968              LDRH     r0,[r5,#0xa]
000e7a  282c              CMP      r0,#0x2c
000e7c  da02              BGE      |L1.3716|
;;;1556       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
000e7e  bf00              NOP      
000e80  bf00              NOP      
;;;1557       goto free_pbuf_and_return;
000e82  e075              B        |L1.3952|
                  |L1.3716|
;;;1558     }
;;;1559   
;;;1560     if (reply_msg->op != DHCP_BOOTREPLY) {
000e84  f89a0000          LDRB     r0,[r10,#0]
000e88  2802              CMP      r0,#2
000e8a  d002              BEQ      |L1.3730|
;;;1561       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
000e8c  bf00              NOP      
000e8e  bf00              NOP      
;;;1562       goto free_pbuf_and_return;
000e90  e06e              B        |L1.3952|
                  |L1.3730|
;;;1563     }
;;;1564     /* iterate through hardware address and match against DHCP message */
;;;1565     for (i = 0; i < netif->hwaddr_len; i++) {
000e92  2600              MOVS     r6,#0
000e94  e00c              B        |L1.3760|
                  |L1.3734|
;;;1566       if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
000e96  f1070027          ADD      r0,r7,#0x27
000e9a  5d81              LDRB     r1,[r0,r6]
000e9c  f10a001c          ADD      r0,r10,#0x1c
000ea0  5d80              LDRB     r0,[r0,r6]
000ea2  4281              CMP      r1,r0
000ea4  d002              BEQ      |L1.3756|
;;;1567         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
000ea6  bf00              NOP      
000ea8  bf00              NOP      
;;;1568           ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
;;;1569           (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
;;;1570         goto free_pbuf_and_return;
000eaa  e061              B        |L1.3952|
                  |L1.3756|
000eac  1c70              ADDS     r0,r6,#1              ;1565
000eae  b2c6              UXTB     r6,r0                 ;1565
                  |L1.3760|
000eb0  f8970026          LDRB     r0,[r7,#0x26]         ;1565
000eb4  42b0              CMP      r0,r6                 ;1565
000eb6  dcee              BGT      |L1.3734|
;;;1571       }
;;;1572     }
;;;1573     /* match transaction ID against what we expected */
;;;1574     if (ntohl(reply_msg->xid) != dhcp->xid) {
000eb8  f8da0004          LDR      r0,[r10,#4]
000ebc  f7fffffe          BL       lwip_ntohl
000ec0  6821              LDR      r1,[r4,#0]
000ec2  4288              CMP      r0,r1
000ec4  d002              BEQ      |L1.3788|
;;;1575       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
000ec6  bf00              NOP      
000ec8  bf00              NOP      
;;;1576         ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
;;;1577       goto free_pbuf_and_return;
000eca  e051              B        |L1.3952|
                  |L1.3788|
;;;1578     }
;;;1579     /* option fields could be unfold? */
;;;1580     if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
000ecc  4629              MOV      r1,r5
000ece  4620              MOV      r0,r4
000ed0  f7fffffe          BL       dhcp_parse_reply
000ed4  b110              CBZ      r0,|L1.3804|
;;;1581       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
000ed6  bf00              NOP      
000ed8  bf00              NOP      
;;;1582         ("problem unfolding DHCP message - too short on memory?\n"));
;;;1583       goto free_pbuf_and_return;
000eda  e049              B        |L1.3952|
                  |L1.3804|
;;;1584     }
;;;1585   
;;;1586     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
000edc  bf00              NOP      
000ede  bf00              NOP      
;;;1587     /* obtain pointer to DHCP message type */
;;;1588     if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
000ee0  48d7              LDR      r0,|L1.4672|
000ee2  7840              LDRB     r0,[r0,#1]  ; dhcp_rx_options_given
000ee4  b910              CBNZ     r0,|L1.3820|
;;;1589       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
000ee6  bf00              NOP      
000ee8  bf00              NOP      
;;;1590       goto free_pbuf_and_return;
000eea  e041              B        |L1.3952|
                  |L1.3820|
;;;1591     }
;;;1592   
;;;1593     /* read DHCP message type */
;;;1594     msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
000eec  48d5              LDR      r0,|L1.4676|
000eee  f8908004          LDRB     r8,[r0,#4]  ; dhcp_rx_options_val
;;;1595     /* message type is DHCP ACK? */
;;;1596     if (msg_type == DHCP_ACK) {
000ef2  f1b80f05          CMP      r8,#5
000ef6  d118              BNE      |L1.3882|
;;;1597       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
000ef8  bf00              NOP      
000efa  bf00              NOP      
;;;1598       /* in requesting state? */
;;;1599       if (dhcp->state == DHCP_REQUESTING) {
000efc  7b20              LDRB     r0,[r4,#0xc]
000efe  2801              CMP      r0,#1
000f00  d106              BNE      |L1.3856|
;;;1600         dhcp_handle_ack(netif);
000f02  4638              MOV      r0,r7
000f04  f7fffffe          BL       dhcp_handle_ack
;;;1601   #if DHCP_DOES_ARP_CHECK
;;;1602         /* check if the acknowledged lease address is already in use */
;;;1603         dhcp_check(netif);
000f08  4638              MOV      r0,r7
000f0a  f7fffffe          BL       dhcp_check
000f0e  e02e              B        |L1.3950|
                  |L1.3856|
;;;1604   #else
;;;1605         /* bind interface to the acknowledged lease address */
;;;1606         dhcp_bind(netif);
;;;1607   #endif
;;;1608       }
;;;1609       /* already bound to the given lease address? */
;;;1610       else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
000f10  7b20              LDRB     r0,[r4,#0xc]
000f12  2803              CMP      r0,#3
000f14  d005              BEQ      |L1.3874|
000f16  7b20              LDRB     r0,[r4,#0xc]
000f18  2804              CMP      r0,#4
000f1a  d002              BEQ      |L1.3874|
000f1c  7b20              LDRB     r0,[r4,#0xc]
000f1e  2805              CMP      r0,#5
000f20  d125              BNE      |L1.3950|
                  |L1.3874|
;;;1611         dhcp_bind(netif);
000f22  4638              MOV      r0,r7
000f24  f7fffffe          BL       dhcp_bind
000f28  e021              B        |L1.3950|
                  |L1.3882|
;;;1612       }
;;;1613     }
;;;1614     /* received a DHCP_NAK in appropriate state? */
;;;1615     else if ((msg_type == DHCP_NAK) &&
000f2a  f1b80f06          CMP      r8,#6
000f2e  d111              BNE      |L1.3924|
;;;1616       ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
000f30  7b20              LDRB     r0,[r4,#0xc]
000f32  2803              CMP      r0,#3
000f34  d008              BEQ      |L1.3912|
000f36  7b20              LDRB     r0,[r4,#0xc]
000f38  2801              CMP      r0,#1
000f3a  d005              BEQ      |L1.3912|
;;;1617        (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
000f3c  7b20              LDRB     r0,[r4,#0xc]
000f3e  2804              CMP      r0,#4
000f40  d002              BEQ      |L1.3912|
000f42  7b20              LDRB     r0,[r4,#0xc]
000f44  2805              CMP      r0,#5
000f46  d105              BNE      |L1.3924|
                  |L1.3912|
;;;1618       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
000f48  bf00              NOP      
000f4a  bf00              NOP      
;;;1619       dhcp_handle_nak(netif);
000f4c  4638              MOV      r0,r7
000f4e  f7fffffe          BL       dhcp_handle_nak
000f52  e00c              B        |L1.3950|
                  |L1.3924|
;;;1620     }
;;;1621     /* received a DHCP_OFFER in DHCP_SELECTING state? */
;;;1622     else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
000f54  f1b80f02          CMP      r8,#2
000f58  d109              BNE      |L1.3950|
000f5a  7b20              LDRB     r0,[r4,#0xc]
000f5c  2806              CMP      r0,#6
000f5e  d106              BNE      |L1.3950|
;;;1623       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
000f60  bf00              NOP      
000f62  bf00              NOP      
;;;1624       dhcp->request_timeout = 0;
000f64  2000              MOVS     r0,#0
000f66  8360              STRH     r0,[r4,#0x1a]
;;;1625       /* remember offered lease */
;;;1626       dhcp_handle_offer(netif);
000f68  4638              MOV      r0,r7
000f6a  f7fffffe          BL       dhcp_handle_offer
                  |L1.3950|
;;;1627     }
;;;1628   free_pbuf_and_return:
000f6e  bf00              NOP      
                  |L1.3952|
;;;1629     dhcp->msg_in = NULL;
000f70  2000              MOVS     r0,#0
000f72  60a0              STR      r0,[r4,#8]
;;;1630     pbuf_free(p);
000f74  4628              MOV      r0,r5
000f76  f7fffffe          BL       pbuf_free
;;;1631   }
000f7a  e8bd9ff0          POP      {r4-r12,pc}
;;;1632   
                          ENDP

                  dhcp_start PROC
;;;628    err_t
;;;629    dhcp_start(struct netif *netif)
000f7e  b570              PUSH     {r4-r6,lr}
;;;630    {
000f80  4605              MOV      r5,r0
;;;631      struct dhcp *dhcp;
;;;632      err_t result = ERR_OK;
000f82  2600              MOVS     r6,#0
;;;633    
;;;634      LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
000f84  bf00              NOP      
000f86  b915              CBNZ     r5,|L1.3982|
000f88  f06f000d          MVN      r0,#0xd
                  |L1.3980|
;;;635      dhcp = netif->dhcp;
;;;636      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;637      /* Remove the flag that says this netif is handled by DHCP,
;;;638         it is set when we succeeded starting. */
;;;639      netif->flags &= ~NETIF_FLAG_DHCP;
;;;640    
;;;641      /* check hwtype of the netif */
;;;642      if ((netif->flags & NETIF_FLAG_ETHARP) == 0) {
;;;643        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): No ETHARP netif\n"));
;;;644        return ERR_ARG;
;;;645      }
;;;646    
;;;647      /* check MTU of the netif */
;;;648      if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
;;;649        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
;;;650        return ERR_MEM;
;;;651      }
;;;652    
;;;653      /* no DHCP client attached yet? */
;;;654      if (dhcp == NULL) {
;;;655        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
;;;656        dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
;;;657        if (dhcp == NULL) {
;;;658          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
;;;659          return ERR_MEM;
;;;660        }
;;;661        /* store this dhcp client in the netif */
;;;662        netif->dhcp = dhcp;
;;;663        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
;;;664      /* already has DHCP client attached */
;;;665      } else {
;;;666        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
;;;667        if (dhcp->pcb != NULL) {
;;;668          udp_remove(dhcp->pcb);
;;;669        }
;;;670        LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
;;;671        LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
;;;672      }
;;;673        
;;;674      /* clear data structure */
;;;675      memset(dhcp, 0, sizeof(struct dhcp));
;;;676      /* dhcp_set_state(&dhcp, DHCP_OFF); */
;;;677      /* allocate UDP PCB */
;;;678      dhcp->pcb = udp_new();
;;;679      if (dhcp->pcb == NULL) {
;;;680        LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
;;;681        return ERR_MEM;
;;;682      }
;;;683      ip_set_option(dhcp->pcb, SOF_BROADCAST);
;;;684      /* set up local and remote port for the pcb */
;;;685      udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
;;;686      udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
;;;687      /* set up the recv callback and argument */
;;;688      udp_recv(dhcp->pcb, dhcp_recv, netif);
;;;689      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
;;;690      /* (re)start the DHCP negotiation */
;;;691      result = dhcp_discover(netif);
;;;692      if (result != ERR_OK) {
;;;693        /* free resources allocated above */
;;;694        dhcp_stop(netif);
;;;695        return ERR_MEM;
;;;696      }
;;;697      /* Set the flag that says this netif is handled by DHCP. */
;;;698      netif->flags |= NETIF_FLAG_DHCP;
;;;699      return result;
;;;700    }
000f8c  bd70              POP      {r4-r6,pc}
                  |L1.3982|
000f8e  bf00              NOP                            ;634
000f90  6a2c              LDR      r4,[r5,#0x20]         ;635
000f92  bf00              NOP                            ;636
000f94  bf00              NOP                            ;636
000f96  f8150f2d          LDRB     r0,[r5,#0x2d]!        ;639
000f9a  f0200008          BIC      r0,r0,#8              ;639
000f9e  7028              STRB     r0,[r5,#0]            ;639
000fa0  f815092d          LDRB     r0,[r5],#-0x2d        ;642
000fa4  f0000020          AND      r0,r0,#0x20           ;642
000fa8  b920              CBNZ     r0,|L1.4020|
000faa  bf00              NOP                            ;643
000fac  bf00              NOP                            ;643
000fae  f06f000d          MVN      r0,#0xd               ;644
000fb2  e7eb              B        |L1.3980|
                  |L1.4020|
000fb4  8ca8              LDRH     r0,[r5,#0x24]         ;648
000fb6  f5b07f10          CMP      r0,#0x240             ;648
000fba  da04              BGE      |L1.4038|
000fbc  bf00              NOP                            ;649
000fbe  bf00              NOP                            ;649
000fc0  f04f30ff          MOV      r0,#0xffffffff        ;650
000fc4  e7e2              B        |L1.3980|
                  |L1.4038|
000fc6  b974              CBNZ     r4,|L1.4070|
000fc8  bf00              NOP                            ;655
000fca  bf00              NOP                            ;655
000fcc  203c              MOVS     r0,#0x3c              ;656
000fce  f7fffffe          BL       mem_malloc
000fd2  4604              MOV      r4,r0                 ;656
000fd4  b924              CBNZ     r4,|L1.4064|
000fd6  bf00              NOP                            ;658
000fd8  bf00              NOP                            ;658
000fda  f04f30ff          MOV      r0,#0xffffffff        ;659
000fde  e7d5              B        |L1.3980|
                  |L1.4064|
000fe0  622c              STR      r4,[r5,#0x20]         ;662
000fe2  bf00              NOP                            ;663
000fe4  e00a              B        |L1.4092|
                  |L1.4070|
000fe6  bf00              NOP                            ;666
000fe8  bf00              NOP                            ;666
000fea  6860              LDR      r0,[r4,#4]            ;667
000fec  b110              CBZ      r0,|L1.4084|
000fee  6860              LDR      r0,[r4,#4]            ;668
000ff0  f7fffffe          BL       udp_remove
                  |L1.4084|
000ff4  bf00              NOP                            ;670
000ff6  bf00              NOP                            ;670
000ff8  bf00              NOP                            ;671
000ffa  bf00              NOP                            ;671
                  |L1.4092|
000ffc  213c              MOVS     r1,#0x3c              ;675
000ffe  4620              MOV      r0,r4                 ;675
001000  f7fffffe          BL       __aeabi_memclr4
001004  f7fffffe          BL       udp_new
001008  6060              STR      r0,[r4,#4]            ;678
00100a  6860              LDR      r0,[r4,#4]            ;679
00100c  b920              CBNZ     r0,|L1.4120|
00100e  bf00              NOP                            ;680
001010  bf00              NOP                            ;680
001012  f04f30ff          MOV      r0,#0xffffffff        ;681
001016  e7b9              B        |L1.3980|
                  |L1.4120|
001018  6860              LDR      r0,[r4,#4]            ;683
00101a  7a00              LDRB     r0,[r0,#8]            ;683
00101c  f0400020          ORR      r0,r0,#0x20           ;683
001020  6861              LDR      r1,[r4,#4]            ;683
001022  7208              STRB     r0,[r1,#8]            ;683
001024  2244              MOVS     r2,#0x44              ;685
001026  4988              LDR      r1,|L1.4680|
001028  6860              LDR      r0,[r4,#4]            ;685
00102a  f7fffffe          BL       udp_bind
00102e  2243              MOVS     r2,#0x43              ;686
001030  4985              LDR      r1,|L1.4680|
001032  6860              LDR      r0,[r4,#4]            ;686
001034  f7fffffe          BL       udp_connect
001038  462a              MOV      r2,r5                 ;688
00103a  4984              LDR      r1,|L1.4684|
00103c  6860              LDR      r0,[r4,#4]            ;688
00103e  f7fffffe          BL       udp_recv
001042  bf00              NOP                            ;689
001044  bf00              NOP                            ;689
001046  4628              MOV      r0,r5                 ;691
001048  f7fffffe          BL       dhcp_discover
00104c  4606              MOV      r6,r0                 ;691
00104e  b12e              CBZ      r6,|L1.4188|
001050  4628              MOV      r0,r5                 ;694
001052  f7fffffe          BL       dhcp_stop
001056  f04f30ff          MOV      r0,#0xffffffff        ;695
00105a  e797              B        |L1.3980|
                  |L1.4188|
00105c  f895002d          LDRB     r0,[r5,#0x2d]         ;698
001060  f0400008          ORR      r0,r0,#8              ;698
001064  f885002d          STRB     r0,[r5,#0x2d]         ;698
001068  4630              MOV      r0,r6                 ;699
00106a  e78f              B        |L1.3980|
;;;701    
                          ENDP

                  dhcp_inform PROC
;;;711    void
;;;712    dhcp_inform(struct netif *netif)
00106c  b570              PUSH     {r4-r6,lr}
;;;713    {
00106e  b090              SUB      sp,sp,#0x40
001070  4604              MOV      r4,r0
;;;714      struct dhcp dhcp;
;;;715      err_t result = ERR_OK;
001072  2600              MOVS     r6,#0
;;;716      struct udp_pcb *pcb;
;;;717    
;;;718      LWIP_ERROR("netif != NULL", (netif != NULL), return;);
001074  bf00              NOP      
001076  b90c              CBNZ     r4,|L1.4220|
                  |L1.4216|
;;;719    
;;;720      memset(&dhcp, 0, sizeof(struct dhcp));
;;;721      dhcp_set_state(&dhcp, DHCP_INFORM);
;;;722    
;;;723      if ((netif->dhcp != NULL) && (netif->dhcp->pcb != NULL)) {
;;;724        /* re-use existing pcb */
;;;725        pcb = netif->dhcp->pcb;
;;;726      } else {
;;;727        pcb = udp_new();
;;;728        if (pcb == NULL) {
;;;729          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform(): could not obtain pcb"));
;;;730          return;
;;;731        }
;;;732        dhcp.pcb = pcb;
;;;733        ip_set_option(dhcp.pcb, SOF_BROADCAST);
;;;734        udp_bind(dhcp.pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
;;;735        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
;;;736      }
;;;737      /* create and initialize the DHCP message header */
;;;738      result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
;;;739      if (result == ERR_OK) {
;;;740        dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
;;;741        dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
;;;742    
;;;743        dhcp_option_trailer(&dhcp);
;;;744    
;;;745        pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
;;;746    
;;;747        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
;;;748        udp_sendto_if(pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
;;;749        dhcp_delete_msg(&dhcp);
;;;750      } else {
;;;751        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
;;;752      }
;;;753    
;;;754      if (dhcp.pcb != NULL) {
;;;755        /* otherwise, the existing pcb was used */
;;;756        udp_remove(dhcp.pcb);
;;;757      }
;;;758    }
001078  b010              ADD      sp,sp,#0x40
00107a  bd70              POP      {r4-r6,pc}
                  |L1.4220|
00107c  bf00              NOP                            ;718
00107e  213c              MOVS     r1,#0x3c              ;720
001080  a801              ADD      r0,sp,#4              ;720
001082  f7fffffe          BL       __aeabi_memclr4
001086  2108              MOVS     r1,#8                 ;721
001088  a801              ADD      r0,sp,#4              ;721
00108a  f7fffffe          BL       dhcp_set_state
00108e  6a20              LDR      r0,[r4,#0x20]         ;723
001090  b128              CBZ      r0,|L1.4254|
001092  6a20              LDR      r0,[r4,#0x20]         ;723
001094  6840              LDR      r0,[r0,#4]            ;723
001096  b110              CBZ      r0,|L1.4254|
001098  6a20              LDR      r0,[r4,#0x20]         ;725
00109a  6845              LDR      r5,[r0,#4]            ;725
00109c  e014              B        |L1.4296|
                  |L1.4254|
00109e  f7fffffe          BL       udp_new
0010a2  4605              MOV      r5,r0                 ;727
0010a4  b915              CBNZ     r5,|L1.4268|
0010a6  bf00              NOP                            ;729
0010a8  bf00              NOP                            ;729
0010aa  e7e5              B        |L1.4216|
                  |L1.4268|
0010ac  9502              STR      r5,[sp,#8]            ;732
0010ae  9802              LDR      r0,[sp,#8]            ;733
0010b0  7a00              LDRB     r0,[r0,#8]            ;733
0010b2  f0400020          ORR      r0,r0,#0x20           ;733
0010b6  9902              LDR      r1,[sp,#8]            ;733
0010b8  7208              STRB     r0,[r1,#8]            ;733
0010ba  2244              MOVS     r2,#0x44              ;734
0010bc  4962              LDR      r1,|L1.4680|
0010be  9802              LDR      r0,[sp,#8]            ;734
0010c0  f7fffffe          BL       udp_bind
0010c4  bf00              NOP                            ;735
0010c6  bf00              NOP                            ;735
                  |L1.4296|
0010c8  2208              MOVS     r2,#8                 ;738
0010ca  a901              ADD      r1,sp,#4              ;738
0010cc  4620              MOV      r0,r4                 ;738
0010ce  f7fffffe          BL       dhcp_create_msg
0010d2  4606              MOV      r6,r0                 ;738
0010d4  b9fe              CBNZ     r6,|L1.4374|
0010d6  2202              MOVS     r2,#2                 ;740
0010d8  2139              MOVS     r1,#0x39              ;740
0010da  a801              ADD      r0,sp,#4              ;740
0010dc  f7fffffe          BL       dhcp_option
0010e0  8ca1              LDRH     r1,[r4,#0x24]         ;741
0010e2  a801              ADD      r0,sp,#4              ;741
0010e4  f7fffffe          BL       dhcp_option_short
0010e8  a801              ADD      r0,sp,#4              ;743
0010ea  f7fffffe          BL       dhcp_option_trailer
0010ee  f8bd201c          LDRH     r2,[sp,#0x1c]         ;745
0010f2  32f0              ADDS     r2,r2,#0xf0           ;745
0010f4  b291              UXTH     r1,r2                 ;745
0010f6  9805              LDR      r0,[sp,#0x14]         ;745
0010f8  f7fffffe          BL       pbuf_realloc
0010fc  bf00              NOP                            ;747
0010fe  bf00              NOP                            ;747
001100  9400              STR      r4,[sp,#0]            ;748
001102  2343              MOVS     r3,#0x43              ;748
001104  4a52              LDR      r2,|L1.4688|
001106  4628              MOV      r0,r5                 ;748
001108  9905              LDR      r1,[sp,#0x14]         ;748
00110a  f7fffffe          BL       udp_sendto_if
00110e  a801              ADD      r0,sp,#4              ;749
001110  f7fffffe          BL       dhcp_delete_msg
001114  e001              B        |L1.4378|
                  |L1.4374|
001116  bf00              NOP                            ;751
001118  bf00              NOP                            ;751
                  |L1.4378|
00111a  9802              LDR      r0,[sp,#8]            ;754
00111c  b110              CBZ      r0,|L1.4388|
00111e  9802              LDR      r0,[sp,#8]            ;756
001120  f7fffffe          BL       udp_remove
                  |L1.4388|
001124  bf00              NOP      
001126  e7a7              B        |L1.4216|
;;;759    
                          ENDP

                  dhcp_network_changed PROC
;;;765    void
;;;766    dhcp_network_changed(struct netif *netif)
001128  b570              PUSH     {r4-r6,lr}
;;;767    {
00112a  4605              MOV      r5,r0
;;;768      struct dhcp *dhcp = netif->dhcp;
00112c  6a2c              LDR      r4,[r5,#0x20]
;;;769      if (!dhcp)
00112e  b904              CBNZ     r4,|L1.4402|
                  |L1.4400|
;;;770        return;
;;;771      switch (dhcp->state) {
;;;772      case DHCP_REBINDING:
;;;773      case DHCP_RENEWING:
;;;774      case DHCP_BOUND:
;;;775      case DHCP_REBOOTING:
;;;776        netif_set_down(netif);
;;;777        dhcp->tries = 0;
;;;778        dhcp_reboot(netif);
;;;779        break;
;;;780      case DHCP_OFF:
;;;781        /* stay off */
;;;782        break;
;;;783      default:
;;;784        dhcp->tries = 0;
;;;785    #if LWIP_DHCP_AUTOIP_COOP
;;;786        if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;787          autoip_stop(netif);
;;;788          dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;789        }
;;;790    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;791        dhcp_discover(netif);
;;;792        break;
;;;793      }
;;;794    }
001130  bd70              POP      {r4-r6,pc}
                  |L1.4402|
001132  7b20              LDRB     r0,[r4,#0xc]          ;771
001134  2804              CMP      r0,#4                 ;771
001136  d009              BEQ      |L1.4428|
001138  dc03              BGT      |L1.4418|
00113a  b198              CBZ      r0,|L1.4452|
00113c  2803              CMP      r0,#3                 ;771
00113e  d112              BNE      |L1.4454|
001140  e007              B        |L1.4434|
                  |L1.4418|
001142  2805              CMP      r0,#5                 ;771
001144  d003              BEQ      |L1.4430|
001146  280a              CMP      r0,#0xa               ;771
001148  d10d              BNE      |L1.4454|
00114a  e001              B        |L1.4432|
                  |L1.4428|
00114c  bf00              NOP                            ;773
                  |L1.4430|
00114e  bf00              NOP                            ;774
                  |L1.4432|
001150  bf00              NOP                            ;775
                  |L1.4434|
001152  4628              MOV      r0,r5                 ;776
001154  f7fffffe          BL       netif_set_down
001158  2000              MOVS     r0,#0                 ;777
00115a  7360              STRB     r0,[r4,#0xd]          ;777
00115c  4628              MOV      r0,r5                 ;778
00115e  f7fffffe          BL       dhcp_reboot
001162  e006              B        |L1.4466|
                  |L1.4452|
001164  e005              B        |L1.4466|
                  |L1.4454|
001166  2000              MOVS     r0,#0                 ;784
001168  7360              STRB     r0,[r4,#0xd]          ;784
00116a  4628              MOV      r0,r5                 ;791
00116c  f7fffffe          BL       dhcp_discover
001170  bf00              NOP                            ;792
                  |L1.4466|
001172  bf00              NOP                            ;779
001174  bf00              NOP      
001176  e7db              B        |L1.4400|
;;;795    
                          ENDP

                  dhcp_decline PROC
;;;831    static err_t
;;;832    dhcp_decline(struct netif *netif)
001178  e92d43f8          PUSH     {r3-r9,lr}
;;;833    {
00117c  4605              MOV      r5,r0
;;;834      struct dhcp *dhcp = netif->dhcp;
00117e  6a2c              LDR      r4,[r5,#0x20]
;;;835      err_t result = ERR_OK;
001180  2600              MOVS     r6,#0
;;;836      u16_t msecs;
;;;837      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
001182  bf00              NOP      
001184  bf00              NOP      
;;;838      dhcp_set_state(dhcp, DHCP_BACKING_OFF);
001186  210c              MOVS     r1,#0xc
001188  4620              MOV      r0,r4
00118a  f7fffffe          BL       dhcp_set_state
;;;839      /* create and initialize the DHCP message header */
;;;840      result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
00118e  2204              MOVS     r2,#4
001190  4621              MOV      r1,r4
001192  4628              MOV      r0,r5
001194  f7fffffe          BL       dhcp_create_msg
001198  4606              MOV      r6,r0
;;;841      if (result == ERR_OK) {
00119a  bb0e              CBNZ     r6,|L1.4576|
;;;842        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
00119c  2204              MOVS     r2,#4
00119e  2132              MOVS     r1,#0x32
0011a0  4620              MOV      r0,r4
0011a2  f7fffffe          BL       dhcp_option
;;;843        dhcp_option_long(dhcp, ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
0011a6  6a60              LDR      r0,[r4,#0x24]
0011a8  f7fffffe          BL       lwip_ntohl
0011ac  4680              MOV      r8,r0
0011ae  4641              MOV      r1,r8
0011b0  4620              MOV      r0,r4
0011b2  f7fffffe          BL       dhcp_option_long
;;;844    
;;;845        dhcp_option_trailer(dhcp);
0011b6  4620              MOV      r0,r4
0011b8  f7fffffe          BL       dhcp_option_trailer
;;;846        /* resize pbuf to reflect true size of options */
;;;847        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
0011bc  8b22              LDRH     r2,[r4,#0x18]
0011be  32f0              ADDS     r2,r2,#0xf0
0011c0  b291              UXTH     r1,r2
0011c2  6920              LDR      r0,[r4,#0x10]
0011c4  f7fffffe          BL       pbuf_realloc
;;;848    
;;;849        /* per section 4.4.4, broadcast DECLINE messages */
;;;850        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
0011c8  9500              STR      r5,[sp,#0]
0011ca  2343              MOVS     r3,#0x43
0011cc  4a20              LDR      r2,|L1.4688|
0011ce  6921              LDR      r1,[r4,#0x10]
0011d0  6860              LDR      r0,[r4,#4]
0011d2  f7fffffe          BL       udp_sendto_if
;;;851        dhcp_delete_msg(dhcp);
0011d6  4620              MOV      r0,r4
0011d8  f7fffffe          BL       dhcp_delete_msg
;;;852        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
0011dc  bf00              NOP      
0011de  e001              B        |L1.4580|
                  |L1.4576|
;;;853      } else {
;;;854        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
0011e0  bf00              NOP      
0011e2  bf00              NOP      
                  |L1.4580|
;;;855          ("dhcp_decline: could not allocate DHCP request\n"));
;;;856      }
;;;857      dhcp->tries++;
0011e4  7b60              LDRB     r0,[r4,#0xd]
0011e6  1c40              ADDS     r0,r0,#1
0011e8  7360              STRB     r0,[r4,#0xd]
;;;858      msecs = 10*1000;
0011ea  f2427710          MOV      r7,#0x2710
;;;859      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0011ee  f20710f3          ADD      r0,r7,#0x1f3
0011f2  f44f71fa          MOV      r1,#0x1f4
0011f6  fb90f0f1          SDIV     r0,r0,r1
0011fa  8360              STRH     r0,[r4,#0x1a]
;;;860      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
0011fc  bf00              NOP      
0011fe  bf00              NOP      
;;;861      return result;
001200  4630              MOV      r0,r6
;;;862    }
001202  e8bd83f8          POP      {r3-r9,pc}
;;;863    #endif /* DHCP_DOES_ARP_CHECK */
                          ENDP

                  dhcp_arp_reply PROC
;;;802     */
;;;803    void dhcp_arp_reply(struct netif *netif, ip_addr_t *addr)
001206  b570              PUSH     {r4-r6,lr}
;;;804    {
001208  4604              MOV      r4,r0
00120a  460d              MOV      r5,r1
;;;805      LWIP_ERROR("netif != NULL", (netif != NULL), return;);
00120c  bf00              NOP      
00120e  b904              CBNZ     r4,|L1.4626|
                  |L1.4624|
;;;806      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
;;;807      /* is a DHCP client doing an ARP check? */
;;;808      if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
;;;809        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
;;;810          ip4_addr_get_u32(addr)));
;;;811        /* did a host respond with the address we
;;;812           were offered by the DHCP server? */
;;;813        if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
;;;814          /* we will not accept the offered address */
;;;815          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
;;;816            ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
;;;817          dhcp_decline(netif);
;;;818        }
;;;819      }
;;;820    }
001210  bd70              POP      {r4-r6,pc}
                  |L1.4626|
001212  bf00              NOP                            ;805
001214  bf00              NOP                            ;806
001216  bf00              NOP                            ;806
001218  6a20              LDR      r0,[r4,#0x20]         ;808
00121a  b178              CBZ      r0,|L1.4668|
00121c  6a20              LDR      r0,[r4,#0x20]         ;808
00121e  7b00              LDRB     r0,[r0,#0xc]          ;808
001220  2808              CMP      r0,#8                 ;808
001222  d10b              BNE      |L1.4668|
001224  bf00              NOP                            ;809
001226  bf00              NOP                            ;809
001228  6828              LDR      r0,[r5,#0]            ;813
00122a  6a21              LDR      r1,[r4,#0x20]         ;813
00122c  6a49              LDR      r1,[r1,#0x24]         ;813
00122e  4288              CMP      r0,r1                 ;813
001230  d104              BNE      |L1.4668|
001232  bf00              NOP                            ;815
001234  bf00              NOP                            ;815
001236  4620              MOV      r0,r4                 ;817
001238  f7fffffe          BL       dhcp_decline
                  |L1.4668|
00123c  bf00              NOP      
00123e  e7e7              B        |L1.4624|
;;;821    
                          ENDP

                  |L1.4672|
                          DCD      dhcp_rx_options_given
                  |L1.4676|
                          DCD      dhcp_rx_options_val
                  |L1.4680|
                          DCD      ip_addr_any
                  |L1.4684|
                          DCD      dhcp_recv
                  |L1.4688|
                          DCD      ip_addr_broadcast

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  dhcp_rx_options_val
                          %        40
                  dhcp_rx_options_given
                          %        10

                          AREA ||.data||, DATA, ALIGN=2

                  xid
                          DCD      0x00000000

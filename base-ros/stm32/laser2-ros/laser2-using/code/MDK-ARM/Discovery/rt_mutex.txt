; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\rt_mutex.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\rt_mutex.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\rt_mutex.crf ..\..\libraries\rtx-v4.73\SRC\rt_Mutex.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  rt_mut_init PROC
;;;49     
;;;50     void rt_mut_init (OS_ID mutex) {
000000  4601              MOV      r1,r0
;;;51       /* Initialize a mutex object */
;;;52       P_MUCB p_MCB = mutex;
;;;53     
;;;54       p_MCB->cb_type = MUCB;
000002  2203              MOVS     r2,#3
000004  700a              STRB     r2,[r1,#0]
;;;55       p_MCB->level   = 0;
000006  2200              MOVS     r2,#0
000008  804a              STRH     r2,[r1,#2]
;;;56       p_MCB->p_lnk   = NULL;
00000a  604a              STR      r2,[r1,#4]
;;;57       p_MCB->owner   = NULL;
00000c  608a              STR      r2,[r1,#8]
;;;58       p_MCB->p_mlnk  = NULL;
00000e  60ca              STR      r2,[r1,#0xc]
;;;59     }
000010  4770              BX       lr
;;;60     
                          ENDP

                  rt_mut_delete PROC
;;;64     #ifdef __CMSIS_RTOS
;;;65     OS_RESULT rt_mut_delete (OS_ID mutex) {
000012  e92d41f0          PUSH     {r4-r8,lr}
000016  4680              MOV      r8,r0
;;;66       /* Delete a mutex object */
;;;67       P_MUCB p_MCB = mutex;
000018  4646              MOV      r6,r8
;;;68       P_TCB  p_TCB;
;;;69       P_MUCB p_mlnk;
;;;70       U8     prio;
;;;71     
;;;72       if (p_MCB->level != 0) {
00001a  8870              LDRH     r0,[r6,#2]
00001c  2800              CMP      r0,#0
00001e  d02b              BEQ      |L1.120|
;;;73     
;;;74         p_TCB = p_MCB->owner;
000020  68b4              LDR      r4,[r6,#8]
;;;75     
;;;76         /* Remove mutex from task mutex owner list. */
;;;77         p_mlnk = p_TCB->p_mlnk;
000022  6a25              LDR      r5,[r4,#0x20]
;;;78         if (p_mlnk == p_MCB) {
000024  42b5              CMP      r5,r6
000026  d102              BNE      |L1.46|
;;;79           p_TCB->p_mlnk = p_MCB->p_mlnk;
000028  68f0              LDR      r0,[r6,#0xc]
00002a  6220              STR      r0,[r4,#0x20]
00002c  e00a              B        |L1.68|
                  |L1.46|
;;;80         }
;;;81         else {
;;;82           while (p_mlnk) {
00002e  e006              B        |L1.62|
                  |L1.48|
;;;83             if (p_mlnk->p_mlnk == p_MCB) {
000030  68e8              LDR      r0,[r5,#0xc]
000032  42b0              CMP      r0,r6
000034  d102              BNE      |L1.60|
;;;84               p_mlnk->p_mlnk = p_MCB->p_mlnk;
000036  68f0              LDR      r0,[r6,#0xc]
000038  60e8              STR      r0,[r5,#0xc]
;;;85               break;
00003a  e002              B        |L1.66|
                  |L1.60|
;;;86             }
;;;87             p_mlnk = p_mlnk->p_mlnk;
00003c  68ed              LDR      r5,[r5,#0xc]
                  |L1.62|
00003e  2d00              CMP      r5,#0                 ;82
000040  d1f6              BNE      |L1.48|
                  |L1.66|
000042  bf00              NOP                            ;85
                  |L1.68|
;;;88           }
;;;89         }
;;;90     
;;;91         /* Restore owner task's priority. */
;;;92         prio = p_TCB->prio_base;
000044  f8947024          LDRB     r7,[r4,#0x24]
;;;93         p_mlnk = p_TCB->p_mlnk;
000048  6a25              LDR      r5,[r4,#0x20]
;;;94         while (p_mlnk) {
00004a  e008              B        |L1.94|
                  |L1.76|
;;;95           if (p_mlnk->p_lnk && (p_mlnk->p_lnk->prio > prio)) {
00004c  6868              LDR      r0,[r5,#4]
00004e  b128              CBZ      r0,|L1.92|
000050  6868              LDR      r0,[r5,#4]
000052  7880              LDRB     r0,[r0,#2]
000054  42b8              CMP      r0,r7
000056  dd01              BLE      |L1.92|
;;;96             /* A task with higher priority is waiting for mutex. */
;;;97             prio = p_mlnk->p_lnk->prio;
000058  6868              LDR      r0,[r5,#4]
00005a  7887              LDRB     r7,[r0,#2]
                  |L1.92|
;;;98           }
;;;99           p_mlnk = p_mlnk->p_mlnk;
00005c  68ed              LDR      r5,[r5,#0xc]
                  |L1.94|
00005e  2d00              CMP      r5,#0                 ;94
000060  d1f4              BNE      |L1.76|
;;;100        }
;;;101        if (p_TCB->prio != prio) {
000062  78a0              LDRB     r0,[r4,#2]
000064  42b8              CMP      r0,r7
000066  d007              BEQ      |L1.120|
;;;102          p_TCB->prio = prio;
000068  70a7              STRB     r7,[r4,#2]
;;;103          if (p_TCB != os_tsk.run) {
00006a  4883              LDR      r0,|L1.632|
00006c  6800              LDR      r0,[r0,#0]  ; os_tsk
00006e  42a0              CMP      r0,r4
000070  d002              BEQ      |L1.120|
;;;104            rt_resort_prio (p_TCB);
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       rt_resort_prio
                  |L1.120|
;;;105          }
;;;106        }
;;;107    
;;;108      }
;;;109    
;;;110      while (p_MCB->p_lnk != NULL) {
000078  e010              B        |L1.156|
                  |L1.122|
;;;111        /* A task is waiting for mutex. */
;;;112        p_TCB = rt_get_first ((P_XCB)p_MCB);
00007a  4630              MOV      r0,r6
00007c  f7fffffe          BL       rt_get_first
000080  4604              MOV      r4,r0
;;;113        rt_ret_val(p_TCB, 0/*osOK*/);
000082  2100              MOVS     r1,#0
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       rt_ret_val
;;;114        rt_rmv_dly(p_TCB);
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       rt_rmv_dly
;;;115        p_TCB->state = READY;
000090  2001              MOVS     r0,#1
000092  7060              STRB     r0,[r4,#1]
;;;116        rt_put_prio (&os_rdy, p_TCB);
000094  4621              MOV      r1,r4
000096  4879              LDR      r0,|L1.636|
000098  f7fffffe          BL       rt_put_prio
                  |L1.156|
00009c  6870              LDR      r0,[r6,#4]            ;110
00009e  2800              CMP      r0,#0                 ;110
0000a0  d1eb              BNE      |L1.122|
;;;117      }
;;;118    
;;;119      if (os_rdy.p_lnk && (os_rdy.p_lnk->prio > os_tsk.run->prio)) {
0000a2  4876              LDR      r0,|L1.636|
0000a4  6840              LDR      r0,[r0,#4]  ; os_rdy
0000a6  b198              CBZ      r0,|L1.208|
0000a8  4874              LDR      r0,|L1.636|
0000aa  6840              LDR      r0,[r0,#4]  ; os_rdy
0000ac  7880              LDRB     r0,[r0,#2]
0000ae  4972              LDR      r1,|L1.632|
0000b0  6809              LDR      r1,[r1,#0]  ; os_tsk
0000b2  7889              LDRB     r1,[r1,#2]
0000b4  4288              CMP      r0,r1
0000b6  dd0b              BLE      |L1.208|
;;;120        /* preempt running task */
;;;121        rt_put_prio (&os_rdy, os_tsk.run);
0000b8  486f              LDR      r0,|L1.632|
0000ba  6801              LDR      r1,[r0,#0]  ; os_tsk
0000bc  486f              LDR      r0,|L1.636|
0000be  f7fffffe          BL       rt_put_prio
;;;122        os_tsk.run->state = READY;
0000c2  2001              MOVS     r0,#1
0000c4  496c              LDR      r1,|L1.632|
0000c6  6809              LDR      r1,[r1,#0]  ; os_tsk
0000c8  7048              STRB     r0,[r1,#1]
;;;123        rt_dispatch (NULL);
0000ca  2000              MOVS     r0,#0
0000cc  f7fffffe          BL       rt_dispatch
                  |L1.208|
;;;124      }
;;;125    
;;;126      p_MCB->cb_type = 0;
0000d0  2000              MOVS     r0,#0
0000d2  7030              STRB     r0,[r6,#0]
;;;127    
;;;128      return (OS_R_OK);
;;;129    }
0000d4  e8bd81f0          POP      {r4-r8,pc}
;;;130    #endif
                          ENDP

                  rt_mut_release PROC
;;;134    
;;;135    OS_RESULT rt_mut_release (OS_ID mutex) {
0000d8  e92d41f0          PUSH     {r4-r8,lr}
0000dc  4607              MOV      r7,r0
;;;136      /* Release a mutex object */
;;;137      P_MUCB p_MCB = mutex;
0000de  463c              MOV      r4,r7
;;;138      P_TCB  p_TCB;
;;;139      P_MUCB p_mlnk;
;;;140      U8     prio;
;;;141    
;;;142      if (p_MCB->level == 0 || p_MCB->owner != os_tsk.run) {
0000e0  8860              LDRH     r0,[r4,#2]
0000e2  b120              CBZ      r0,|L1.238|
0000e4  4964              LDR      r1,|L1.632|
0000e6  68a0              LDR      r0,[r4,#8]
0000e8  6809              LDR      r1,[r1,#0]  ; os_tsk
0000ea  4288              CMP      r0,r1
0000ec  d002              BEQ      |L1.244|
                  |L1.238|
;;;143        /* Unbalanced mutex release or task is not the owner */
;;;144        return (OS_R_NOK);
0000ee  20ff              MOVS     r0,#0xff
                  |L1.240|
;;;145      }
;;;146      if (--p_MCB->level != 0) {
;;;147        return (OS_R_OK);
;;;148      }
;;;149    
;;;150      /* Remove mutex from task mutex owner list. */
;;;151      p_mlnk = os_tsk.run->p_mlnk;
;;;152      if (p_mlnk == p_MCB) {
;;;153        os_tsk.run->p_mlnk = p_MCB->p_mlnk;
;;;154      }
;;;155      else {
;;;156        while (p_mlnk) {
;;;157          if (p_mlnk->p_mlnk == p_MCB) {
;;;158            p_mlnk->p_mlnk = p_MCB->p_mlnk;
;;;159            break;
;;;160          }
;;;161          p_mlnk = p_mlnk->p_mlnk;
;;;162        }
;;;163      }
;;;164    
;;;165      /* Restore owner task's priority. */
;;;166      prio = os_tsk.run->prio_base;
;;;167      p_mlnk = os_tsk.run->p_mlnk;
;;;168      while (p_mlnk) {
;;;169        if (p_mlnk->p_lnk && (p_mlnk->p_lnk->prio > prio)) {
;;;170          /* A task with higher priority is waiting for mutex. */
;;;171          prio = p_mlnk->p_lnk->prio;
;;;172        }
;;;173        p_mlnk = p_mlnk->p_mlnk;
;;;174      }
;;;175      os_tsk.run->prio = prio;
;;;176    
;;;177      if (p_MCB->p_lnk != NULL) {
;;;178        /* A task is waiting for mutex. */
;;;179        p_TCB = rt_get_first ((P_XCB)p_MCB);
;;;180    #ifdef __CMSIS_RTOS
;;;181        rt_ret_val(p_TCB, 0/*osOK*/);
;;;182    #else
;;;183        rt_ret_val(p_TCB, OS_R_MUT); 
;;;184    #endif
;;;185        rt_rmv_dly (p_TCB);
;;;186        /* A waiting task becomes the owner of this mutex. */
;;;187        p_MCB->level  = 1;
;;;188        p_MCB->owner  = p_TCB;
;;;189        p_MCB->p_mlnk = p_TCB->p_mlnk;
;;;190        p_TCB->p_mlnk = p_MCB; 
;;;191        /* Priority inversion, check which task continues. */
;;;192        if (os_tsk.run->prio >= rt_rdy_prio()) {
;;;193          rt_dispatch (p_TCB);
;;;194        }
;;;195        else {
;;;196          /* Ready task has higher priority than running task. */
;;;197          rt_put_prio (&os_rdy, os_tsk.run);
;;;198          rt_put_prio (&os_rdy, p_TCB);
;;;199          os_tsk.run->state = READY;
;;;200          p_TCB->state      = READY;
;;;201          rt_dispatch (NULL);
;;;202        }
;;;203      }
;;;204      else {
;;;205        /* Check if own priority lowered by priority inversion. */
;;;206        if (rt_rdy_prio() > os_tsk.run->prio) {
;;;207          rt_put_prio (&os_rdy, os_tsk.run);
;;;208          os_tsk.run->state = READY;
;;;209          rt_dispatch (NULL);
;;;210        }
;;;211      }
;;;212      return (OS_R_OK);
;;;213    }
0000f0  e8bd81f0          POP      {r4-r8,pc}
                  |L1.244|
0000f4  8860              LDRH     r0,[r4,#2]            ;146
0000f6  1e40              SUBS     r0,r0,#1              ;146
0000f8  b280              UXTH     r0,r0                 ;146
0000fa  8060              STRH     r0,[r4,#2]            ;146
0000fc  b108              CBZ      r0,|L1.258|
0000fe  2000              MOVS     r0,#0                 ;147
000100  e7f6              B        |L1.240|
                  |L1.258|
000102  485d              LDR      r0,|L1.632|
000104  6800              LDR      r0,[r0,#0]            ;151  ; os_tsk
000106  6a05              LDR      r5,[r0,#0x20]         ;151
000108  42a5              CMP      r5,r4                 ;152
00010a  d104              BNE      |L1.278|
00010c  495a              LDR      r1,|L1.632|
00010e  68e0              LDR      r0,[r4,#0xc]          ;153
000110  6809              LDR      r1,[r1,#0]            ;153  ; os_tsk
000112  6208              STR      r0,[r1,#0x20]         ;153
000114  e00a              B        |L1.300|
                  |L1.278|
000116  e006              B        |L1.294|
                  |L1.280|
000118  68e8              LDR      r0,[r5,#0xc]          ;157
00011a  42a0              CMP      r0,r4                 ;157
00011c  d102              BNE      |L1.292|
00011e  68e0              LDR      r0,[r4,#0xc]          ;158
000120  60e8              STR      r0,[r5,#0xc]          ;158
000122  e002              B        |L1.298|
                  |L1.292|
000124  68ed              LDR      r5,[r5,#0xc]          ;161
                  |L1.294|
000126  2d00              CMP      r5,#0                 ;156
000128  d1f6              BNE      |L1.280|
                  |L1.298|
00012a  bf00              NOP                            ;159
                  |L1.300|
00012c  4852              LDR      r0,|L1.632|
00012e  6800              LDR      r0,[r0,#0]            ;166  ; os_tsk
000130  f8908024          LDRB     r8,[r0,#0x24]         ;166
000134  4850              LDR      r0,|L1.632|
000136  6800              LDR      r0,[r0,#0]            ;167  ; os_tsk
000138  6a05              LDR      r5,[r0,#0x20]         ;167
00013a  e009              B        |L1.336|
                  |L1.316|
00013c  6868              LDR      r0,[r5,#4]            ;169
00013e  b130              CBZ      r0,|L1.334|
000140  6868              LDR      r0,[r5,#4]            ;169
000142  7880              LDRB     r0,[r0,#2]            ;169
000144  4540              CMP      r0,r8                 ;169
000146  dd02              BLE      |L1.334|
000148  6868              LDR      r0,[r5,#4]            ;171
00014a  f8908002          LDRB     r8,[r0,#2]            ;171
                  |L1.334|
00014e  68ed              LDR      r5,[r5,#0xc]          ;173
                  |L1.336|
000150  2d00              CMP      r5,#0                 ;168
000152  d1f3              BNE      |L1.316|
000154  4848              LDR      r0,|L1.632|
000156  6800              LDR      r0,[r0,#0]            ;175  ; os_tsk
000158  f8808002          STRB     r8,[r0,#2]            ;175
00015c  6860              LDR      r0,[r4,#4]            ;177
00015e  b370              CBZ      r0,|L1.446|
000160  4620              MOV      r0,r4                 ;179
000162  f7fffffe          BL       rt_get_first
000166  4606              MOV      r6,r0                 ;179
000168  2100              MOVS     r1,#0                 ;181
00016a  4630              MOV      r0,r6                 ;181
00016c  f7fffffe          BL       rt_ret_val
000170  4630              MOV      r0,r6                 ;185
000172  f7fffffe          BL       rt_rmv_dly
000176  2001              MOVS     r0,#1                 ;187
000178  8060              STRH     r0,[r4,#2]            ;187
00017a  60a6              STR      r6,[r4,#8]            ;188
00017c  6a30              LDR      r0,[r6,#0x20]         ;189
00017e  60e0              STR      r0,[r4,#0xc]          ;189
000180  6234              STR      r4,[r6,#0x20]         ;190
000182  483d              LDR      r0,|L1.632|
000184  6800              LDR      r0,[r0,#0]            ;192  ; os_tsk
000186  7880              LDRB     r0,[r0,#2]            ;192
000188  493c              LDR      r1,|L1.636|
00018a  6849              LDR      r1,[r1,#4]            ;192  ; os_rdy
00018c  7889              LDRB     r1,[r1,#2]            ;192
00018e  4288              CMP      r0,r1                 ;192
000190  db03              BLT      |L1.410|
000192  4630              MOV      r0,r6                 ;193
000194  f7fffffe          BL       rt_dispatch
000198  e026              B        |L1.488|
                  |L1.410|
00019a  4837              LDR      r0,|L1.632|
00019c  6801              LDR      r1,[r0,#0]            ;197  ; os_tsk
00019e  4837              LDR      r0,|L1.636|
0001a0  f7fffffe          BL       rt_put_prio
0001a4  4631              MOV      r1,r6                 ;198
0001a6  4835              LDR      r0,|L1.636|
0001a8  f7fffffe          BL       rt_put_prio
0001ac  2001              MOVS     r0,#1                 ;199
0001ae  4932              LDR      r1,|L1.632|
0001b0  6809              LDR      r1,[r1,#0]            ;199  ; os_tsk
0001b2  7048              STRB     r0,[r1,#1]            ;199
0001b4  7070              STRB     r0,[r6,#1]            ;200
0001b6  2000              MOVS     r0,#0                 ;201
0001b8  f7fffffe          BL       rt_dispatch
0001bc  e014              B        |L1.488|
                  |L1.446|
0001be  e7ff              B        |L1.448|
                  |L1.448|
0001c0  482e              LDR      r0,|L1.636|
0001c2  6840              LDR      r0,[r0,#4]            ;206  ; os_rdy
0001c4  7880              LDRB     r0,[r0,#2]            ;206
0001c6  492c              LDR      r1,|L1.632|
0001c8  6809              LDR      r1,[r1,#0]            ;206  ; os_tsk
0001ca  7889              LDRB     r1,[r1,#2]            ;206
0001cc  4288              CMP      r0,r1                 ;206
0001ce  dd0b              BLE      |L1.488|
0001d0  4829              LDR      r0,|L1.632|
0001d2  6801              LDR      r1,[r0,#0]            ;207  ; os_tsk
0001d4  4829              LDR      r0,|L1.636|
0001d6  f7fffffe          BL       rt_put_prio
0001da  2001              MOVS     r0,#1                 ;208
0001dc  4926              LDR      r1,|L1.632|
0001de  6809              LDR      r1,[r1,#0]            ;208  ; os_tsk
0001e0  7048              STRB     r0,[r1,#1]            ;208
0001e2  2000              MOVS     r0,#0                 ;209
0001e4  f7fffffe          BL       rt_dispatch
                  |L1.488|
0001e8  2000              MOVS     r0,#0                 ;212
0001ea  e781              B        |L1.240|
;;;214    
                          ENDP

                  rt_mut_wait PROC
;;;217    
;;;218    OS_RESULT rt_mut_wait (OS_ID mutex, U16 timeout) {
0001ec  b570              PUSH     {r4-r6,lr}
0001ee  4605              MOV      r5,r0
0001f0  460e              MOV      r6,r1
;;;219      /* Wait for a mutex, continue when mutex is free. */
;;;220      P_MUCB p_MCB = mutex;
0001f2  462c              MOV      r4,r5
;;;221    
;;;222      if (p_MCB->level == 0) {
0001f4  8860              LDRH     r0,[r4,#2]
0001f6  b950              CBNZ     r0,|L1.526|
;;;223        p_MCB->owner  = os_tsk.run;
0001f8  481f              LDR      r0,|L1.632|
0001fa  6800              LDR      r0,[r0,#0]  ; os_tsk
0001fc  60a0              STR      r0,[r4,#8]
;;;224        p_MCB->p_mlnk = os_tsk.run->p_mlnk;
0001fe  481e              LDR      r0,|L1.632|
000200  6800              LDR      r0,[r0,#0]  ; os_tsk
000202  6a00              LDR      r0,[r0,#0x20]
000204  60e0              STR      r0,[r4,#0xc]
;;;225        os_tsk.run->p_mlnk = p_MCB; 
000206  481c              LDR      r0,|L1.632|
000208  6800              LDR      r0,[r0,#0]  ; os_tsk
00020a  6204              STR      r4,[r0,#0x20]
;;;226        goto inc;
00020c  e005              B        |L1.538|
                  |L1.526|
;;;227      }
;;;228      if (p_MCB->owner == os_tsk.run) {
00020e  491a              LDR      r1,|L1.632|
000210  68a0              LDR      r0,[r4,#8]
000212  6809              LDR      r1,[r1,#0]  ; os_tsk
000214  4288              CMP      r0,r1
000216  d105              BNE      |L1.548|
;;;229        /* OK, running task is the owner of this mutex. */
;;;230    inc:p_MCB->level++;
000218  bf00              NOP      
                  |L1.538|
00021a  8860              LDRH     r0,[r4,#2]
00021c  1c40              ADDS     r0,r0,#1
00021e  8060              STRH     r0,[r4,#2]
;;;231        return (OS_R_OK);
000220  2000              MOVS     r0,#0
                  |L1.546|
;;;232      }
;;;233      /* Mutex owned by another task, wait until released. */
;;;234      if (timeout == 0) {
;;;235        return (OS_R_TMO);
;;;236      }
;;;237      /* Raise the owner task priority if lower than current priority. */
;;;238      /* This priority inversion is called priority inheritance.       */
;;;239      if (p_MCB->owner->prio < os_tsk.run->prio) {
;;;240        p_MCB->owner->prio = os_tsk.run->prio;
;;;241        rt_resort_prio (p_MCB->owner);
;;;242      }
;;;243      if (p_MCB->p_lnk != NULL) {
;;;244        rt_put_prio ((P_XCB)p_MCB, os_tsk.run);
;;;245      }
;;;246      else {
;;;247        p_MCB->p_lnk = os_tsk.run;
;;;248        os_tsk.run->p_lnk  = NULL;
;;;249        os_tsk.run->p_rlnk = (P_TCB)p_MCB;
;;;250      }
;;;251      rt_block(timeout, WAIT_MUT);
;;;252      return (OS_R_TMO);
;;;253    }
000222  bd70              POP      {r4-r6,pc}
                  |L1.548|
000224  b90e              CBNZ     r6,|L1.554|
000226  2001              MOVS     r0,#1                 ;235
000228  e7fb              B        |L1.546|
                  |L1.554|
00022a  68a0              LDR      r0,[r4,#8]            ;239
00022c  7880              LDRB     r0,[r0,#2]            ;239
00022e  4912              LDR      r1,|L1.632|
000230  6809              LDR      r1,[r1,#0]            ;239  ; os_tsk
000232  7889              LDRB     r1,[r1,#2]            ;239
000234  4288              CMP      r0,r1                 ;239
000236  da07              BGE      |L1.584|
000238  480f              LDR      r0,|L1.632|
00023a  6800              LDR      r0,[r0,#0]            ;240  ; os_tsk
00023c  7880              LDRB     r0,[r0,#2]            ;240
00023e  68a1              LDR      r1,[r4,#8]            ;240
000240  7088              STRB     r0,[r1,#2]            ;240
000242  68a0              LDR      r0,[r4,#8]            ;241
000244  f7fffffe          BL       rt_resort_prio
                  |L1.584|
000248  6860              LDR      r0,[r4,#4]            ;243
00024a  b128              CBZ      r0,|L1.600|
00024c  480a              LDR      r0,|L1.632|
00024e  6801              LDR      r1,[r0,#0]            ;244  ; os_tsk
000250  4620              MOV      r0,r4                 ;244
000252  f7fffffe          BL       rt_put_prio
000256  e009              B        |L1.620|
                  |L1.600|
000258  4807              LDR      r0,|L1.632|
00025a  6800              LDR      r0,[r0,#0]            ;247  ; os_tsk
00025c  6060              STR      r0,[r4,#4]            ;247
00025e  2000              MOVS     r0,#0                 ;248
000260  4905              LDR      r1,|L1.632|
000262  6809              LDR      r1,[r1,#0]            ;248  ; os_tsk
000264  6048              STR      r0,[r1,#4]            ;248
000266  4804              LDR      r0,|L1.632|
000268  6800              LDR      r0,[r0,#0]            ;249  ; os_tsk
00026a  6084              STR      r4,[r0,#8]            ;249
                  |L1.620|
00026c  2109              MOVS     r1,#9                 ;251
00026e  4630              MOV      r0,r6                 ;251
000270  f7fffffe          BL       rt_block
000274  2001              MOVS     r0,#1                 ;252
000276  e7d4              B        |L1.546|
;;;254    
                          ENDP

                  |L1.632|
                          DCD      os_tsk
                  |L1.636|
                          DCD      os_rdy

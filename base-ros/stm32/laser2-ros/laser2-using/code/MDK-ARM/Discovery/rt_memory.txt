; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\rt_memory.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\rt_memory.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\rt_memory.crf ..\..\libraries\rtx-v4.73\SRC\rt_Memory.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  rt_init_mem PROC
;;;46     
;;;47     int rt_init_mem (void *pool, U32 size) {
000000  b510              PUSH     {r4,lr}
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;48       MEMP *ptr;
;;;49     
;;;50       if ((pool == NULL) || (size < sizeof(MEMP))) return (1);
000006  b10a              CBZ      r2,|L1.12|
000008  2b08              CMP      r3,#8
00000a  d201              BCS      |L1.16|
                  |L1.12|
00000c  2001              MOVS     r0,#1
                  |L1.14|
;;;51     
;;;52       ptr = (MEMP *)pool;
;;;53       ptr->next = (MEMP *)((U32)pool + size - sizeof(MEMP *));
;;;54       ptr->next->next = NULL;
;;;55       ptr->len = 0; 
;;;56     
;;;57       return (0);
;;;58     }
00000e  bd10              POP      {r4,pc}
                  |L1.16|
000010  4611              MOV      r1,r2                 ;52
000012  18d0              ADDS     r0,r2,r3              ;53
000014  1f00              SUBS     r0,r0,#4              ;53
000016  6008              STR      r0,[r1,#0]            ;53
000018  2000              MOVS     r0,#0                 ;54
00001a  680c              LDR      r4,[r1,#0]            ;54
00001c  6020              STR      r0,[r4,#0]            ;54
00001e  6048              STR      r0,[r1,#4]            ;55
000020  bf00              NOP                            ;57
000022  e7f4              B        |L1.14|
;;;59     
                          ENDP

                  rt_alloc_mem PROC
;;;65     
;;;66     void *rt_alloc_mem (void *pool, U32 size) {
000024  b570              PUSH     {r4-r6,lr}
000026  4604              MOV      r4,r0
000028  460a              MOV      r2,r1
;;;67       MEMP *p, *p_search, *p_new;
;;;68       U32   hole_size;
;;;69     
;;;70       if ((pool == NULL) || (size == 0)) return NULL;
00002a  b104              CBZ      r4,|L1.46|
00002c  b90a              CBNZ     r2,|L1.50|
                  |L1.46|
00002e  2000              MOVS     r0,#0
                  |L1.48|
;;;71     
;;;72       /* Add header offset to 'size' */
;;;73       size += sizeof(MEMP);
;;;74       /* Make sure that block is 4-byte aligned  */
;;;75       size = (size + 3) & ~3;
;;;76     
;;;77       p_search = (MEMP *)pool;
;;;78       while (1) {
;;;79         hole_size  = (U32)p_search->next - (U32)p_search;
;;;80         hole_size -= p_search->len;
;;;81         /* Check if hole size is big enough */
;;;82         if (hole_size >= size) break;
;;;83         p_search = p_search->next;
;;;84         if (p_search->next == NULL) {
;;;85           /* Failed, we are at the end of the list */
;;;86           return NULL;
;;;87         }
;;;88       }
;;;89     
;;;90       if (p_search->len == 0) {
;;;91         /* No block is allocated, set the Length of the first element */
;;;92         p_search->len = size;
;;;93         p = (MEMP *)(((U32)p_search) + sizeof(MEMP));
;;;94       } else {
;;;95         /* Insert new list element into the memory list */
;;;96         p_new       = (MEMP *)((U32)p_search + p_search->len);
;;;97         p_new->next = p_search->next;
;;;98         p_new->len  = size;
;;;99         p_search->next = p_new;
;;;100        p = (MEMP *)(((U32)p_new) + sizeof(MEMP));
;;;101      }
;;;102    
;;;103      return (p);
;;;104    }
000030  bd70              POP      {r4-r6,pc}
                  |L1.50|
000032  3208              ADDS     r2,r2,#8              ;73
000034  1cd0              ADDS     r0,r2,#3              ;75
000036  f0200203          BIC      r2,r0,#3              ;75
00003a  4621              MOV      r1,r4                 ;77
00003c  e00b              B        |L1.86|
                  |L1.62|
00003e  6808              LDR      r0,[r1,#0]            ;79
000040  1a46              SUBS     r6,r0,r1              ;79
000042  6848              LDR      r0,[r1,#4]            ;80
000044  1a36              SUBS     r6,r6,r0              ;80
000046  4296              CMP      r6,r2                 ;82
000048  d300              BCC      |L1.76|
00004a  e005              B        |L1.88|
                  |L1.76|
00004c  6809              LDR      r1,[r1,#0]            ;83
00004e  6808              LDR      r0,[r1,#0]            ;84
000050  b908              CBNZ     r0,|L1.86|
000052  2000              MOVS     r0,#0                 ;86
000054  e7ec              B        |L1.48|
                  |L1.86|
000056  e7f2              B        |L1.62|
                  |L1.88|
000058  bf00              NOP                            ;82
00005a  6848              LDR      r0,[r1,#4]            ;90
00005c  b918              CBNZ     r0,|L1.102|
00005e  604a              STR      r2,[r1,#4]            ;92
000060  f1010508          ADD      r5,r1,#8              ;93
000064  e007              B        |L1.118|
                  |L1.102|
000066  6848              LDR      r0,[r1,#4]            ;96
000068  1843              ADDS     r3,r0,r1              ;96
00006a  6808              LDR      r0,[r1,#0]            ;97
00006c  6018              STR      r0,[r3,#0]            ;97
00006e  605a              STR      r2,[r3,#4]            ;98
000070  600b              STR      r3,[r1,#0]            ;99
000072  f1030508          ADD      r5,r3,#8              ;100
                  |L1.118|
000076  4628              MOV      r0,r5                 ;103
000078  e7da              B        |L1.48|
;;;105    
                          ENDP

                  rt_free_mem PROC
;;;111    
;;;112    int rt_free_mem (void *pool, void *mem) {
00007a  b530              PUSH     {r4,r5,lr}
00007c  4603              MOV      r3,r0
00007e  460c              MOV      r4,r1
;;;113      MEMP *p_search, *p_prev, *p_return;
;;;114    
;;;115      if ((pool == NULL) || (mem == NULL)) return (1);
000080  b103              CBZ      r3,|L1.132|
000082  b90c              CBNZ     r4,|L1.136|
                  |L1.132|
000084  2001              MOVS     r0,#1
                  |L1.134|
;;;116    
;;;117      p_return = (MEMP *)((U32)mem - sizeof(MEMP));
;;;118      
;;;119      /* Set list header */
;;;120      p_prev = NULL;
;;;121      p_search = (MEMP *)pool;
;;;122      while (p_search != p_return) {
;;;123        p_prev   = p_search;
;;;124        p_search = p_search->next;
;;;125        if (p_search == NULL) {
;;;126          /* Valid Memory block not found */
;;;127          return (1);
;;;128        }
;;;129      }
;;;130    
;;;131      if (p_prev == NULL) {
;;;132        /* First block to be released, only set length to 0 */
;;;133        p_search->len = 0;
;;;134      } else {
;;;135        /* Discard block from chain list */
;;;136        p_prev->next = p_search->next;
;;;137      }
;;;138    
;;;139      return (0);
;;;140    }
000086  bd30              POP      {r4,r5,pc}
                  |L1.136|
000088  f1a40508          SUB      r5,r4,#8              ;117
00008c  2200              MOVS     r2,#0                 ;120
00008e  4619              MOV      r1,r3                 ;121
000090  e004              B        |L1.156|
                  |L1.146|
000092  460a              MOV      r2,r1                 ;123
000094  6809              LDR      r1,[r1,#0]            ;124
000096  b909              CBNZ     r1,|L1.156|
000098  2001              MOVS     r0,#1                 ;127
00009a  e7f4              B        |L1.134|
                  |L1.156|
00009c  42a9              CMP      r1,r5                 ;122
00009e  d1f8              BNE      |L1.146|
0000a0  b912              CBNZ     r2,|L1.168|
0000a2  2000              MOVS     r0,#0                 ;133
0000a4  6048              STR      r0,[r1,#4]            ;133
0000a6  e001              B        |L1.172|
                  |L1.168|
0000a8  6808              LDR      r0,[r1,#0]            ;136
0000aa  6010              STR      r0,[r2,#0]            ;136
                  |L1.172|
0000ac  2000              MOVS     r0,#0                 ;139
0000ae  e7ea              B        |L1.134|
                          ENDP


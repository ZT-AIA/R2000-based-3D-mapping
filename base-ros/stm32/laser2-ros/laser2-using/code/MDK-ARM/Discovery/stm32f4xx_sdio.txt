; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\stm32f4xx_sdio.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\stm32f4xx_sdio.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\stm32f4xx_sdio.crf ..\..\libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_sdio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SDIO_DeInit PROC
;;;264      */
;;;265    void SDIO_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;266    {
;;;267      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;268      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f44f6000          MOV      r0,#0x800
000010  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;269    }
000014  bd10              POP      {r4,pc}
;;;270    
                          ENDP

                  SDIO_Init PROC
;;;277      */
;;;278    void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
000016  2100              MOVS     r1,#0
;;;279    {
;;;280      uint32_t tmpreg = 0;
;;;281        
;;;282      /* Check the parameters */
;;;283      assert_param(IS_SDIO_CLOCK_EDGE(SDIO_InitStruct->SDIO_ClockEdge));
;;;284      assert_param(IS_SDIO_CLOCK_BYPASS(SDIO_InitStruct->SDIO_ClockBypass));
;;;285      assert_param(IS_SDIO_CLOCK_POWER_SAVE(SDIO_InitStruct->SDIO_ClockPowerSave));
;;;286      assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
;;;287      assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
;;;288       
;;;289    /*---------------------------- SDIO CLKCR Configuration ------------------------*/  
;;;290      /* Get the SDIO CLKCR value */
;;;291      tmpreg = SDIO->CLKCR;
000018  4a6c              LDR      r2,|L1.460|
00001a  6811              LDR      r1,[r2,#0]
;;;292      
;;;293      /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
;;;294      tmpreg &= CLKCR_CLEAR_MASK;
00001c  f64762ff          MOV      r2,#0x7eff
000020  4391              BICS     r1,r1,r2
;;;295      
;;;296      /* Set CLKDIV bits according to SDIO_ClockDiv value */
;;;297      /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
;;;298      /* Set BYPASS bit according to SDIO_ClockBypass value */
;;;299      /* Set WIDBUS bits according to SDIO_BusWide value */
;;;300      /* Set NEGEDGE bits according to SDIO_ClockEdge value */
;;;301      /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
;;;302      tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
000022  7d02              LDRB     r2,[r0,#0x14]
000024  6883              LDR      r3,[r0,#8]
000026  431a              ORRS     r2,r2,r3
000028  6843              LDR      r3,[r0,#4]
00002a  431a              ORRS     r2,r2,r3
00002c  68c3              LDR      r3,[r0,#0xc]
00002e  431a              ORRS     r2,r2,r3
000030  6803              LDR      r3,[r0,#0]
000032  431a              ORRS     r2,r2,r3
000034  6903              LDR      r3,[r0,#0x10]
000036  431a              ORRS     r2,r2,r3
000038  4311              ORRS     r1,r1,r2
;;;303                 SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
;;;304                 SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
;;;305      
;;;306      /* Write to SDIO CLKCR */
;;;307      SDIO->CLKCR = tmpreg;
00003a  4a64              LDR      r2,|L1.460|
00003c  6011              STR      r1,[r2,#0]
;;;308    }
00003e  4770              BX       lr
;;;309    
                          ENDP

                  SDIO_StructInit PROC
;;;315      */
;;;316    void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
000040  2100              MOVS     r1,#0
;;;317    {
;;;318      /* SDIO_InitStruct members default value */
;;;319      SDIO_InitStruct->SDIO_ClockDiv = 0x00;
000042  7501              STRB     r1,[r0,#0x14]
;;;320      SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
000044  6001              STR      r1,[r0,#0]
;;;321      SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000046  6041              STR      r1,[r0,#4]
;;;322      SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
000048  6081              STR      r1,[r0,#8]
;;;323      SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
00004a  60c1              STR      r1,[r0,#0xc]
;;;324      SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
00004c  6101              STR      r1,[r0,#0x10]
;;;325    }
00004e  4770              BX       lr
;;;326    
                          ENDP

                  SDIO_ClockCmd PROC
;;;332      */
;;;333    void SDIO_ClockCmd(FunctionalState NewState)
000050  495f              LDR      r1,|L1.464|
;;;334    {
;;;335      /* Check the parameters */
;;;336      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;337      
;;;338      *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
000052  6008              STR      r0,[r1,#0]
;;;339    }
000054  4770              BX       lr
;;;340    
                          ENDP

                  SDIO_SetPowerState PROC
;;;348      */
;;;349    void SDIO_SetPowerState(uint32_t SDIO_PowerState)
000056  495d              LDR      r1,|L1.460|
;;;350    {
;;;351      /* Check the parameters */
;;;352      assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
;;;353      
;;;354      SDIO->POWER = SDIO_PowerState;
000058  1f09              SUBS     r1,r1,#4
00005a  6008              STR      r0,[r1,#0]
;;;355    }
00005c  4770              BX       lr
;;;356    
                          ENDP

                  SDIO_GetPowerState PROC
;;;365      */
;;;366    uint32_t SDIO_GetPowerState(void)
00005e  485b              LDR      r0,|L1.460|
;;;367    {
;;;368      return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
000060  1f00              SUBS     r0,r0,#4
000062  6800              LDR      r0,[r0,#0]
000064  f0000003          AND      r0,r0,#3
;;;369    }
000068  4770              BX       lr
;;;370    
                          ENDP

                  SDIO_SendCommand PROC
;;;397      */
;;;398    void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
00006a  2100              MOVS     r1,#0
;;;399    {
;;;400      uint32_t tmpreg = 0;
;;;401      
;;;402      /* Check the parameters */
;;;403      assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->SDIO_CmdIndex));
;;;404      assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->SDIO_Response));
;;;405      assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
;;;406      assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
;;;407      
;;;408    /*---------------------------- SDIO ARG Configuration ------------------------*/
;;;409      /* Set the SDIO Argument value */
;;;410      SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
00006c  4b57              LDR      r3,|L1.460|
00006e  1d1b              ADDS     r3,r3,#4
000070  6802              LDR      r2,[r0,#0]
000072  601a              STR      r2,[r3,#0]
;;;411      
;;;412    /*---------------------------- SDIO CMD Configuration ------------------------*/  
;;;413      /* Get the SDIO CMD value */
;;;414      tmpreg = SDIO->CMD;
000074  1d1a              ADDS     r2,r3,#4
000076  6811              LDR      r1,[r2,#0]
;;;415      /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
;;;416      tmpreg &= CMD_CLEAR_MASK;
000078  f36f010a          BFC      r1,#0,#11
;;;417      /* Set CMDINDEX bits according to SDIO_CmdIndex value */
;;;418      /* Set WAITRESP bits according to SDIO_Response value */
;;;419      /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
;;;420      /* Set CPSMEN bits according to SDIO_CPSM value */
;;;421      tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
00007c  e9d02301          LDRD     r2,r3,[r0,#4]
000080  431a              ORRS     r2,r2,r3
000082  68c3              LDR      r3,[r0,#0xc]
000084  431a              ORRS     r2,r2,r3
000086  6903              LDR      r3,[r0,#0x10]
000088  431a              ORRS     r2,r2,r3
00008a  4311              ORRS     r1,r1,r2
;;;422               | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
;;;423      
;;;424      /* Write to SDIO CMD */
;;;425      SDIO->CMD = tmpreg;
00008c  4a4f              LDR      r2,|L1.460|
00008e  3208              ADDS     r2,r2,#8
000090  6011              STR      r1,[r2,#0]
;;;426    }
000092  4770              BX       lr
;;;427    
                          ENDP

                  SDIO_CmdStructInit PROC
;;;433      */
;;;434    void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
000094  2100              MOVS     r1,#0
;;;435    {
;;;436      /* SDIO_CmdInitStruct members default value */
;;;437      SDIO_CmdInitStruct->SDIO_Argument = 0x00;
000096  6001              STR      r1,[r0,#0]
;;;438      SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
000098  6041              STR      r1,[r0,#4]
;;;439      SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
00009a  6081              STR      r1,[r0,#8]
;;;440      SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
00009c  60c1              STR      r1,[r0,#0xc]
;;;441      SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
00009e  6101              STR      r1,[r0,#0x10]
;;;442    }
0000a0  4770              BX       lr
;;;443    
                          ENDP

                  SDIO_GetCommandResponse PROC
;;;448      */
;;;449    uint8_t SDIO_GetCommandResponse(void)
0000a2  484a              LDR      r0,|L1.460|
;;;450    {
;;;451      return (uint8_t)(SDIO->RESPCMD);
0000a4  300c              ADDS     r0,r0,#0xc
0000a6  6800              LDR      r0,[r0,#0]
0000a8  b2c0              UXTB     r0,r0
;;;452    }
0000aa  4770              BX       lr
;;;453    
                          ENDP

                  SDIO_GetResponse PROC
;;;463      */
;;;464    uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
0000ac  b508              PUSH     {r3,lr}
;;;465    {
0000ae  4601              MOV      r1,r0
;;;466      __IO uint32_t tmp = 0;
0000b0  2000              MOVS     r0,#0
0000b2  9000              STR      r0,[sp,#0]
;;;467    
;;;468      /* Check the parameters */
;;;469      assert_param(IS_SDIO_RESP(SDIO_RESP));
;;;470    
;;;471      tmp = SDIO_RESP_ADDR + SDIO_RESP;
0000b4  4845              LDR      r0,|L1.460|
0000b6  3010              ADDS     r0,r0,#0x10
0000b8  4408              ADD      r0,r0,r1
0000ba  9000              STR      r0,[sp,#0]
;;;472      
;;;473      return (*(__IO uint32_t *) tmp); 
0000bc  9800              LDR      r0,[sp,#0]
0000be  6800              LDR      r0,[r0,#0]
;;;474    }
0000c0  bd08              POP      {r3,pc}
;;;475    
                          ENDP

                  SDIO_DataConfig PROC
;;;501      */
;;;502    void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
0000c2  2100              MOVS     r1,#0
;;;503    {
;;;504      uint32_t tmpreg = 0;
;;;505      
;;;506      /* Check the parameters */
;;;507      assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->SDIO_DataLength));
;;;508      assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->SDIO_DataBlockSize));
;;;509      assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->SDIO_TransferDir));
;;;510      assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
;;;511      assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));
;;;512    
;;;513    /*---------------------------- SDIO DTIMER Configuration ---------------------*/
;;;514      /* Set the SDIO Data TimeOut value */
;;;515      SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
0000c4  4b41              LDR      r3,|L1.460|
0000c6  3320              ADDS     r3,r3,#0x20
0000c8  6802              LDR      r2,[r0,#0]
0000ca  601a              STR      r2,[r3,#0]
;;;516    
;;;517    /*---------------------------- SDIO DLEN Configuration -----------------------*/
;;;518      /* Set the SDIO DataLength value */
;;;519      SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
0000cc  1d1b              ADDS     r3,r3,#4
0000ce  6842              LDR      r2,[r0,#4]
0000d0  601a              STR      r2,[r3,#0]
;;;520    
;;;521    /*---------------------------- SDIO DCTRL Configuration ----------------------*/  
;;;522      /* Get the SDIO DCTRL value */
;;;523      tmpreg = SDIO->DCTRL;
0000d2  1d1a              ADDS     r2,r3,#4
0000d4  6811              LDR      r1,[r2,#0]
;;;524      /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
;;;525      tmpreg &= DCTRL_CLEAR_MASK;
0000d6  f02101f7          BIC      r1,r1,#0xf7
;;;526      /* Set DEN bit according to SDIO_DPSM value */
;;;527      /* Set DTMODE bit according to SDIO_TransferMode value */
;;;528      /* Set DTDIR bit according to SDIO_TransferDir value */
;;;529      /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
;;;530      tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
0000da  e9d02302          LDRD     r2,r3,[r0,#8]
0000de  431a              ORRS     r2,r2,r3
0000e0  6903              LDR      r3,[r0,#0x10]
0000e2  431a              ORRS     r2,r2,r3
0000e4  6943              LDR      r3,[r0,#0x14]
0000e6  431a              ORRS     r2,r2,r3
0000e8  4311              ORRS     r1,r1,r2
;;;531               | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
;;;532    
;;;533      /* Write to SDIO DCTRL */
;;;534      SDIO->DCTRL = tmpreg;
0000ea  4a38              LDR      r2,|L1.460|
0000ec  3228              ADDS     r2,r2,#0x28
0000ee  6011              STR      r1,[r2,#0]
;;;535    }
0000f0  4770              BX       lr
;;;536    
                          ENDP

                  SDIO_DataStructInit PROC
;;;542      */
;;;543    void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
0000f2  f04f31ff          MOV      r1,#0xffffffff
;;;544    {
;;;545      /* SDIO_DataInitStruct members default value */
;;;546      SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
0000f6  6001              STR      r1,[r0,#0]
;;;547      SDIO_DataInitStruct->SDIO_DataLength = 0x00;
0000f8  2100              MOVS     r1,#0
0000fa  6041              STR      r1,[r0,#4]
;;;548      SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
0000fc  6081              STR      r1,[r0,#8]
;;;549      SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
0000fe  60c1              STR      r1,[r0,#0xc]
;;;550      SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
000100  6101              STR      r1,[r0,#0x10]
;;;551      SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
000102  6141              STR      r1,[r0,#0x14]
;;;552    }
000104  4770              BX       lr
;;;553    
                          ENDP

                  SDIO_GetDataCounter PROC
;;;558      */
;;;559    uint32_t SDIO_GetDataCounter(void)
000106  4831              LDR      r0,|L1.460|
;;;560    { 
;;;561      return SDIO->DCOUNT;
000108  302c              ADDS     r0,r0,#0x2c
00010a  6800              LDR      r0,[r0,#0]
;;;562    }
00010c  4770              BX       lr
;;;563    
                          ENDP

                  SDIO_ReadData PROC
;;;568      */
;;;569    uint32_t SDIO_ReadData(void)
00010e  482f              LDR      r0,|L1.460|
;;;570    { 
;;;571      return SDIO->FIFO;
000110  307c              ADDS     r0,r0,#0x7c
000112  6800              LDR      r0,[r0,#0]
;;;572    }
000114  4770              BX       lr
;;;573    
                          ENDP

                  SDIO_WriteData PROC
;;;578      */
;;;579    void SDIO_WriteData(uint32_t Data)
000116  492d              LDR      r1,|L1.460|
;;;580    { 
;;;581      SDIO->FIFO = Data;
000118  317c              ADDS     r1,r1,#0x7c
00011a  6008              STR      r0,[r1,#0]
;;;582    }
00011c  4770              BX       lr
;;;583    
                          ENDP

                  SDIO_GetFIFOCount PROC
;;;588      */
;;;589    uint32_t SDIO_GetFIFOCount(void)
00011e  482b              LDR      r0,|L1.460|
;;;590    { 
;;;591      return SDIO->FIFOCNT;
000120  3044              ADDS     r0,r0,#0x44
000122  6800              LDR      r0,[r0,#0]
;;;592    }
000124  4770              BX       lr
;;;593    
                          ENDP

                  SDIO_StartSDIOReadWait PROC
;;;617      */
;;;618    void SDIO_StartSDIOReadWait(FunctionalState NewState)
000126  492b              LDR      r1,|L1.468|
;;;619    { 
;;;620      /* Check the parameters */
;;;621      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;622      
;;;623      *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
000128  6008              STR      r0,[r1,#0]
;;;624    }
00012a  4770              BX       lr
;;;625    
                          ENDP

                  SDIO_StopSDIOReadWait PROC
;;;631      */
;;;632    void SDIO_StopSDIOReadWait(FunctionalState NewState)
00012c  4929              LDR      r1,|L1.468|
;;;633    { 
;;;634      /* Check the parameters */
;;;635      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;636      
;;;637      *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
00012e  1d09              ADDS     r1,r1,#4
000130  6008              STR      r0,[r1,#0]
;;;638    }
000132  4770              BX       lr
;;;639    
                          ENDP

                  SDIO_SetSDIOReadWaitMode PROC
;;;647      */
;;;648    void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
000134  4927              LDR      r1,|L1.468|
;;;649    {
;;;650      /* Check the parameters */
;;;651      assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
;;;652      
;;;653      *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
000136  3108              ADDS     r1,r1,#8
000138  6008              STR      r0,[r1,#0]
;;;654    }
00013a  4770              BX       lr
;;;655    
                          ENDP

                  SDIO_SetSDIOOperation PROC
;;;661      */
;;;662    void SDIO_SetSDIOOperation(FunctionalState NewState)
00013c  4925              LDR      r1,|L1.468|
;;;663    { 
;;;664      /* Check the parameters */
;;;665      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;666      
;;;667      *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
00013e  310c              ADDS     r1,r1,#0xc
000140  6008              STR      r0,[r1,#0]
;;;668    }
000142  4770              BX       lr
;;;669    
                          ENDP

                  SDIO_SendSDIOSuspendCmd PROC
;;;675      */
;;;676    void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
000144  4924              LDR      r1,|L1.472|
;;;677    { 
;;;678      /* Check the parameters */
;;;679      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;680      
;;;681      *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
000146  6008              STR      r0,[r1,#0]
;;;682    }
000148  4770              BX       lr
;;;683    
                          ENDP

                  SDIO_CommandCompletionCmd PROC
;;;707      */
;;;708    void SDIO_CommandCompletionCmd(FunctionalState NewState)
00014a  4923              LDR      r1,|L1.472|
;;;709    { 
;;;710      /* Check the parameters */
;;;711      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;712      
;;;713      *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
00014c  1d09              ADDS     r1,r1,#4
00014e  6008              STR      r0,[r1,#0]
;;;714    }
000150  4770              BX       lr
;;;715    
                          ENDP

                  SDIO_CEATAITCmd PROC
;;;721      */
;;;722    void SDIO_CEATAITCmd(FunctionalState NewState)
000152  2101              MOVS     r1,#1
;;;723    { 
;;;724      /* Check the parameters */
;;;725      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;726      
;;;727      *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
000154  4381              BICS     r1,r1,r0
000156  4a20              LDR      r2,|L1.472|
000158  3208              ADDS     r2,r2,#8
00015a  6011              STR      r1,[r2,#0]
;;;728    }
00015c  4770              BX       lr
;;;729    
                          ENDP

                  SDIO_SendCEATACmd PROC
;;;735      */
;;;736    void SDIO_SendCEATACmd(FunctionalState NewState)
00015e  491e              LDR      r1,|L1.472|
;;;737    { 
;;;738      /* Check the parameters */
;;;739      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;740      
;;;741      *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
000160  310c              ADDS     r1,r1,#0xc
000162  6008              STR      r0,[r1,#0]
;;;742    }
000164  4770              BX       lr
;;;743    
                          ENDP

                  SDIO_DMACmd PROC
;;;767      */
;;;768    void SDIO_DMACmd(FunctionalState NewState)
000166  491b              LDR      r1,|L1.468|
;;;769    {
;;;770      /* Check the parameters */
;;;771      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;772      
;;;773      *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
000168  3914              SUBS     r1,r1,#0x14
00016a  6008              STR      r0,[r1,#0]
;;;774    }
00016c  4770              BX       lr
;;;775    
                          ENDP

                  SDIO_ITConfig PROC
;;;825      */
;;;826    void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
00016e  b139              CBZ      r1,|L1.384|
;;;827    {
;;;828      /* Check the parameters */
;;;829      assert_param(IS_SDIO_IT(SDIO_IT));
;;;830      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;831      
;;;832      if (NewState != DISABLE)
;;;833      {
;;;834        /* Enable the SDIO interrupts */
;;;835        SDIO->MASK |= SDIO_IT;
000170  4a16              LDR      r2,|L1.460|
000172  3238              ADDS     r2,r2,#0x38
000174  6812              LDR      r2,[r2,#0]
000176  4302              ORRS     r2,r2,r0
000178  4b14              LDR      r3,|L1.460|
00017a  3338              ADDS     r3,r3,#0x38
00017c  601a              STR      r2,[r3,#0]
00017e  e006              B        |L1.398|
                  |L1.384|
;;;836      }
;;;837      else
;;;838      {
;;;839        /* Disable the SDIO interrupts */
;;;840        SDIO->MASK &= ~SDIO_IT;
000180  4a12              LDR      r2,|L1.460|
000182  3238              ADDS     r2,r2,#0x38
000184  6812              LDR      r2,[r2,#0]
000186  4382              BICS     r2,r2,r0
000188  4b10              LDR      r3,|L1.460|
00018a  3338              ADDS     r3,r3,#0x38
00018c  601a              STR      r2,[r3,#0]
                  |L1.398|
;;;841      } 
;;;842    }
00018e  4770              BX       lr
;;;843    
                          ENDP

                  SDIO_GetFlagStatus PROC
;;;873      */
;;;874    FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
000190  4601              MOV      r1,r0
;;;875    { 
;;;876      FlagStatus bitstatus = RESET;
000192  2000              MOVS     r0,#0
;;;877      
;;;878      /* Check the parameters */
;;;879      assert_param(IS_SDIO_FLAG(SDIO_FLAG));
;;;880      
;;;881      if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
000194  4a0d              LDR      r2,|L1.460|
000196  3230              ADDS     r2,r2,#0x30
000198  6812              LDR      r2,[r2,#0]
00019a  400a              ANDS     r2,r2,r1
00019c  b10a              CBZ      r2,|L1.418|
;;;882      {
;;;883        bitstatus = SET;
00019e  2001              MOVS     r0,#1
0001a0  e000              B        |L1.420|
                  |L1.418|
;;;884      }
;;;885      else
;;;886      {
;;;887        bitstatus = RESET;
0001a2  2000              MOVS     r0,#0
                  |L1.420|
;;;888      }
;;;889      return bitstatus;
;;;890    }
0001a4  4770              BX       lr
;;;891    
                          ENDP

                  SDIO_ClearFlag PROC
;;;910      */
;;;911    void SDIO_ClearFlag(uint32_t SDIO_FLAG)
0001a6  4909              LDR      r1,|L1.460|
;;;912    { 
;;;913      /* Check the parameters */
;;;914      assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
;;;915       
;;;916      SDIO->ICR = SDIO_FLAG;
0001a8  3134              ADDS     r1,r1,#0x34
0001aa  6008              STR      r0,[r1,#0]
;;;917    }
0001ac  4770              BX       lr
;;;918    
                          ENDP

                  SDIO_GetITStatus PROC
;;;949      */
;;;950    ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
0001ae  4601              MOV      r1,r0
;;;951    { 
;;;952      ITStatus bitstatus = RESET;
0001b0  2000              MOVS     r0,#0
;;;953      
;;;954      /* Check the parameters */
;;;955      assert_param(IS_SDIO_GET_IT(SDIO_IT));
;;;956      if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
0001b2  4a06              LDR      r2,|L1.460|
0001b4  3230              ADDS     r2,r2,#0x30
0001b6  6812              LDR      r2,[r2,#0]
0001b8  400a              ANDS     r2,r2,r1
0001ba  b10a              CBZ      r2,|L1.448|
;;;957      {
;;;958        bitstatus = SET;
0001bc  2001              MOVS     r0,#1
0001be  e000              B        |L1.450|
                  |L1.448|
;;;959      }
;;;960      else
;;;961      {
;;;962        bitstatus = RESET;
0001c0  2000              MOVS     r0,#0
                  |L1.450|
;;;963      }
;;;964      return bitstatus;
;;;965    }
0001c2  4770              BX       lr
;;;966    
                          ENDP

                  SDIO_ClearITPendingBit PROC
;;;985      */
;;;986    void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
0001c4  4901              LDR      r1,|L1.460|
;;;987    { 
;;;988      /* Check the parameters */
;;;989      assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
;;;990       
;;;991      SDIO->ICR = SDIO_IT;
0001c6  3134              ADDS     r1,r1,#0x34
0001c8  6008              STR      r0,[r1,#0]
;;;992    }
0001ca  4770              BX       lr
;;;993    
                          ENDP

                  |L1.460|
                          DCD      0x40012c04
                  |L1.464|
                          DCD      0x422580a0
                  |L1.468|
                          DCD      0x422585a0
                  |L1.472|
                          DCD      0x422581ac

;*** Start embedded assembler ***

#line 1 "..\\..\\libraries\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_sdio.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_sdio_c_c8827541____REV16|
#line 114 "..\\..\\libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32f4xx_sdio_c_c8827541____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_sdio_c_c8827541____REVSH|
#line 128
|__asm___16_stm32f4xx_sdio_c_c8827541____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

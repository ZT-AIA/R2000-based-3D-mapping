; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\motorctrl.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\motorctrl.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\motorctrl.crf ..\src\motroCtrl\motorctrl.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  motor_rec_trypost PROC
;;;24     
;;;25     static void motor_rec_trypost(void)
000000  b510              PUSH     {r4,lr}
;;;26     {
;;;27     	sys_mbox_trypost(&motorCtrlQueue,NULL);//释放一个消息
000002  2100              MOVS     r1,#0
000004  48bc              LDR      r0,|L1.760|
000006  f7fffffe          BL       sys_mbox_trypost
;;;28     }
00000a  bd10              POP      {r4,pc}
;;;29     
                          ENDP

                  motor_rec_fetch PROC
;;;30     static void motor_rec_fetch(void)
00000c  b510              PUSH     {r4,lr}
;;;31     {
;;;32     	sys_arch_mbox_fetch(&motorCtrlQueue,NULL,10);//等待消息邮箱
00000e  220a              MOVS     r2,#0xa
000010  2100              MOVS     r1,#0
000012  48b9              LDR      r0,|L1.760|
000014  f7fffffe          BL       sys_arch_mbox_fetch
;;;33     }
000018  bd10              POP      {r4,pc}
;;;34     
                          ENDP

                  scan_start PROC
;;;51     
;;;52     static stat_set scan_start(struct net_path *net,void *arg)
00001a  4602              MOV      r2,r0
;;;53     {
;;;54     	return RUN_OK;
00001c  2000              MOVS     r0,#0
;;;55     }
00001e  4770              BX       lr
;;;56     
                          ENDP

                  scan_stop PROC
;;;57     static stat_set scan_stop    (struct net_path *net,void *arg)
000020  4602              MOV      r2,r0
;;;58     {
;;;59     	return RUN_OK;
000022  2000              MOVS     r0,#0
;;;60     }
000024  4770              BX       lr
;;;61     
                          ENDP

                  motor_run PROC
;;;62     static stat_set motor_run    (struct net_path *net,void *arg)
000026  4602              MOV      r2,r0
;;;63     {
;;;64     	return RUN_OK;
000028  2000              MOVS     r0,#0
;;;65     }
00002a  4770              BX       lr
;;;66     
                          ENDP

                  motor_stop PROC
;;;67     static stat_set motor_stop   (struct net_path *net,void *arg)
00002c  4602              MOV      r2,r0
;;;68     {
;;;69     	return RUN_OK;
00002e  2000              MOVS     r0,#0
;;;70     }
000030  4770              BX       lr
;;;71     
                          ENDP

                  dev_reset PROC
;;;72     static stat_set dev_reset    (struct net_path *net,void *arg)
000032  4602              MOV      r2,r0
;;;73     {
;;;74     	return RUN_OK;
000034  2000              MOVS     r0,#0
;;;75     }
000036  4770              BX       lr
;;;76     
                          ENDP

                  motor_spd_set PROC
;;;77     static stat_set motor_spd_set(struct net_path *net,void *arg)
000038  4602              MOV      r2,r0
;;;78     {
;;;79     	return RUN_OK;
00003a  2000              MOVS     r0,#0
;;;80     }
00003c  4770              BX       lr
;;;81     
                          ENDP

                  do_nothing PROC
;;;82     static stat_set do_nothing   (struct net_path *net,void *arg)
00003e  4602              MOV      r2,r0
;;;83     {
;;;84     	return RUN_OK;
000040  2000              MOVS     r0,#0
;;;85     }
000042  4770              BX       lr
;;;86     
                          ENDP

                  PWMInit PROC
;;;99      ********************************************************************/
;;;100    static void PWMInit(void)
000044  b500              PUSH     {lr}
;;;101    {
000046  b08b              SUB      sp,sp,#0x2c
;;;102    	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
;;;103    	TIM_OCInitTypeDef TIM_OCInitStructure;
;;;104    	GPIO_InitTypeDef GPIO_InitStructure;
;;;105    	
;;;106    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1,  ENABLE);
000048  2101              MOVS     r1,#1
00004a  4608              MOV      r0,r1
00004c  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;107    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8,  ENABLE);
000050  2101              MOVS     r1,#1
000052  2002              MOVS     r0,#2
000054  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;108    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
000058  2101              MOVS     r1,#1
00005a  4608              MOV      r0,r1
00005c  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;109    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
000060  2101              MOVS     r1,#1
000062  2004              MOVS     r0,#4
000064  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;110    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
000068  2101              MOVS     r1,#1
00006a  2008              MOVS     r0,#8
00006c  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;111    	
;;;112    	/* Set the specified gpio configuration */
;;;113    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
000070  2001              MOVS     r0,#1
000072  f88d0009          STRB     r0,[sp,#9]
;;;114    	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;
000076  f88d0008          STRB     r0,[sp,#8]
;;;115    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00007a  2000              MOVS     r0,#0
00007c  f88d000a          STRB     r0,[sp,#0xa]
;;;116    	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_DOWN;
000080  2002              MOVS     r0,#2
000082  f88d000b          STRB     r0,[sp,#0xb]
;;;117    	
;;;118    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_10 | GPIO_Pin_11;
000086  f6404001          MOV      r0,#0xc01
00008a  9001              STR      r0,[sp,#4]
;;;119    	GPIO_Init(GPIOD, &GPIO_InitStructure);
00008c  a901              ADD      r1,sp,#4
00008e  489b              LDR      r0,|L1.764|
000090  f7fffffe          BL       GPIO_Init
;;;120    	GPIO_ResetBits(GPIOD, GPIO_Pin_0);   // led indicator
000094  2101              MOVS     r1,#1
000096  4899              LDR      r0,|L1.764|
000098  f7fffffe          BL       GPIO_ResetBits
;;;121    	GPIO_ResetBits(GPIOD, GPIO_Pin_10);  // default direction
00009c  f44f6180          MOV      r1,#0x400
0000a0  4896              LDR      r0,|L1.764|
0000a2  f7fffffe          BL       GPIO_ResetBits
;;;122    	GPIO_ResetBits(GPIOD, GPIO_Pin_11);
0000a6  f44f6100          MOV      r1,#0x800
0000aa  4894              LDR      r0,|L1.764|
0000ac  f7fffffe          BL       GPIO_ResetBits
;;;123    	
;;;124    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
0000b0  2002              MOVS     r0,#2
0000b2  f88d0008          STRB     r0,[sp,#8]
;;;125    	GPIO_InitStructure.GPIO_Pin	 = GPIO_Pin_8;
0000b6  01c0              LSLS     r0,r0,#7
0000b8  9001              STR      r0,[sp,#4]
;;;126    	GPIO_Init(GPIOA, &GPIO_InitStructure);
0000ba  a901              ADD      r1,sp,#4
0000bc  4890              LDR      r0,|L1.768|
0000be  f7fffffe          BL       GPIO_Init
;;;127    	GPIO_Init(GPIOC, &GPIO_InitStructure);
0000c2  a901              ADD      r1,sp,#4
0000c4  488f              LDR      r0,|L1.772|
0000c6  f7fffffe          BL       GPIO_Init
;;;128    	GPIO_PinAFConfig(GPIOA, GPIO_PinSource8, GPIO_AF_TIM1);
0000ca  2201              MOVS     r2,#1
0000cc  2108              MOVS     r1,#8
0000ce  488c              LDR      r0,|L1.768|
0000d0  f7fffffe          BL       GPIO_PinAFConfig
;;;129    	GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_TIM8);
0000d4  2203              MOVS     r2,#3
0000d6  2108              MOVS     r1,#8
0000d8  488a              LDR      r0,|L1.772|
0000da  f7fffffe          BL       GPIO_PinAFConfig
;;;130    	
;;;131    	/* Set the specified timer configuration */
;;;132    	TIM_TimeBaseStructure.TIM_Period 	= 20u;
0000de  2014              MOVS     r0,#0x14
0000e0  9009              STR      r0,[sp,#0x24]
;;;133    	TIM_TimeBaseStructure.TIM_Prescaler = 0xffffu;
0000e2  f64f70ff          MOV      r0,#0xffff
0000e6  f8ad0020          STRH     r0,[sp,#0x20]
;;;134    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
0000ea  2000              MOVS     r0,#0
0000ec  f8ad0028          STRH     r0,[sp,#0x28]
;;;135    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
0000f0  f8ad0022          STRH     r0,[sp,#0x22]
;;;136    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
0000f4  f88d002a          STRB     r0,[sp,#0x2a]
;;;137    	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
0000f8  a908              ADD      r1,sp,#0x20
0000fa  4883              LDR      r0,|L1.776|
0000fc  f7fffffe          BL       TIM_TimeBaseInit
;;;138    	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
000100  a908              ADD      r1,sp,#0x20
000102  4882              LDR      r0,|L1.780|
000104  f7fffffe          BL       TIM_TimeBaseInit
;;;139    	
;;;140    	/* Duty circle 50%. Vary the frequence by change TIM1->PSC */
;;;141    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
000108  2060              MOVS     r0,#0x60
00010a  f8ad000c          STRH     r0,[sp,#0xc]
;;;142    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
00010e  2001              MOVS     r0,#1
000110  f8ad000e          STRH     r0,[sp,#0xe]
;;;143    	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;
000114  2000              MOVS     r0,#0
000116  f8ad0010          STRH     r0,[sp,#0x10]
;;;144    	TIM_OCInitStructure.TIM_Pulse = 10u;
00011a  200a              MOVS     r0,#0xa
00011c  9005              STR      r0,[sp,#0x14]
;;;145    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
00011e  2002              MOVS     r0,#2
000120  f8ad0018          STRH     r0,[sp,#0x18]
;;;146    	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCPolarity_High;
000124  2000              MOVS     r0,#0
000126  f8ad001a          STRH     r0,[sp,#0x1a]
;;;147    	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;
00012a  f8ad001c          STRH     r0,[sp,#0x1c]
;;;148    	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Set;
00012e  f44f7000          MOV      r0,#0x200
000132  f8ad001e          STRH     r0,[sp,#0x1e]
;;;149    	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
000136  a903              ADD      r1,sp,#0xc
000138  4873              LDR      r0,|L1.776|
00013a  f7fffffe          BL       TIM_OC1Init
;;;150    	TIM_OC3Init(TIM8, &TIM_OCInitStructure);
00013e  a903              ADD      r1,sp,#0xc
000140  4872              LDR      r0,|L1.780|
000142  f7fffffe          BL       TIM_OC3Init
;;;151    	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
000146  2108              MOVS     r1,#8
000148  486f              LDR      r0,|L1.776|
00014a  f7fffffe          BL       TIM_OC1PreloadConfig
;;;152    	TIM_OC3PreloadConfig(TIM8, TIM_OCPreload_Enable);
00014e  2108              MOVS     r1,#8
000150  486e              LDR      r0,|L1.780|
000152  f7fffffe          BL       TIM_OC3PreloadConfig
;;;153    	
;;;154    	TIM_Cmd(TIM1, ENABLE);
000156  2101              MOVS     r1,#1
000158  486b              LDR      r0,|L1.776|
00015a  f7fffffe          BL       TIM_Cmd
;;;155    	TIM_Cmd(TIM8, ENABLE);
00015e  2101              MOVS     r1,#1
000160  486a              LDR      r0,|L1.780|
000162  f7fffffe          BL       TIM_Cmd
;;;156    	//TIM_CtrlPWMOutputs(TIM1, ENABLE);
;;;157    	TIM_CtrlPWMOutputs(TIM8, ENABLE);
000166  2101              MOVS     r1,#1
000168  4868              LDR      r0,|L1.780|
00016a  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;158    }
00016e  b00b              ADD      sp,sp,#0x2c
000170  bd00              POP      {pc}
;;;159    
                          ENDP

                  udpcallback PROC
;;;175    ***************************************************************************/
;;;176    void udpcallback(void *arg,struct udp_pcb *pcb,struct pbuf *p,ip_addr_t *addr,u16_t port)
000172  e92d47f0          PUSH     {r4-r10,lr}
;;;177    {
000176  4605              MOV      r5,r0
000178  4689              MOV      r9,r1
00017a  4616              MOV      r6,r2
00017c  461f              MOV      r7,r3
00017e  f8dd8020          LDR      r8,[sp,#0x20]
;;;178    	//将获得网络数据加入到缓冲队列中
;;;179    	struct net_path *net = (struct net_path *)arg;
000182  462c              MOV      r4,r5
;;;180    	if((net->tail+1)%laserbufsize!=net->front)//队列没有满
000184  6861              LDR      r1,[r4,#4]
000186  1c48              ADDS     r0,r1,#1
000188  17c1              ASRS     r1,r0,#31
00018a  eb007151          ADD      r1,r0,r1,LSR #29
00018e  10c9              ASRS     r1,r1,#3
000190  eba001c1          SUB      r1,r0,r1,LSL #3
000194  6822              LDR      r2,[r4,#0]
000196  4291              CMP      r1,r2
000198  d01b              BEQ      |L1.466|
;;;181    	{
;;;182    		net->pbufque[net->tail]= p;
00019a  f1040008          ADD      r0,r4,#8
00019e  6861              LDR      r1,[r4,#4]
0001a0  f8406021          STR      r6,[r0,r1,LSL #2]
;;;183    		net->remoteip_addr = *addr;
0001a4  6838              LDR      r0,[r7,#0]
0001a6  6360              STR      r0,[r4,#0x34]
;;;184    		net->remoteport =  port;
0001a8  f8a4802e          STRH     r8,[r4,#0x2e]
;;;185    		
;;;186    		sys_mutex_lock(&(net->bufmutex));
0001ac  f1040038          ADD      r0,r4,#0x38
0001b0  f7fffffe          BL       sys_mutex_lock
;;;187    		net->tail = (net->tail+1)%laserbufsize;
0001b4  6861              LDR      r1,[r4,#4]
0001b6  1c48              ADDS     r0,r1,#1
0001b8  17c1              ASRS     r1,r0,#31
0001ba  eb007151          ADD      r1,r0,r1,LSR #29
0001be  10c9              ASRS     r1,r1,#3
0001c0  eba001c1          SUB      r1,r0,r1,LSL #3
0001c4  6061              STR      r1,[r4,#4]
;;;188    		sys_mutex_unlock(&(net->bufmutex));
0001c6  f1040038          ADD      r0,r4,#0x38
0001ca  f7fffffe          BL       sys_mutex_unlock
;;;189    		
;;;190    		motor_rec_trypost();
0001ce  f7fffffe          BL       motor_rec_trypost
                  |L1.466|
;;;191    	}
;;;192    }
0001d2  e8bd87f0          POP      {r4-r10,pc}
;;;193    
                          ENDP

                  motorCtrl_thread PROC
;;;194    //电机的控制线程
;;;195    void motorCtrl_thread(void *msg)
0001d6  b5f0              PUSH     {r4-r7,lr}
;;;196    {
0001d8  b095              SUB      sp,sp,#0x54
0001da  4607              MOV      r7,r0
;;;197    	struct net_path netpath;
;;;198    	struct pbuf *p;
;;;199    	struct msg_head recvMsg;
;;;200    	uint8_t recvMsgType;
;;;201    	err_t error;
;;;202    	
;;;203    	PWMInit();
0001dc  f7fffffe          BL       PWMInit
;;;204    	
;;;205    	//netpath初始化
;;;206    	netpath.front = netpath.tail = 0;
0001e0  2000              MOVS     r0,#0
0001e2  9002              STR      r0,[sp,#8]
0001e4  9001              STR      r0,[sp,#4]
;;;207    	netpath.udppcb = udp_new();
0001e6  f7fffffe          BL       udp_new
0001ea  900b              STR      r0,[sp,#0x2c]
;;;208    	netpath.localport = motorlocalport;
0001ec  f6446020          MOV      r0,#0x4e20
0001f0  f8ad0030          STRH     r0,[sp,#0x30]
;;;209    	netpath.remoteport = motorremoteport;
0001f4  f8ad0032          STRH     r0,[sp,#0x32]
;;;210    	IP4_ADDR(&(netpath.remoteip_addr),hostip_addr0,hostip_addr1,hostip_addr2,hostip_addr3);
0001f8  4845              LDR      r0,|L1.784|
0001fa  900e              STR      r0,[sp,#0x38]
;;;211    	error = sys_mutex_new(&(netpath.bufmutex));//用于读写指针的互锁
0001fc  a80f              ADD      r0,sp,#0x3c
0001fe  f7fffffe          BL       sys_mutex_new
000202  4606              MOV      r6,r0
;;;212    	
;;;213    	if(netpath.udppcb==NULL)
000204  980b              LDR      r0,[sp,#0x2c]
000206  b920              CBNZ     r0,|L1.530|
;;;214    	{
;;;215    		printf("creat motor udppcb fail!\n");
000208  a042              ADR      r0,|L1.788|
00020a  f7fffffe          BL       __2printf
                  |L1.526|
;;;216    		return ;
;;;217    	}
;;;218    	if(error!=ERR_OK)
;;;219    	{
;;;220    		printf("new motor netpath.bufmutex create fail!\n");
;;;221    		return;
;;;222    	}
;;;223    	
;;;224    	//回调函数的注册
;;;225    	udp_recv(netpath.udppcb,udpcallback,&netpath);
;;;226    	//本地端口的绑定
;;;227    	udp_bind(netpath.udppcb,IP_ADDR_ANY,motorlocalport);
;;;228    	
;;;229    	for(;;)
;;;230    	{
;;;231    		while(netpath.front!=netpath.tail)
;;;232    		{
;;;233    			p = netpath.pbufque[netpath.front];//获取要处理的报文
;;;234    			
;;;235    			//get the udp datagram head
;;;236    			pbuf_copy_partial(p,&recvMsg,sizeof(recvMsg),0);
;;;237    			recvMsgType = recvMsg.msg_type;
;;;238    			if(recvMsgType<MAX_MSG_HANDLER)
;;;239    				recvMsg.type_dscr = MSG_ACK;
;;;240    			else if(recvMsgType==HAND_SHAKE)
;;;241    			{
;;;242    				recvMsg.type_dscr = MSG_ACK;
;;;243    				state_para.hostReady = true;
;;;244    				recvMsgType = MAX_MSG_HANDLER-1;
;;;245    			}
;;;246    			else
;;;247    			{
;;;248    				recvMsg.type_dscr = MSG_ERR;
;;;249    				recvMsgType = MAX_MSG_HANDLER-1;
;;;250    			}
;;;251    			
;;;252    			//报文处理，使用函数数组
;;;253    			msg_handler[recvMsgType](&netpath,p);
;;;254    			//信息复制数据包中
;;;255    			pbuf_take(p,&recvMsg,sizeof(recvMsg));
;;;256    			
;;;257    			//对上位机控制电机命令的回复
;;;258    			udp_sendto(netpath.udppcb,p,&netpath.remoteip_addr,netpath.remoteport);
;;;259    			//释放空间，其实在接收函数中释放了
;;;260    			pbuf_free(p);
;;;261    			
;;;262    			//指针的调整
;;;263    			sys_mutex_lock(&(netpath.bufmutex));
;;;264    			netpath.front = (netpath.front+1)%laserbufsize;
;;;265    			sys_mutex_unlock(&(netpath.bufmutex));
;;;266    		}
;;;267    		motor_rec_fetch();//等待数据的处理
;;;268    	}
;;;269    }
00020e  b015              ADD      sp,sp,#0x54
000210  bdf0              POP      {r4-r7,pc}
                  |L1.530|
000212  b11e              CBZ      r6,|L1.540|
000214  a046              ADR      r0,|L1.816|
000216  f7fffffe          BL       __2printf
00021a  e7f8              B        |L1.526|
                  |L1.540|
00021c  aa01              ADD      r2,sp,#4              ;225
00021e  f2af01ad          ADR      r1,udpcallback + 1
000222  980b              LDR      r0,[sp,#0x2c]         ;225
000224  f7fffffe          BL       udp_recv
000228  f6446220          MOV      r2,#0x4e20            ;227
00022c  494b              LDR      r1,|L1.860|
00022e  980b              LDR      r0,[sp,#0x2c]         ;227
000230  f7fffffe          BL       udp_bind
000234  bf00              NOP                            ;229
                  |L1.566|
000236  e043              B        |L1.704|
                  |L1.568|
000238  a803              ADD      r0,sp,#0xc            ;233
00023a  9901              LDR      r1,[sp,#4]            ;233
00023c  f8504021          LDR      r4,[r0,r1,LSL #2]     ;233
000240  2300              MOVS     r3,#0                 ;236
000242  2204              MOVS     r2,#4                 ;236
000244  4669              MOV      r1,sp                 ;236
000246  4620              MOV      r0,r4                 ;236
000248  f7fffffe          BL       pbuf_copy_partial
00024c  f89d5002          LDRB     r5,[sp,#2]            ;237
000250  2d08              CMP      r5,#8                 ;238
000252  da03              BGE      |L1.604|
000254  20ff              MOVS     r0,#0xff              ;239
000256  f88d0003          STRB     r0,[sp,#3]            ;239
00025a  e00d              B        |L1.632|
                  |L1.604|
00025c  2d3f              CMP      r5,#0x3f              ;240
00025e  d107              BNE      |L1.624|
000260  20ff              MOVS     r0,#0xff              ;242
000262  f88d0003          STRB     r0,[sp,#3]            ;242
000266  2001              MOVS     r0,#1                 ;243
000268  493d              LDR      r1,|L1.864|
00026a  7048              STRB     r0,[r1,#1]            ;243
00026c  2507              MOVS     r5,#7                 ;244
00026e  e003              B        |L1.632|
                  |L1.624|
000270  206a              MOVS     r0,#0x6a              ;248
000272  f88d0003          STRB     r0,[sp,#3]            ;248
000276  2507              MOVS     r5,#7                 ;249
                  |L1.632|
000278  483a              LDR      r0,|L1.868|
00027a  f8502025          LDR      r2,[r0,r5,LSL #2]     ;253
00027e  4621              MOV      r1,r4                 ;253
000280  a801              ADD      r0,sp,#4              ;253
000282  4790              BLX      r2                    ;253
000284  2204              MOVS     r2,#4                 ;255
000286  4669              MOV      r1,sp                 ;255
000288  4620              MOV      r0,r4                 ;255
00028a  f7fffffe          BL       pbuf_take
00028e  f8bd3032          LDRH     r3,[sp,#0x32]         ;258
000292  aa0e              ADD      r2,sp,#0x38           ;258
000294  4621              MOV      r1,r4                 ;258
000296  980b              LDR      r0,[sp,#0x2c]         ;258
000298  f7fffffe          BL       udp_sendto
00029c  4620              MOV      r0,r4                 ;260
00029e  f7fffffe          BL       pbuf_free
0002a2  a80f              ADD      r0,sp,#0x3c           ;263
0002a4  f7fffffe          BL       sys_mutex_lock
0002a8  9901              LDR      r1,[sp,#4]            ;264
0002aa  1c48              ADDS     r0,r1,#1              ;264
0002ac  17c1              ASRS     r1,r0,#31             ;264
0002ae  eb007151          ADD      r1,r0,r1,LSR #29      ;264
0002b2  10c9              ASRS     r1,r1,#3              ;264
0002b4  eba001c1          SUB      r1,r0,r1,LSL #3       ;264
0002b8  9101              STR      r1,[sp,#4]            ;264
0002ba  a80f              ADD      r0,sp,#0x3c           ;265
0002bc  f7fffffe          BL       sys_mutex_unlock
                  |L1.704|
0002c0  e9dd0101          LDRD     r0,r1,[sp,#4]         ;231
0002c4  4288              CMP      r0,r1                 ;231
0002c6  d1b7              BNE      |L1.568|
0002c8  f7fffffe          BL       motor_rec_fetch
0002cc  e7b3              B        |L1.566|
;;;270    
                          ENDP

                  motoCtrl_Init PROC
;;;271    void motoCtrl_Init(void)
0002ce  b508              PUSH     {r3,lr}
;;;272    {
;;;273    	if(sys_mbox_new(&motorCtrlQueue,10)!=ERR_OK)
0002d0  210a              MOVS     r1,#0xa
0002d2  4809              LDR      r0,|L1.760|
0002d4  f7fffffe          BL       sys_mbox_new
0002d8  b110              CBZ      r0,|L1.736|
;;;274    	{
;;;275    		printf("cteate motorCtrlQueue fail!\n");
0002da  a023              ADR      r0,|L1.872|
0002dc  f7fffffe          BL       __2printf
                  |L1.736|
;;;276    	}
;;;277    	sys_thread_new("motorCtrl_thread",motorCtrl_thread,NULL,DEFAULT_THREAD_STACKSIZE*2,osPriorityNormal);
0002e0  2000              MOVS     r0,#0
0002e2  f44f6300          MOV      r3,#0x800
0002e6  4602              MOV      r2,r0
0002e8  f2af1115          ADR      r1,motorCtrl_thread + 1
0002ec  9000              STR      r0,[sp,#0]
0002ee  a026              ADR      r0,|L1.904|
0002f0  f7fffffe          BL       sys_thread_new
;;;278    }
0002f4  bd08              POP      {r3,pc}
;;;279    
                          ENDP

0002f6  0000              DCW      0x0000
                  |L1.760|
                          DCD      motorCtrlQueue
                  |L1.764|
                          DCD      0x40020c00
                  |L1.768|
                          DCD      0x40020000
                  |L1.772|
                          DCD      0x40020800
                  |L1.776|
                          DCD      0x40010000
                  |L1.780|
                          DCD      0x40010400
                  |L1.784|
                          DCD      0x6501a8c0
                  |L1.788|
000314  63726561          DCB      "creat motor udppcb fail!\n",0
000318  74206d6f
00031c  746f7220
000320  75647070
000324  63622066
000328  61696c21
00032c  0a00    
00032e  00                DCB      0
00032f  00                DCB      0
                  |L1.816|
000330  6e657720          DCB      "new motor netpath.bufmutex create fail!\n",0
000334  6d6f746f
000338  72206e65
00033c  74706174
000340  682e6275
000344  666d7574
000348  65782063
00034c  72656174
000350  65206661
000354  696c210a
000358  00      
000359  00                DCB      0
00035a  00                DCB      0
00035b  00                DCB      0
                  |L1.860|
                          DCD      ip_addr_any
                  |L1.864|
                          DCD      state_para
                  |L1.868|
                          DCD      msg_handler
                  |L1.872|
000368  63746561          DCB      "cteate motorCtrlQueue fail!\n",0
00036c  7465206d
000370  6f746f72
000374  4374726c
000378  51756575
00037c  65206661
000380  696c210a
000384  00      
000385  00                DCB      0
000386  00                DCB      0
000387  00                DCB      0
                  |L1.904|
000388  6d6f746f          DCB      "motorCtrl_thread",0
00038c  72437472
000390  6c5f7468
000394  72656164
000398  00      
000399  00                DCB      0
00039a  00                DCB      0
00039b  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  motorCtrlQueue
                          %        92
                  state_para
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  msg_handler
                          DCD      scan_start
                          DCD      scan_stop
                          DCD      motor_run
                          DCD      motor_stop
                          DCD      dev_reset
                          DCD      motor_spd_set
                          DCD      do_nothing
                          DCD      do_nothing

;*** Start embedded assembler ***

#line 1 "..\\src\\motroCtrl\\motorctrl.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_motorctrl_c_574693fc____REV16|
#line 114 "..\\..\\libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_motorctrl_c_574693fc____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___11_motorctrl_c_574693fc____REVSH|
#line 128
|__asm___11_motorctrl_c_574693fc____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

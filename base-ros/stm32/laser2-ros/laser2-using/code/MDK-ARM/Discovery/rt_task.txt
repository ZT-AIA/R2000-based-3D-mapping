; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\rt_task.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\rt_task.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\rt_task.crf ..\..\libraries\rtx-v4.73\SRC\rt_Task.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  rt_get_TID PROC
;;;58     
;;;59     static OS_TID rt_get_TID (void) {
000000  2101              MOVS     r1,#1
;;;60       U32 tid;
;;;61     
;;;62       for (tid = 1; tid <= os_maxtaskrun; tid++) {
000002  e007              B        |L1.20|
                  |L1.4|
;;;63         if (os_active_TCB[tid-1] == NULL) {
000004  1e48              SUBS     r0,r1,#1
000006  4afe              LDR      r2,|L1.1024|
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  b908              CBNZ     r0,|L1.18|
;;;64           return ((OS_TID)tid);
00000e  4608              MOV      r0,r1
                  |L1.16|
;;;65         }
;;;66       }
;;;67       return (0);
;;;68     }
000010  4770              BX       lr
                  |L1.18|
000012  1c49              ADDS     r1,r1,#1              ;62
                  |L1.20|
000014  48fb              LDR      r0,|L1.1028|
000016  8800              LDRH     r0,[r0,#0]            ;62  ; os_maxtaskrun
000018  4281              CMP      r1,r0                 ;62
00001a  d9f3              BLS      |L1.4|
00001c  2000              MOVS     r0,#0                 ;67
00001e  e7f7              B        |L1.16|
;;;69     
                          ENDP

                  rt_init_context PROC
;;;72     
;;;73     static void rt_init_context (P_TCB p_TCB, U8 priority, FUNCP task_body) {
000020  b570              PUSH     {r4-r6,lr}
000022  4604              MOV      r4,r0
000024  460d              MOV      r5,r1
000026  4616              MOV      r6,r2
;;;74       /* Initialize general part of the Task Control Block. */
;;;75       p_TCB->cb_type   = TCB;
000028  2000              MOVS     r0,#0
00002a  7020              STRB     r0,[r4,#0]
;;;76       p_TCB->state     = READY;
00002c  2001              MOVS     r0,#1
00002e  7060              STRB     r0,[r4,#1]
;;;77       p_TCB->prio      = priority;
000030  70a5              STRB     r5,[r4,#2]
;;;78       p_TCB->prio_base = priority;
000032  f8845024          STRB     r5,[r4,#0x24]
;;;79       p_TCB->p_lnk     = NULL;
000036  2000              MOVS     r0,#0
000038  6060              STR      r0,[r4,#4]
;;;80       p_TCB->p_rlnk    = NULL;
00003a  60a0              STR      r0,[r4,#8]
;;;81       p_TCB->p_dlnk    = NULL;
00003c  60e0              STR      r0,[r4,#0xc]
;;;82       p_TCB->p_blnk    = NULL;
00003e  6120              STR      r0,[r4,#0x10]
;;;83       p_TCB->p_mlnk    = NULL;
000040  6220              STR      r0,[r4,#0x20]
;;;84       p_TCB->delta_time    = 0;
000042  82a0              STRH     r0,[r4,#0x14]
;;;85       p_TCB->interval_time = 0;
000044  82e0              STRH     r0,[r4,#0x16]
;;;86       p_TCB->events  = 0;
000046  8320              STRH     r0,[r4,#0x18]
;;;87       p_TCB->waits   = 0;
000048  8360              STRH     r0,[r4,#0x1a]
;;;88       p_TCB->stack_frame = 0;
00004a  f8840025          STRB     r0,[r4,#0x25]
;;;89     
;;;90       if (p_TCB->priv_stack == 0) {
00004e  8ce0              LDRH     r0,[r4,#0x26]
000050  b918              CBNZ     r0,|L1.90|
;;;91         /* Allocate the memory space for the stack. */
;;;92         p_TCB->stack = rt_alloc_box (mp_stk);
000052  48ed              LDR      r0,|L1.1032|
000054  f7fffffe          BL       rt_alloc_box
000058  62e0              STR      r0,[r4,#0x2c]
                  |L1.90|
;;;93       }
;;;94       rt_init_stack (p_TCB, task_body);
00005a  4631              MOV      r1,r6
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       rt_init_stack
;;;95     }
000062  bd70              POP      {r4-r6,pc}
;;;96     
                          ENDP

                  rt_switch_req PROC
;;;99     
;;;100    void rt_switch_req (P_TCB p_new) {
000064  49e9              LDR      r1,|L1.1036|
;;;101      /* Switch to next task (identified by "p_new"). */
;;;102      os_tsk.new   = p_new;
000066  6048              STR      r0,[r1,#4]  ; os_tsk
;;;103      p_new->state = RUNNING;
000068  2102              MOVS     r1,#2
00006a  7041              STRB     r1,[r0,#1]
;;;104      DBG_TASK_SWITCH(p_new->task_id);
;;;105    }
00006c  4770              BX       lr
;;;106    
                          ENDP

                  rt_dispatch PROC
;;;109    
;;;110    void rt_dispatch (P_TCB next_TCB) {
00006e  b510              PUSH     {r4,lr}
000070  4604              MOV      r4,r0
;;;111      /* Dispatch next task if any identified or dispatch highest ready task    */
;;;112      /* "next_TCB" identifies a task to run or has value NULL (=no next task)  */
;;;113      if (next_TCB == NULL) {
000072  b93c              CBNZ     r4,|L1.132|
;;;114        /* Running task was blocked: continue with highest ready task */
;;;115        next_TCB = rt_get_first (&os_rdy);
000074  48e6              LDR      r0,|L1.1040|
000076  f7fffffe          BL       rt_get_first
00007a  4604              MOV      r4,r0
;;;116        rt_switch_req (next_TCB);
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       rt_switch_req
000082  e017              B        |L1.180|
                  |L1.132|
;;;117      }
;;;118      else {
;;;119        /* Check which task continues */
;;;120        if (next_TCB->prio > os_tsk.run->prio) {
000084  78a0              LDRB     r0,[r4,#2]
000086  49e1              LDR      r1,|L1.1036|
000088  6809              LDR      r1,[r1,#0]  ; os_tsk
00008a  7889              LDRB     r1,[r1,#2]
00008c  4288              CMP      r0,r1
00008e  dd0b              BLE      |L1.168|
;;;121          /* preempt running task */
;;;122          rt_put_rdy_first (os_tsk.run);
000090  49de              LDR      r1,|L1.1036|
000092  6808              LDR      r0,[r1,#0]  ; os_tsk
000094  f7fffffe          BL       rt_put_rdy_first
;;;123          os_tsk.run->state = READY;
000098  2001              MOVS     r0,#1
00009a  49dc              LDR      r1,|L1.1036|
00009c  6809              LDR      r1,[r1,#0]  ; os_tsk
00009e  7048              STRB     r0,[r1,#1]
;;;124          rt_switch_req (next_TCB);
0000a0  4620              MOV      r0,r4
0000a2  f7fffffe          BL       rt_switch_req
0000a6  e005              B        |L1.180|
                  |L1.168|
;;;125        }
;;;126        else {
;;;127          /* put next task into ready list, no task switch takes place */
;;;128          next_TCB->state = READY;
0000a8  2001              MOVS     r0,#1
0000aa  7060              STRB     r0,[r4,#1]
;;;129          rt_put_prio (&os_rdy, next_TCB);
0000ac  4621              MOV      r1,r4
0000ae  48d8              LDR      r0,|L1.1040|
0000b0  f7fffffe          BL       rt_put_prio
                  |L1.180|
;;;130        }
;;;131      }
;;;132    }
0000b4  bd10              POP      {r4,pc}
;;;133    
                          ENDP

                  rt_block PROC
;;;136    
;;;137    void rt_block (U16 timeout, U8 block_state) {
0000b6  b570              PUSH     {r4-r6,lr}
0000b8  4604              MOV      r4,r0
0000ba  460d              MOV      r5,r1
;;;138      /* Block running task and choose next ready task.                         */
;;;139      /* "timeout" sets a time-out value or is 0xffff (=no time-out).           */
;;;140      /* "block_state" defines the appropriate task state */
;;;141      P_TCB next_TCB;
;;;142    
;;;143      if (timeout) {
0000bc  b194              CBZ      r4,|L1.228|
;;;144        if (timeout < 0xffff) {
0000be  f64f70ff          MOV      r0,#0xffff
0000c2  4284              CMP      r4,r0
0000c4  da04              BGE      |L1.208|
;;;145          rt_put_dly (os_tsk.run, timeout);
0000c6  49d1              LDR      r1,|L1.1036|
0000c8  6808              LDR      r0,[r1,#0]  ; os_tsk
0000ca  4621              MOV      r1,r4
0000cc  f7fffffe          BL       rt_put_dly
                  |L1.208|
;;;146        }
;;;147        os_tsk.run->state = block_state;
0000d0  48ce              LDR      r0,|L1.1036|
0000d2  6800              LDR      r0,[r0,#0]  ; os_tsk
0000d4  7045              STRB     r5,[r0,#1]
;;;148        next_TCB = rt_get_first (&os_rdy);
0000d6  48ce              LDR      r0,|L1.1040|
0000d8  f7fffffe          BL       rt_get_first
0000dc  4606              MOV      r6,r0
;;;149        rt_switch_req (next_TCB);
0000de  4630              MOV      r0,r6
0000e0  f7fffffe          BL       rt_switch_req
                  |L1.228|
;;;150      }
;;;151    }
0000e4  bd70              POP      {r4-r6,pc}
;;;152    
                          ENDP

                  rt_tsk_pass PROC
;;;155    
;;;156    void rt_tsk_pass (void) {
0000e6  b510              PUSH     {r4,lr}
;;;157      /* Allow tasks of same priority level to run cooperatively.*/
;;;158      P_TCB p_new;
;;;159    
;;;160      p_new = rt_get_same_rdy_prio();
0000e8  f7fffffe          BL       rt_get_same_rdy_prio
0000ec  4604              MOV      r4,r0
;;;161      if (p_new != NULL) {
0000ee  b15c              CBZ      r4,|L1.264|
;;;162        rt_put_prio ((P_XCB)&os_rdy, os_tsk.run);
0000f0  48c6              LDR      r0,|L1.1036|
0000f2  6801              LDR      r1,[r0,#0]  ; os_tsk
0000f4  48c6              LDR      r0,|L1.1040|
0000f6  f7fffffe          BL       rt_put_prio
;;;163        os_tsk.run->state = READY;
0000fa  2001              MOVS     r0,#1
0000fc  49c3              LDR      r1,|L1.1036|
0000fe  6809              LDR      r1,[r1,#0]  ; os_tsk
000100  7048              STRB     r0,[r1,#1]
;;;164        rt_switch_req (p_new);
000102  4620              MOV      r0,r4
000104  f7fffffe          BL       rt_switch_req
                  |L1.264|
;;;165      }
;;;166    }
000108  bd10              POP      {r4,pc}
;;;167    
                          ENDP

                  rt_tsk_self PROC
;;;170    
;;;171    OS_TID rt_tsk_self (void) {
00010a  48c0              LDR      r0,|L1.1036|
;;;172      /* Return own task identifier value. */
;;;173      if (os_tsk.run == NULL) {
00010c  6800              LDR      r0,[r0,#0]  ; os_tsk
00010e  b908              CBNZ     r0,|L1.276|
;;;174        return (0);
000110  2000              MOVS     r0,#0
                  |L1.274|
;;;175      }
;;;176      return (os_tsk.run->task_id);
;;;177    }
000112  4770              BX       lr
                  |L1.276|
000114  48bd              LDR      r0,|L1.1036|
000116  6800              LDR      r0,[r0,#0]            ;176  ; os_tsk
000118  78c0              LDRB     r0,[r0,#3]            ;176
00011a  e7fa              B        |L1.274|
;;;178    
                          ENDP

                  rt_tsk_prio PROC
;;;181    
;;;182    OS_RESULT rt_tsk_prio (OS_TID task_id, U8 new_prio) {
00011c  b570              PUSH     {r4-r6,lr}
00011e  4606              MOV      r6,r0
000120  460c              MOV      r4,r1
;;;183      /* Change execution priority of a task to "new_prio". */
;;;184      P_TCB p_task;
;;;185    
;;;186      if (task_id == 0) {
000122  b9d6              CBNZ     r6,|L1.346|
;;;187        /* Change execution priority of calling task. */
;;;188        os_tsk.run->prio      = new_prio;
000124  48b9              LDR      r0,|L1.1036|
000126  6800              LDR      r0,[r0,#0]  ; os_tsk
000128  7084              STRB     r4,[r0,#2]
;;;189        os_tsk.run->prio_base = new_prio;
00012a  48b8              LDR      r0,|L1.1036|
00012c  6800              LDR      r0,[r0,#0]  ; os_tsk
00012e  f8804024          STRB     r4,[r0,#0x24]
;;;190    run:if (rt_rdy_prio() > new_prio) {
000132  bf00              NOP      
                  |L1.308|
000134  48b6              LDR      r0,|L1.1040|
000136  6840              LDR      r0,[r0,#4]  ; os_rdy
000138  7880              LDRB     r0,[r0,#2]
00013a  42a0              CMP      r0,r4
00013c  dd0b              BLE      |L1.342|
;;;191          rt_put_prio (&os_rdy, os_tsk.run);
00013e  48b3              LDR      r0,|L1.1036|
000140  6801              LDR      r1,[r0,#0]  ; os_tsk
000142  48b3              LDR      r0,|L1.1040|
000144  f7fffffe          BL       rt_put_prio
;;;192          os_tsk.run->state   = READY;
000148  2001              MOVS     r0,#1
00014a  49b0              LDR      r1,|L1.1036|
00014c  6809              LDR      r1,[r1,#0]  ; os_tsk
00014e  7048              STRB     r0,[r1,#1]
;;;193          rt_dispatch (NULL);
000150  2000              MOVS     r0,#0
000152  f7fffffe          BL       rt_dispatch
                  |L1.342|
;;;194        }
;;;195        return (OS_R_OK);
000156  2000              MOVS     r0,#0
                  |L1.344|
;;;196      }
;;;197    
;;;198      /* Find the task in the "os_active_TCB" array. */
;;;199      if (task_id > os_maxtaskrun || os_active_TCB[task_id-1] == NULL) {
;;;200        /* Task with "task_id" not found or not started. */
;;;201        return (OS_R_NOK);
;;;202      }
;;;203      p_task = os_active_TCB[task_id-1];
;;;204      p_task->prio      = new_prio;
;;;205      p_task->prio_base = new_prio;
;;;206      if (p_task == os_tsk.run) {
;;;207        goto run;
;;;208      }
;;;209      rt_resort_prio (p_task);
;;;210      if (p_task->state == READY) {
;;;211        /* Task enqueued in a ready list. */
;;;212        p_task = rt_get_first (&os_rdy);
;;;213        rt_dispatch (p_task);
;;;214      }
;;;215      return (OS_R_OK);
;;;216    }
000158  bd70              POP      {r4-r6,pc}
                  |L1.346|
00015a  48aa              LDR      r0,|L1.1028|
00015c  8800              LDRH     r0,[r0,#0]            ;199  ; os_maxtaskrun
00015e  4286              CMP      r6,r0                 ;199
000160  d804              BHI      |L1.364|
000162  1e70              SUBS     r0,r6,#1              ;199
000164  49a6              LDR      r1,|L1.1024|
000166  f8510020          LDR      r0,[r1,r0,LSL #2]     ;199
00016a  b908              CBNZ     r0,|L1.368|
                  |L1.364|
00016c  20ff              MOVS     r0,#0xff              ;201
00016e  e7f3              B        |L1.344|
                  |L1.368|
000170  1e70              SUBS     r0,r6,#1              ;203
000172  49a3              LDR      r1,|L1.1024|
000174  f8515020          LDR      r5,[r1,r0,LSL #2]     ;203
000178  70ac              STRB     r4,[r5,#2]            ;204
00017a  f8854024          STRB     r4,[r5,#0x24]         ;205
00017e  48a3              LDR      r0,|L1.1036|
000180  6800              LDR      r0,[r0,#0]            ;206  ; os_tsk
000182  42a8              CMP      r0,r5                 ;206
000184  d100              BNE      |L1.392|
000186  e7d5              B        |L1.308|
                  |L1.392|
000188  4628              MOV      r0,r5                 ;209
00018a  f7fffffe          BL       rt_resort_prio
00018e  7868              LDRB     r0,[r5,#1]            ;210
000190  2801              CMP      r0,#1                 ;210
000192  d106              BNE      |L1.418|
000194  489e              LDR      r0,|L1.1040|
000196  f7fffffe          BL       rt_get_first
00019a  4605              MOV      r5,r0                 ;212
00019c  4628              MOV      r0,r5                 ;213
00019e  f7fffffe          BL       rt_dispatch
                  |L1.418|
0001a2  2000              MOVS     r0,#0                 ;215
0001a4  e7d8              B        |L1.344|
;;;217    
                          ENDP

                  rt_tsk_create PROC
;;;220    
;;;221    OS_TID rt_tsk_create (FUNCP task, U32 prio_stksz, void *stk, void *argv) {
0001a6  e92d47f0          PUSH     {r4-r10,lr}
0001aa  4607              MOV      r7,r0
0001ac  460d              MOV      r5,r1
0001ae  4690              MOV      r8,r2
0001b0  4699              MOV      r9,r3
;;;222      /* Start a new task declared with "task". */
;;;223      P_TCB task_context;
;;;224      U32 i;
;;;225    
;;;226      /* Priority 0 is reserved for idle task! */
;;;227      if ((prio_stksz & 0xFF) == 0) {
0001b2  b2e8              UXTB     r0,r5
0001b4  b900              CBNZ     r0,|L1.440|
;;;228        prio_stksz += 1;
0001b6  1c6d              ADDS     r5,r5,#1
                  |L1.440|
;;;229      }
;;;230      task_context = rt_alloc_box (mp_tcb);
0001b8  4896              LDR      r0,|L1.1044|
0001ba  f7fffffe          BL       rt_alloc_box
0001be  4604              MOV      r4,r0
;;;231      if (task_context == NULL) {
0001c0  b914              CBNZ     r4,|L1.456|
;;;232        return (0);
0001c2  2000              MOVS     r0,#0
                  |L1.452|
;;;233      }
;;;234      /* If "size != 0" use a private user provided stack. */
;;;235      task_context->stack      = stk;
;;;236      task_context->priv_stack = prio_stksz >> 8;
;;;237      /* Pass parameter 'argv' to 'rt_init_context' */
;;;238      task_context->msg = argv;
;;;239      /* For 'size == 0' system allocates the user stack from the memory pool. */
;;;240      rt_init_context (task_context, prio_stksz & 0xFF, task);
;;;241    
;;;242      /* Find a free entry in 'os_active_TCB' table. */
;;;243      i = rt_get_TID ();
;;;244      os_active_TCB[i-1] = task_context;
;;;245      task_context->task_id = i;
;;;246      DBG_TASK_NOTIFY(task_context, __TRUE);
;;;247      rt_dispatch (task_context);
;;;248      return ((OS_TID)i);
;;;249    }
0001c4  e8bd87f0          POP      {r4-r10,pc}
                  |L1.456|
0001c8  f8c4802c          STR      r8,[r4,#0x2c]         ;235
0001cc  f3c5200f          UBFX     r0,r5,#8,#16          ;236
0001d0  84e0              STRH     r0,[r4,#0x26]         ;236
0001d2  f8c4901c          STR      r9,[r4,#0x1c]         ;238
0001d6  b2e9              UXTB     r1,r5                 ;240
0001d8  463a              MOV      r2,r7                 ;240
0001da  4620              MOV      r0,r4                 ;240
0001dc  f7fffffe          BL       rt_init_context
0001e0  f7fffffe          BL       rt_get_TID
0001e4  4606              MOV      r6,r0                 ;243
0001e6  1e70              SUBS     r0,r6,#1              ;244
0001e8  4985              LDR      r1,|L1.1024|
0001ea  f8414020          STR      r4,[r1,r0,LSL #2]     ;244
0001ee  70e6              STRB     r6,[r4,#3]            ;245
0001f0  4620              MOV      r0,r4                 ;247
0001f2  f7fffffe          BL       rt_dispatch
0001f6  4630              MOV      r0,r6                 ;248
0001f8  e7e4              B        |L1.452|
;;;250    
                          ENDP

                  rt_tsk_delete PROC
;;;253    
;;;254    OS_RESULT rt_tsk_delete (OS_TID task_id) {
0001fa  e92d41f0          PUSH     {r4-r8,lr}
0001fe  4607              MOV      r7,r0
;;;255      /* Terminate the task identified with "task_id". */
;;;256      P_TCB  task_context;
;;;257      P_TCB  p_TCB;
;;;258      P_MUCB p_MCB, p_MCB0;
;;;259    
;;;260      if (task_id == 0 || task_id == os_tsk.run->task_id) {
000200  b127              CBZ      r7,|L1.524|
000202  4882              LDR      r0,|L1.1036|
000204  6800              LDR      r0,[r0,#0]  ; os_tsk
000206  78c0              LDRB     r0,[r0,#3]
000208  42b8              CMP      r0,r7
00020a  d14b              BNE      |L1.676|
                  |L1.524|
;;;261        /* Terminate itself. */
;;;262        os_tsk.run->state     = INACTIVE;
00020c  2000              MOVS     r0,#0
00020e  497f              LDR      r1,|L1.1036|
000210  6809              LDR      r1,[r1,#0]  ; os_tsk
000212  7048              STRB     r0,[r1,#1]
;;;263        os_tsk.run->tsk_stack = rt_get_PSP ();
000214  f7fffffe          BL       rt_get_PSP
000218  497c              LDR      r1,|L1.1036|
00021a  6809              LDR      r1,[r1,#0]  ; os_tsk
00021c  6288              STR      r0,[r1,#0x28]
;;;264        rt_stk_check ();
00021e  f7fffffe          BL       rt_stk_check
;;;265        p_MCB = os_tsk.run->p_mlnk;
000222  487a              LDR      r0,|L1.1036|
000224  6800              LDR      r0,[r0,#0]  ; os_tsk
000226  6a04              LDR      r4,[r0,#0x20]
;;;266        while (p_MCB) {
000228  e01d              B        |L1.614|
                  |L1.554|
;;;267          /* Release mutexes owned by this task */
;;;268          if (p_MCB->p_lnk) {
00022a  6860              LDR      r0,[r4,#4]
00022c  b1d0              CBZ      r0,|L1.612|
;;;269            /* A task is waiting for mutex. */
;;;270            p_TCB = rt_get_first ((P_XCB)p_MCB);
00022e  4620              MOV      r0,r4
000230  f7fffffe          BL       rt_get_first
000234  4605              MOV      r5,r0
;;;271    #ifdef __CMSIS_RTOS
;;;272            rt_ret_val(p_TCB, 0/*osOK*/);
000236  2100              MOVS     r1,#0
000238  4628              MOV      r0,r5
00023a  f7fffffe          BL       rt_ret_val
;;;273    #else
;;;274            rt_ret_val(p_TCB, OS_R_MUT); 
;;;275    #endif
;;;276            rt_rmv_dly (p_TCB);
00023e  4628              MOV      r0,r5
000240  f7fffffe          BL       rt_rmv_dly
;;;277            p_TCB->state = READY;
000244  2001              MOVS     r0,#1
000246  7068              STRB     r0,[r5,#1]
;;;278            rt_put_prio (&os_rdy, p_TCB);
000248  4629              MOV      r1,r5
00024a  4871              LDR      r0,|L1.1040|
00024c  f7fffffe          BL       rt_put_prio
;;;279            /* A waiting task becomes the owner of this mutex. */
;;;280            p_MCB0 = p_MCB;
000250  4626              MOV      r6,r4
;;;281            p_MCB->level  = 1;
000252  2001              MOVS     r0,#1
000254  8060              STRH     r0,[r4,#2]
;;;282            p_MCB->owner  = p_TCB;
000256  60a5              STR      r5,[r4,#8]
;;;283            p_MCB->p_mlnk = p_TCB->p_mlnk;
000258  6a28              LDR      r0,[r5,#0x20]
00025a  60e0              STR      r0,[r4,#0xc]
;;;284            p_TCB->p_mlnk = p_MCB; 
00025c  622c              STR      r4,[r5,#0x20]
;;;285            p_MCB = p_MCB0->p_mlnk;
00025e  68f0              LDR      r0,[r6,#0xc]
000260  4604              MOV      r4,r0
000262  e000              B        |L1.614|
                  |L1.612|
;;;286          }
;;;287          else {
;;;288            p_MCB = p_MCB->p_mlnk;
000264  68e4              LDR      r4,[r4,#0xc]
                  |L1.614|
000266  2c00              CMP      r4,#0                 ;266
000268  d1df              BNE      |L1.554|
;;;289          }
;;;290        }
;;;291        os_active_TCB[os_tsk.run->task_id-1] = NULL;
00026a  2100              MOVS     r1,#0
00026c  4867              LDR      r0,|L1.1036|
00026e  6800              LDR      r0,[r0,#0]  ; os_tsk
000270  78c0              LDRB     r0,[r0,#3]
000272  1e40              SUBS     r0,r0,#1
000274  4a62              LDR      r2,|L1.1024|
000276  f8421020          STR      r1,[r2,r0,LSL #2]
;;;292        rt_free_box (mp_stk, os_tsk.run->stack);
00027a  4864              LDR      r0,|L1.1036|
00027c  6800              LDR      r0,[r0,#0]  ; os_tsk
00027e  6ac1              LDR      r1,[r0,#0x2c]
000280  4861              LDR      r0,|L1.1032|
000282  f7fffffe          BL       rt_free_box
;;;293        os_tsk.run->stack = NULL;
000286  2000              MOVS     r0,#0
000288  4960              LDR      r1,|L1.1036|
00028a  6809              LDR      r1,[r1,#0]  ; os_tsk
00028c  62c8              STR      r0,[r1,#0x2c]
;;;294        DBG_TASK_NOTIFY(os_tsk.run, __FALSE);
;;;295        rt_free_box (mp_tcb, os_tsk.run);
00028e  485f              LDR      r0,|L1.1036|
000290  6801              LDR      r1,[r0,#0]  ; os_tsk
000292  4860              LDR      r0,|L1.1044|
000294  f7fffffe          BL       rt_free_box
;;;296        os_tsk.run = NULL;
000298  2000              MOVS     r0,#0
00029a  495c              LDR      r1,|L1.1036|
00029c  6008              STR      r0,[r1,#0]  ; os_tsk
;;;297        rt_dispatch (NULL);
00029e  f7fffffe          BL       rt_dispatch
0002a2  e05d              B        |L1.864|
                  |L1.676|
;;;298        /* The program should never come to this point. */
;;;299      }
;;;300      else {
;;;301        /* Find the task in the "os_active_TCB" array. */
;;;302        if (task_id > os_maxtaskrun || os_active_TCB[task_id-1] == NULL) {
0002a4  4857              LDR      r0,|L1.1028|
0002a6  8800              LDRH     r0,[r0,#0]  ; os_maxtaskrun
0002a8  4287              CMP      r7,r0
0002aa  d804              BHI      |L1.694|
0002ac  1e78              SUBS     r0,r7,#1
0002ae  4954              LDR      r1,|L1.1024|
0002b0  f8510020          LDR      r0,[r1,r0,LSL #2]
0002b4  b910              CBNZ     r0,|L1.700|
                  |L1.694|
;;;303          /* Task with "task_id" not found or not started. */
;;;304          return (OS_R_NOK);
0002b6  20ff              MOVS     r0,#0xff
                  |L1.696|
;;;305        }
;;;306        task_context = os_active_TCB[task_id-1];
;;;307        rt_rmv_list (task_context);
;;;308        rt_rmv_dly (task_context);
;;;309        p_MCB = task_context->p_mlnk;
;;;310        while (p_MCB) {
;;;311          /* Release mutexes owned by this task */
;;;312          if (p_MCB->p_lnk) {
;;;313            /* A task is waiting for mutex. */
;;;314            p_TCB = rt_get_first ((P_XCB)p_MCB);
;;;315    #ifdef __CMSIS_RTOS
;;;316            rt_ret_val(p_TCB, 0/*osOK*/);
;;;317    #else
;;;318            rt_ret_val(p_TCB, OS_R_MUT); 
;;;319    #endif
;;;320            rt_rmv_dly (p_TCB);
;;;321            p_TCB->state = READY;
;;;322            rt_put_prio (&os_rdy, p_TCB);
;;;323            /* A waiting task becomes the owner of this mutex. */
;;;324            p_MCB0 = p_MCB;
;;;325            p_MCB->level  = 1;
;;;326            p_MCB->owner  = p_TCB;
;;;327            p_MCB->p_mlnk = p_TCB->p_mlnk;
;;;328            p_TCB->p_mlnk = p_MCB; 
;;;329            p_MCB = p_MCB0->p_mlnk;
;;;330          }
;;;331          else {
;;;332            p_MCB = p_MCB->p_mlnk;
;;;333          }
;;;334        }
;;;335        os_active_TCB[task_id-1] = NULL;
;;;336        rt_free_box (mp_stk, task_context->stack);
;;;337        task_context->stack = NULL;
;;;338        DBG_TASK_NOTIFY(task_context, __FALSE);
;;;339        rt_free_box (mp_tcb, task_context);
;;;340        if (rt_rdy_prio() > os_tsk.run->prio) {
;;;341          /* Ready task has higher priority than running task. */
;;;342          os_tsk.run->state = READY;
;;;343          rt_put_prio (&os_rdy, os_tsk.run);
;;;344          rt_dispatch (NULL);
;;;345        }
;;;346      }
;;;347      return (OS_R_OK);
;;;348    }
0002b8  e8bd81f0          POP      {r4-r8,pc}
                  |L1.700|
0002bc  1e78              SUBS     r0,r7,#1              ;306
0002be  4950              LDR      r1,|L1.1024|
0002c0  f8518020          LDR      r8,[r1,r0,LSL #2]     ;306
0002c4  4640              MOV      r0,r8                 ;307
0002c6  f7fffffe          BL       rt_rmv_list
0002ca  4640              MOV      r0,r8                 ;308
0002cc  f7fffffe          BL       rt_rmv_dly
0002d0  f8d84020          LDR      r4,[r8,#0x20]         ;309
0002d4  e01d              B        |L1.786|
                  |L1.726|
0002d6  6860              LDR      r0,[r4,#4]            ;312
0002d8  b1d0              CBZ      r0,|L1.784|
0002da  4620              MOV      r0,r4                 ;314
0002dc  f7fffffe          BL       rt_get_first
0002e0  4605              MOV      r5,r0                 ;314
0002e2  2100              MOVS     r1,#0                 ;316
0002e4  4628              MOV      r0,r5                 ;316
0002e6  f7fffffe          BL       rt_ret_val
0002ea  4628              MOV      r0,r5                 ;320
0002ec  f7fffffe          BL       rt_rmv_dly
0002f0  2001              MOVS     r0,#1                 ;321
0002f2  7068              STRB     r0,[r5,#1]            ;321
0002f4  4629              MOV      r1,r5                 ;322
0002f6  4846              LDR      r0,|L1.1040|
0002f8  f7fffffe          BL       rt_put_prio
0002fc  4626              MOV      r6,r4                 ;324
0002fe  2001              MOVS     r0,#1                 ;325
000300  8060              STRH     r0,[r4,#2]            ;325
000302  60a5              STR      r5,[r4,#8]            ;326
000304  6a28              LDR      r0,[r5,#0x20]         ;327
000306  60e0              STR      r0,[r4,#0xc]          ;327
000308  622c              STR      r4,[r5,#0x20]         ;328
00030a  68f0              LDR      r0,[r6,#0xc]          ;329
00030c  4604              MOV      r4,r0                 ;329
00030e  e000              B        |L1.786|
                  |L1.784|
000310  68e4              LDR      r4,[r4,#0xc]          ;332
                  |L1.786|
000312  2c00              CMP      r4,#0                 ;310
000314  d1df              BNE      |L1.726|
000316  2100              MOVS     r1,#0                 ;335
000318  1e78              SUBS     r0,r7,#1              ;335
00031a  4a39              LDR      r2,|L1.1024|
00031c  f8421020          STR      r1,[r2,r0,LSL #2]     ;335
000320  4839              LDR      r0,|L1.1032|
000322  f8d8102c          LDR      r1,[r8,#0x2c]         ;336
000326  f7fffffe          BL       rt_free_box
00032a  2000              MOVS     r0,#0                 ;337
00032c  f8c8002c          STR      r0,[r8,#0x2c]         ;337
000330  4641              MOV      r1,r8                 ;339
000332  4838              LDR      r0,|L1.1044|
000334  f7fffffe          BL       rt_free_box
000338  4835              LDR      r0,|L1.1040|
00033a  6840              LDR      r0,[r0,#4]            ;340  ; os_rdy
00033c  7880              LDRB     r0,[r0,#2]            ;340
00033e  4933              LDR      r1,|L1.1036|
000340  6809              LDR      r1,[r1,#0]            ;340  ; os_tsk
000342  7889              LDRB     r1,[r1,#2]            ;340
000344  4288              CMP      r0,r1                 ;340
000346  dd0b              BLE      |L1.864|
000348  2001              MOVS     r0,#1                 ;342
00034a  4930              LDR      r1,|L1.1036|
00034c  6809              LDR      r1,[r1,#0]            ;342  ; os_tsk
00034e  7048              STRB     r0,[r1,#1]            ;342
000350  482e              LDR      r0,|L1.1036|
000352  6801              LDR      r1,[r0,#0]            ;343  ; os_tsk
000354  482e              LDR      r0,|L1.1040|
000356  f7fffffe          BL       rt_put_prio
00035a  2000              MOVS     r0,#0                 ;344
00035c  f7fffffe          BL       rt_dispatch
                  |L1.864|
000360  2000              MOVS     r0,#0                 ;347
000362  e7a9              B        |L1.696|
;;;349    
                          ENDP

                  rt_sys_init PROC
;;;353    #ifdef __CMSIS_RTOS
;;;354    void rt_sys_init (void) {
000364  b510              PUSH     {r4,lr}
;;;355    #else
;;;356    void rt_sys_init (FUNCP first_task, U32 prio_stksz, void *stk) {
;;;357    #endif
;;;358      /* Initialize system and start up task declared with "first_task". */
;;;359      U32 i;
;;;360    
;;;361      DBG_INIT();
;;;362    
;;;363      /* Initialize dynamic memory and task TCB pointers to NULL. */
;;;364      for (i = 0; i < os_maxtaskrun; i++) {
000366  2400              MOVS     r4,#0
000368  e004              B        |L1.884|
                  |L1.874|
;;;365        os_active_TCB[i] = NULL;
00036a  2000              MOVS     r0,#0
00036c  4924              LDR      r1,|L1.1024|
00036e  f8410024          STR      r0,[r1,r4,LSL #2]
000372  1c64              ADDS     r4,r4,#1              ;364
                  |L1.884|
000374  4823              LDR      r0,|L1.1028|
000376  8800              LDRH     r0,[r0,#0]            ;364  ; os_maxtaskrun
000378  4284              CMP      r4,r0                 ;364
00037a  d3f6              BCC      |L1.874|
;;;366      }
;;;367      rt_init_box (&mp_tcb, mp_tcb_size, sizeof(struct OS_TCB));
00037c  2234              MOVS     r2,#0x34
00037e  4826              LDR      r0,|L1.1048|
000380  8801              LDRH     r1,[r0,#0]  ; mp_tcb_size
000382  4824              LDR      r0,|L1.1044|
000384  f7fffffe          BL       _init_box
;;;368      rt_init_box (&mp_stk, mp_stk_size, BOX_ALIGN_8 | (U16)(os_stackinfo));
000388  4824              LDR      r0,|L1.1052|
00038a  8800              LDRH     r0,[r0,#0]  ; os_stackinfo
00038c  b280              UXTH     r0,r0
00038e  f0404200          ORR      r2,r0,#0x80000000
000392  4823              LDR      r0,|L1.1056|
000394  6801              LDR      r1,[r0,#0]  ; mp_stk_size
000396  481c              LDR      r0,|L1.1032|
000398  f7fffffe          BL       _init_box
;;;369      rt_init_box ((U32 *)m_tmr, mp_tmr_size, sizeof(struct OS_TMR));
00039c  2208              MOVS     r2,#8
00039e  4821              LDR      r0,|L1.1060|
0003a0  8801              LDRH     r1,[r0,#0]  ; mp_tmr_size
0003a2  4821              LDR      r0,|L1.1064|
0003a4  6800              LDR      r0,[r0,#0]  ; m_tmr
0003a6  f7fffffe          BL       _init_box
;;;370    
;;;371      /* Set up TCB of idle demon */
;;;372      os_idle_TCB.task_id    = 255;
0003aa  20ff              MOVS     r0,#0xff
0003ac  491f              LDR      r1,|L1.1068|
0003ae  70c8              STRB     r0,[r1,#3]
;;;373      os_idle_TCB.priv_stack = 0;
0003b0  2000              MOVS     r0,#0
0003b2  84c8              STRH     r0,[r1,#0x26]
;;;374      rt_init_context (&os_idle_TCB, 0, os_idle_demon);
0003b4  4a1e              LDR      r2,|L1.1072|
0003b6  2100              MOVS     r1,#0
0003b8  481c              LDR      r0,|L1.1068|
0003ba  f7fffffe          BL       rt_init_context
;;;375    
;;;376      /* Set up ready list: initially empty */
;;;377      os_rdy.cb_type = HCB;
0003be  2004              MOVS     r0,#4
0003c0  4913              LDR      r1,|L1.1040|
0003c2  7008              STRB     r0,[r1,#0]
;;;378      os_rdy.p_lnk   = NULL;
0003c4  2000              MOVS     r0,#0
0003c6  6048              STR      r0,[r1,#4]  ; os_rdy
;;;379      /* Set up delay list: initially empty */
;;;380      os_dly.cb_type = HCB;
0003c8  2004              MOVS     r0,#4
0003ca  491a              LDR      r1,|L1.1076|
0003cc  7008              STRB     r0,[r1,#0]
;;;381      os_dly.p_dlnk  = NULL;
0003ce  2000              MOVS     r0,#0
0003d0  60c8              STR      r0,[r1,#0xc]  ; os_dly
;;;382      os_dly.p_blnk  = NULL;
0003d2  6108              STR      r0,[r1,#0x10]  ; os_dly
;;;383      os_dly.delta_time = 0;
0003d4  8288              STRH     r0,[r1,#0x14]
;;;384    
;;;385      /* Fix SP and system variables to assume idle task is running */
;;;386      /* Transform main program into idle task by assuming idle TCB */
;;;387    #ifndef __CMSIS_RTOS
;;;388      rt_set_PSP (os_idle_TCB.tsk_stack+32);
;;;389    #endif
;;;390      os_tsk.run = &os_idle_TCB;
0003d6  4815              LDR      r0,|L1.1068|
0003d8  490c              LDR      r1,|L1.1036|
0003da  6008              STR      r0,[r1,#0]  ; os_tsk
;;;391      os_tsk.run->state = RUNNING;
0003dc  2002              MOVS     r0,#2
0003de  6809              LDR      r1,[r1,#0]  ; os_tsk
0003e0  7048              STRB     r0,[r1,#1]
;;;392    
;;;393      /* Initialize ps queue */
;;;394      os_psq->first = 0;
0003e2  2000              MOVS     r0,#0
0003e4  4914              LDR      r1,|L1.1080|
0003e6  7008              STRB     r0,[r1,#0]
;;;395      os_psq->last  = 0;
0003e8  7048              STRB     r0,[r1,#1]
;;;396      os_psq->size  = os_fifo_size;
0003ea  4814              LDR      r0,|L1.1084|
0003ec  7800              LDRB     r0,[r0,#0]  ; os_fifo_size
0003ee  70c8              STRB     r0,[r1,#3]
;;;397    
;;;398      rt_init_robin ();
0003f0  f7fffffe          BL       rt_init_robin
;;;399    
;;;400      /* Intitialize SVC and PendSV */
;;;401      rt_svc_init ();
0003f4  bf00              NOP      
0003f6  4a12              LDR      r2,|L1.1088|
0003f8  6812              LDR      r2,[r2,#0]
0003fa  f442027f          ORR      r2,r2,#0xff0000
0003fe  e021              B        |L1.1092|
                  |L1.1024|
                          DCD      os_active_TCB
                  |L1.1028|
                          DCD      os_maxtaskrun
                  |L1.1032|
                          DCD      mp_stk
                  |L1.1036|
                          DCD      os_tsk
                  |L1.1040|
                          DCD      os_rdy
                  |L1.1044|
                          DCD      mp_tcb
                  |L1.1048|
                          DCD      mp_tcb_size
                  |L1.1052|
                          DCD      os_stackinfo
                  |L1.1056|
                          DCD      mp_stk_size
                  |L1.1060|
                          DCD      mp_tmr_size
                  |L1.1064|
                          DCD      m_tmr
                  |L1.1068|
                          DCD      os_idle_TCB
                  |L1.1072|
                          DCD      os_idle_demon
                  |L1.1076|
                          DCD      os_dly
                  |L1.1080|
                          DCD      os_fifo
                  |L1.1084|
                          DCD      os_fifo_size
                  |L1.1088|
                          DCD      0xe000ed20
                  |L1.1092|
000444  4b20              LDR      r3,|L1.1224|
000446  601a              STR      r2,[r3,#0]
000448  461a              MOV      r2,r3
00044a  6812              LDR      r2,[r2,#0]
00044c  f04f437f          MOV      r3,#0xff000000
000450  ea032202          AND      r2,r3,r2,LSL #8
000454  43d2              MVNS     r2,r2
000456  fab2f282          CLZ      r2,r2
00045a  f1c20008          RSB      r0,r2,#8
00045e  4a1a              LDR      r2,|L1.1224|
000460  3a14              SUBS     r2,r2,#0x14
000462  6812              LDR      r2,[r2,#0]
000464  f3c22102          UBFX     r1,r2,#8,#3
000468  4281              CMP      r1,r0
00046a  db00              BLT      |L1.1134|
00046c  1c48              ADDS     r0,r1,#1
                  |L1.1134|
00046e  4a16              LDR      r2,|L1.1224|
000470  1f12              SUBS     r2,r2,#4
000472  6813              LDR      r3,[r2,#0]
000474  f06f7280          MVN      r2,#0x1000000
000478  4082              LSLS     r2,r2,r0
00047a  f3630217          BFI      r2,r3,#0,#24
00047e  4b12              LDR      r3,|L1.1224|
000480  1f1b              SUBS     r3,r3,#4
000482  601a              STR      r2,[r3,#0]
000484  bf00              NOP      
;;;402    
;;;403    #ifndef __CMSIS_RTOS
;;;404      /* Intitialize and start system clock timer */
;;;405      os_tick_irqn = os_tick_init ();
;;;406      if (os_tick_irqn >= 0) {
;;;407        OS_X_INIT(os_tick_irqn);
;;;408      }
;;;409    
;;;410      /* Start up first user task before entering the endless loop */
;;;411      rt_tsk_create (first_task, prio_stksz, stk, NULL);
;;;412    #endif
;;;413    }
000486  bd10              POP      {r4,pc}
;;;414    
                          ENDP

                  rt_sys_start PROC
;;;418    #ifdef __CMSIS_RTOS
;;;419    void rt_sys_start (void) {
000488  b510              PUSH     {r4,lr}
;;;420      /* Start system */
;;;421    
;;;422      /* Intitialize and start system clock timer */
;;;423      os_tick_irqn = os_tick_init ();
00048a  f7fffffe          BL       os_tick_init
00048e  490f              LDR      r1,|L1.1228|
000490  6008              STR      r0,[r1,#0]  ; os_tick_irqn
;;;424      if (os_tick_irqn >= 0) {
000492  4608              MOV      r0,r1
000494  6800              LDR      r0,[r0,#0]  ; os_tick_irqn
000496  2800              CMP      r0,#0
000498  db14              BLT      |L1.1220|
;;;425        OS_X_INIT(os_tick_irqn);
00049a  21ff              MOVS     r1,#0xff
00049c  480b              LDR      r0,|L1.1228|
00049e  6800              LDR      r0,[r0,#0]  ; os_tick_irqn
0004a0  f10020e0          ADD      r0,r0,#0xe000e000
0004a4  f8801400          STRB     r1,[r0,#0x400]
0004a8  4808              LDR      r0,|L1.1228|
0004aa  7800              LDRB     r0,[r0,#0]  ; os_tick_irqn
0004ac  f000011f          AND      r1,r0,#0x1f
0004b0  2001              MOVS     r0,#1
0004b2  4088              LSLS     r0,r0,r1
0004b4  4905              LDR      r1,|L1.1228|
0004b6  6809              LDR      r1,[r1,#0]  ; os_tick_irqn
0004b8  1149              ASRS     r1,r1,#5
0004ba  0089              LSLS     r1,r1,#2
0004bc  f10121e0          ADD      r1,r1,#0xe000e000
0004c0  f8c10100          STR      r0,[r1,#0x100]
                  |L1.1220|
;;;426      }
;;;427    }
0004c4  bd10              POP      {r4,pc}
;;;428    #endif
                          ENDP

0004c6  0000              DCW      0x0000
                  |L1.1224|
                          DCD      0xe000ed20
                  |L1.1228|
                          DCD      os_tick_irqn

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  os_idle_TCB
                          %        52

                          AREA ||.data||, DATA, ALIGN=2

                  os_tsk
                          %        8

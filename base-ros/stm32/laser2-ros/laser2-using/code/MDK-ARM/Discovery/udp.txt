; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\udp.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\udp.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\udp.crf ..\..\libraries\lwip-1.4.1\src\core\udp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  udp_init PROC
;;;85     void
;;;86     udp_init(void)
000000  4770              BX       lr
;;;87     {
;;;88     #if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
;;;89       udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
;;;90     #endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
;;;91     }
;;;92     
                          ENDP

                  udp_new_port PROC
;;;98     static u16_t
;;;99     udp_new_port(void)
000002  b510              PUSH     {r4,lr}
;;;100    {
;;;101      u16_t n = 0;
000004  2200              MOVS     r2,#0
;;;102      struct udp_pcb *pcb;
;;;103      
;;;104    again:
000006  bf00              NOP      
                  |L1.8|
;;;105      if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
000008  48fa              LDR      r0,|L1.1012|
00000a  8803              LDRH     r3,[r0,#0]  ; udp_port
00000c  8800              LDRH     r0,[r0,#0]  ; udp_port
00000e  1c40              ADDS     r0,r0,#1
000010  4cf8              LDR      r4,|L1.1012|
000012  8020              STRH     r0,[r4,#0]
000014  f64f70ff          MOV      r0,#0xffff
000018  4283              CMP      r3,r0
00001a  d103              BNE      |L1.36|
;;;106        udp_port = UDP_LOCAL_PORT_RANGE_START;
00001c  f44f4040          MOV      r0,#0xc000
000020  4623              MOV      r3,r4
000022  8018              STRH     r0,[r3,#0]
                  |L1.36|
;;;107      }
;;;108      /* Check all PCBs. */
;;;109      for(pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
000024  48f4              LDR      r0,|L1.1016|
000026  6801              LDR      r1,[r0,#0]  ; udp_pcbs
000028  e00e              B        |L1.72|
                  |L1.42|
;;;110        if (pcb->local_port == udp_port) {
00002a  8a48              LDRH     r0,[r1,#0x12]
00002c  4bf1              LDR      r3,|L1.1012|
00002e  881b              LDRH     r3,[r3,#0]  ; udp_port
000030  4298              CMP      r0,r3
000032  d108              BNE      |L1.70|
;;;111          if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
000034  1c50              ADDS     r0,r2,#1
000036  b280              UXTH     r0,r0
000038  4602              MOV      r2,r0
00003a  f5b04f80          CMP      r0,#0x4000
00003e  db01              BLT      |L1.68|
;;;112            return 0;
000040  2000              MOVS     r0,#0
                  |L1.66|
;;;113          }
;;;114          goto again;
;;;115        }
;;;116      }
;;;117      return udp_port;
;;;118    #if 0
;;;119      struct udp_pcb *ipcb = udp_pcbs;
;;;120      while ((ipcb != NULL) && (udp_port != UDP_LOCAL_PORT_RANGE_END)) {
;;;121        if (ipcb->local_port == udp_port) {
;;;122          /* port is already used by another udp_pcb */
;;;123          udp_port++;
;;;124          /* restart scanning all udp pcbs */
;;;125          ipcb = udp_pcbs;
;;;126        } else {
;;;127          /* go on with next udp pcb */
;;;128          ipcb = ipcb->next;
;;;129        }
;;;130      }
;;;131      if (ipcb != NULL) {
;;;132        return 0;
;;;133      }
;;;134      return udp_port;
;;;135    #endif
;;;136    }
000042  bd10              POP      {r4,pc}
                  |L1.68|
000044  e7e0              B        |L1.8|
                  |L1.70|
000046  68c9              LDR      r1,[r1,#0xc]          ;109
                  |L1.72|
000048  2900              CMP      r1,#0                 ;109
00004a  d1ee              BNE      |L1.42|
00004c  48e9              LDR      r0,|L1.1012|
00004e  8800              LDRH     r0,[r0,#0]            ;117  ; udp_port
000050  e7f7              B        |L1.66|
;;;137    
                          ENDP

                  udp_input PROC
;;;150    void
;;;151    udp_input(struct pbuf *p, struct netif *inp)
000052  e92d5fff          PUSH     {r0-r12,lr}
;;;152    {
000056  4606              MOV      r6,r0
000058  460d              MOV      r5,r1
;;;153      struct udp_hdr *udphdr;
;;;154      struct udp_pcb *pcb, *prev;
;;;155      struct udp_pcb *uncon_pcb;
;;;156      struct ip_hdr *iphdr;
;;;157      u16_t src, dest;
;;;158      u8_t local_match;
;;;159      u8_t broadcast;
;;;160    
;;;161      PERF_START;
;;;162    
;;;163      UDP_STATS_INC(udp.recv);
;;;164    
;;;165      iphdr = (struct ip_hdr *)p->payload;
00005a  6870              LDR      r0,[r6,#4]
00005c  9002              STR      r0,[sp,#8]
;;;166    
;;;167      /* Check minimum length (IP header + UDP header)
;;;168       * and move payload pointer to UDP header */
;;;169      if (p->tot_len < (IPH_HL(iphdr) * 4 + UDP_HLEN) || pbuf_header(p, -(s16_t)(IPH_HL(iphdr) * 4))) {
00005e  8931              LDRH     r1,[r6,#8]
000060  9802              LDR      r0,[sp,#8]
000062  7800              LDRB     r0,[r0,#0]
000064  f000000f          AND      r0,r0,#0xf
000068  2208              MOVS     r2,#8
00006a  eb020080          ADD      r0,r2,r0,LSL #2
00006e  4281              CMP      r1,r0
000070  db08              BLT      |L1.132|
000072  9802              LDR      r0,[sp,#8]
000074  7800              LDRB     r0,[r0,#0]
000076  0700              LSLS     r0,r0,#28
000078  0e80              LSRS     r0,r0,#26
00007a  4241              RSBS     r1,r0,#0
00007c  4630              MOV      r0,r6
00007e  f7fffffe          BL       pbuf_header
000082  b128              CBZ      r0,|L1.144|
                  |L1.132|
;;;170        /* drop short packets */
;;;171        LWIP_DEBUGF(UDP_DEBUG,
000084  bf00              NOP      
000086  bf00              NOP      
;;;172                    ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
;;;173        UDP_STATS_INC(udp.lenerr);
;;;174        UDP_STATS_INC(udp.drop);
;;;175        snmp_inc_udpinerrors();
;;;176        pbuf_free(p);
000088  4630              MOV      r0,r6
00008a  f7fffffe          BL       pbuf_free
;;;177        goto end;
00008e  e0cf              B        |L1.560|
                  |L1.144|
;;;178      }
;;;179    
;;;180      udphdr = (struct udp_hdr *)p->payload;
000090  f8d6b004          LDR      r11,[r6,#4]
;;;181    
;;;182      /* is broadcast packet ? */
;;;183      broadcast = ip_addr_isbroadcast(&current_iphdr_dest, inp);
000094  49d9              LDR      r1,|L1.1020|
000096  6808              LDR      r0,[r1,#0]  ; current_iphdr_dest
000098  4629              MOV      r1,r5
00009a  f7fffffe          BL       ip4_addr_isbroadcast
00009e  4607              MOV      r7,r0
;;;184    
;;;185      LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
0000a0  bf00              NOP      
0000a2  bf00              NOP      
;;;186    
;;;187      /* convert src and dest ports to host byte order */
;;;188      src = ntohs(udphdr->src);
0000a4  f8bb0000          LDRH     r0,[r11,#0]
0000a8  f7fffffe          BL       lwip_ntohs
0000ac  4681              MOV      r9,r0
;;;189      dest = ntohs(udphdr->dest);
0000ae  f8bb0002          LDRH     r0,[r11,#2]
0000b2  f7fffffe          BL       lwip_ntohs
0000b6  4682              MOV      r10,r0
;;;190    
;;;191      udp_debug_print(udphdr);
;;;192    
;;;193      /* print the UDP source and destination */
;;;194      LWIP_DEBUGF(UDP_DEBUG,
0000b8  bf00              NOP      
0000ba  bf00              NOP      
;;;195                  ("udp (%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F") <-- "
;;;196                   "(%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",
;;;197                   ip4_addr1_16(&iphdr->dest), ip4_addr2_16(&iphdr->dest),
;;;198                   ip4_addr3_16(&iphdr->dest), ip4_addr4_16(&iphdr->dest), ntohs(udphdr->dest),
;;;199                   ip4_addr1_16(&iphdr->src), ip4_addr2_16(&iphdr->src),
;;;200                   ip4_addr3_16(&iphdr->src), ip4_addr4_16(&iphdr->src), ntohs(udphdr->src)));
;;;201    
;;;202    #if LWIP_DHCP
;;;203      pcb = NULL;
0000bc  2400              MOVS     r4,#0
;;;204      /* when LWIP_DHCP is active, packets to DHCP_CLIENT_PORT may only be processed by
;;;205         the dhcp module, no other UDP pcb may use the local UDP port DHCP_CLIENT_PORT */
;;;206      if (dest == DHCP_CLIENT_PORT) {
0000be  f1ba0f44          CMP      r10,#0x44
0000c2  d11b              BNE      |L1.252|
;;;207        /* all packets for DHCP_CLIENT_PORT not coming from DHCP_SERVER_PORT are dropped! */
;;;208        if (src == DHCP_SERVER_PORT) {
0000c4  f1b90f43          CMP      r9,#0x43
0000c8  d16d              BNE      |L1.422|
;;;209          if ((inp->dhcp != NULL) && (inp->dhcp->pcb != NULL)) {
0000ca  6a28              LDR      r0,[r5,#0x20]
0000cc  2800              CMP      r0,#0
0000ce  d06a              BEQ      |L1.422|
0000d0  6a28              LDR      r0,[r5,#0x20]
0000d2  6840              LDR      r0,[r0,#4]
0000d4  2800              CMP      r0,#0
0000d6  d066              BEQ      |L1.422|
;;;210            /* accept the packe if 
;;;211               (- broadcast or directed to us) -> DHCP is link-layer-addressed, local ip is always ANY!
;;;212               - inp->dhcp->pcb->remote == ANY or iphdr->src */
;;;213            if ((ip_addr_isany(&inp->dhcp->pcb->remote_ip) ||
0000d8  6a28              LDR      r0,[r5,#0x20]
0000da  6840              LDR      r0,[r0,#4]
0000dc  1d00              ADDS     r0,r0,#4
0000de  b150              CBZ      r0,|L1.246|
0000e0  6a28              LDR      r0,[r5,#0x20]
0000e2  6840              LDR      r0,[r0,#4]
0000e4  6840              LDR      r0,[r0,#4]
0000e6  b130              CBZ      r0,|L1.246|
;;;214               ip_addr_cmp(&(inp->dhcp->pcb->remote_ip), &current_iphdr_src))) {
0000e8  6a28              LDR      r0,[r5,#0x20]
0000ea  6840              LDR      r0,[r0,#4]
0000ec  6840              LDR      r0,[r0,#4]
0000ee  49c4              LDR      r1,|L1.1024|
0000f0  6809              LDR      r1,[r1,#0]  ; current_iphdr_src
0000f2  4288              CMP      r0,r1
0000f4  d157              BNE      |L1.422|
                  |L1.246|
;;;215              pcb = inp->dhcp->pcb;
0000f6  6a28              LDR      r0,[r5,#0x20]
0000f8  6844              LDR      r4,[r0,#4]
0000fa  e054              B        |L1.422|
                  |L1.252|
;;;216            }
;;;217          }
;;;218        }
;;;219      } else
;;;220    #endif /* LWIP_DHCP */
;;;221      {
;;;222        prev = NULL;
0000fc  f04f0800          MOV      r8,#0
;;;223        local_match = 0;
000100  2000              MOVS     r0,#0
000102  9001              STR      r0,[sp,#4]
;;;224        uncon_pcb = NULL;
000104  9003              STR      r0,[sp,#0xc]
;;;225        /* Iterate through the UDP pcb list for a matching pcb.
;;;226         * 'Perfect match' pcbs (connected to the remote port & ip address) are
;;;227         * preferred. If no perfect match is found, the first unconnected pcb that
;;;228         * matches the local port and ip address gets the datagram. */
;;;229        for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
000106  48bc              LDR      r0,|L1.1016|
000108  6804              LDR      r4,[r0,#0]  ; udp_pcbs
00010a  e047              B        |L1.412|
                  |L1.268|
;;;230          local_match = 0;
00010c  2000              MOVS     r0,#0
00010e  9001              STR      r0,[sp,#4]
;;;231          /* print the PCB local and remote address */
;;;232          LWIP_DEBUGF(UDP_DEBUG,
000110  bf00              NOP      
000112  bf00              NOP      
;;;233                      ("pcb (%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F") --- "
;;;234                       "(%"U16_F".%"U16_F".%"U16_F".%"U16_F", %"U16_F")\n",
;;;235                       ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
;;;236                       ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip), pcb->local_port,
;;;237                       ip4_addr1_16(&pcb->remote_ip), ip4_addr2_16(&pcb->remote_ip),
;;;238                       ip4_addr3_16(&pcb->remote_ip), ip4_addr4_16(&pcb->remote_ip), pcb->remote_port));
;;;239    
;;;240          /* compare PCB local addr+port to UDP destination addr+port */
;;;241          if (pcb->local_port == dest) {
000114  8a60              LDRH     r0,[r4,#0x12]
000116  4550              CMP      r0,r10
000118  d124              BNE      |L1.356|
;;;242            if (
00011a  b917              CBNZ     r7,|L1.290|
;;;243               (!broadcast && ip_addr_isany(&pcb->local_ip)) ||
00011c  b1cc              CBZ      r4,|L1.338|
00011e  6820              LDR      r0,[r4,#0]
000120  b1b8              CBZ      r0,|L1.338|
                  |L1.290|
;;;244               ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest) ||
000122  49b6              LDR      r1,|L1.1020|
000124  6820              LDR      r0,[r4,#0]
000126  6809              LDR      r1,[r1,#0]  ; current_iphdr_dest
000128  4288              CMP      r0,r1
00012a  d012              BEQ      |L1.338|
;;;245    #if LWIP_IGMP
;;;246               ip_addr_ismulticast(&current_iphdr_dest) ||
00012c  48b3              LDR      r0,|L1.1020|
00012e  7800              LDRB     r0,[r0,#0]  ; current_iphdr_dest
000130  f00000f0          AND      r0,r0,#0xf0
000134  28e0              CMP      r0,#0xe0
000136  d00c              BEQ      |L1.338|
;;;247    #endif /* LWIP_IGMP */
;;;248    #if IP_SOF_BROADCAST_RECV
;;;249                (broadcast && ip_get_option(pcb, SOF_BROADCAST) &&
;;;250                 (ip_addr_isany(&pcb->local_ip) ||
;;;251                  ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
;;;252    #else /* IP_SOF_BROADCAST_RECV */
;;;253                (broadcast &&
000138  b1a7              CBZ      r7,|L1.356|
;;;254                 (ip_addr_isany(&pcb->local_ip) ||
00013a  b154              CBZ      r4,|L1.338|
00013c  6820              LDR      r0,[r4,#0]
00013e  b140              CBZ      r0,|L1.338|
;;;255                  ip_addr_netcmp(&pcb->local_ip, ip_current_dest_addr(), &inp->netmask)))) {
000140  6820              LDR      r0,[r4,#0]
000142  68a9              LDR      r1,[r5,#8]
000144  4008              ANDS     r0,r0,r1
000146  49ad              LDR      r1,|L1.1020|
000148  6809              LDR      r1,[r1,#0]  ; current_iphdr_dest
00014a  68aa              LDR      r2,[r5,#8]
00014c  4011              ANDS     r1,r1,r2
00014e  4288              CMP      r0,r1
000150  d108              BNE      |L1.356|
                  |L1.338|
;;;256    #endif /* IP_SOF_BROADCAST_RECV */ 
;;;257              local_match = 1;
000152  2001              MOVS     r0,#1
000154  9001              STR      r0,[sp,#4]
;;;258              if ((uncon_pcb == NULL) && 
000156  9803              LDR      r0,[sp,#0xc]
000158  b920              CBNZ     r0,|L1.356|
;;;259                  ((pcb->flags & UDP_FLAGS_CONNECTED) == 0)) {
00015a  7c20              LDRB     r0,[r4,#0x10]
00015c  f0000004          AND      r0,r0,#4
000160  b900              CBNZ     r0,|L1.356|
;;;260                /* the first unconnected matching PCB */
;;;261                uncon_pcb = pcb;
000162  9403              STR      r4,[sp,#0xc]
                  |L1.356|
;;;262              }
;;;263            }
;;;264          }
;;;265          /* compare PCB remote addr+port to UDP source addr+port */
;;;266          if ((local_match != 0) &&
000164  9801              LDR      r0,[sp,#4]
000166  b1b8              CBZ      r0,|L1.408|
;;;267              (pcb->remote_port == src) &&
000168  8aa0              LDRH     r0,[r4,#0x14]
00016a  4548              CMP      r0,r9
00016c  d114              BNE      |L1.408|
;;;268              (ip_addr_isany(&pcb->remote_ip) ||
00016e  1d20              ADDS     r0,r4,#4
000170  b130              CBZ      r0,|L1.384|
000172  6860              LDR      r0,[r4,#4]
000174  b120              CBZ      r0,|L1.384|
;;;269               ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src))) {
000176  49a2              LDR      r1,|L1.1024|
000178  6860              LDR      r0,[r4,#4]
00017a  6809              LDR      r1,[r1,#0]  ; current_iphdr_src
00017c  4288              CMP      r0,r1
00017e  d10b              BNE      |L1.408|
                  |L1.384|
;;;270            /* the first fully matching PCB */
;;;271            if (prev != NULL) {
000180  f1b80f00          CMP      r8,#0
000184  d007              BEQ      |L1.406|
;;;272              /* move the pcb to the front of udp_pcbs so that is
;;;273                 found faster next time */
;;;274              prev->next = pcb->next;
000186  68e0              LDR      r0,[r4,#0xc]
000188  f8c8000c          STR      r0,[r8,#0xc]
;;;275              pcb->next = udp_pcbs;
00018c  489a              LDR      r0,|L1.1016|
00018e  6800              LDR      r0,[r0,#0]  ; udp_pcbs
000190  60e0              STR      r0,[r4,#0xc]
;;;276              udp_pcbs = pcb;
000192  4899              LDR      r0,|L1.1016|
000194  6004              STR      r4,[r0,#0]  ; udp_pcbs
                  |L1.406|
;;;277            } else {
;;;278              UDP_STATS_INC(udp.cachehit);
;;;279            }
;;;280            break;
000196  e003              B        |L1.416|
                  |L1.408|
;;;281          }
;;;282          prev = pcb;
000198  46a0              MOV      r8,r4
00019a  68e4              LDR      r4,[r4,#0xc]          ;229
                  |L1.412|
00019c  2c00              CMP      r4,#0                 ;229
00019e  d1b5              BNE      |L1.268|
                  |L1.416|
0001a0  bf00              NOP                            ;280
;;;283        }
;;;284        /* no fully matching pcb found? then look for an unconnected pcb */
;;;285        if (pcb == NULL) {
0001a2  b904              CBNZ     r4,|L1.422|
;;;286          pcb = uncon_pcb;
0001a4  9c03              LDR      r4,[sp,#0xc]
                  |L1.422|
;;;287        }
;;;288      }
;;;289    
;;;290      /* Check checksum if this is a match or if it was directed at us. */
;;;291      if (pcb != NULL || ip_addr_cmp(&inp->ip_addr, &current_iphdr_dest)) {
0001a6  b924              CBNZ     r4,|L1.434|
0001a8  4994              LDR      r1,|L1.1020|
0001aa  6868              LDR      r0,[r5,#4]
0001ac  6809              LDR      r1,[r1,#0]  ; current_iphdr_dest
0001ae  4288              CMP      r0,r1
0001b0  d13a              BNE      |L1.552|
                  |L1.434|
;;;292        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
0001b2  bf00              NOP      
0001b4  bf00              NOP      
;;;293    #if LWIP_UDPLITE
;;;294        if (IPH_PROTO(iphdr) == IP_PROTO_UDPLITE) {
;;;295          /* Do the UDP Lite checksum */
;;;296    #if CHECKSUM_CHECK_UDP
;;;297          u16_t chklen = ntohs(udphdr->len);
;;;298          if (chklen < sizeof(struct udp_hdr)) {
;;;299            if (chklen == 0) {
;;;300              /* For UDP-Lite, checksum length of 0 means checksum
;;;301                 over the complete packet (See RFC 3828 chap. 3.1) */
;;;302              chklen = p->tot_len;
;;;303            } else {
;;;304              /* At least the UDP-Lite header must be covered by the
;;;305                 checksum! (Again, see RFC 3828 chap. 3.1) */
;;;306              UDP_STATS_INC(udp.chkerr);
;;;307              UDP_STATS_INC(udp.drop);
;;;308              snmp_inc_udpinerrors();
;;;309              pbuf_free(p);
;;;310              goto end;
;;;311            }
;;;312          }
;;;313          if (inet_chksum_pseudo_partial(p, &current_iphdr_src, &current_iphdr_dest,
;;;314                                 IP_PROTO_UDPLITE, p->tot_len, chklen) != 0) {
;;;315           LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;316                       ("udp_input: UDP Lite datagram discarded due to failing checksum\n"));
;;;317            UDP_STATS_INC(udp.chkerr);
;;;318            UDP_STATS_INC(udp.drop);
;;;319            snmp_inc_udpinerrors();
;;;320            pbuf_free(p);
;;;321            goto end;
;;;322          }
;;;323    #endif /* CHECKSUM_CHECK_UDP */
;;;324        } else
;;;325    #endif /* LWIP_UDPLITE */
;;;326        {
;;;327    #if CHECKSUM_CHECK_UDP
;;;328          if (udphdr->chksum != 0) {
;;;329            if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
;;;330                                   IP_PROTO_UDP, p->tot_len) != 0) {
;;;331              LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;332                          ("udp_input: UDP datagram discarded due to failing checksum\n"));
;;;333              UDP_STATS_INC(udp.chkerr);
;;;334              UDP_STATS_INC(udp.drop);
;;;335              snmp_inc_udpinerrors();
;;;336              pbuf_free(p);
;;;337              goto end;
;;;338            }
;;;339          }
;;;340    #endif /* CHECKSUM_CHECK_UDP */
;;;341        }
;;;342        if(pbuf_header(p, -UDP_HLEN)) {
0001b6  f06f0107          MVN      r1,#7
0001ba  4630              MOV      r0,r6
0001bc  f7fffffe          BL       pbuf_header
0001c0  b128              CBZ      r0,|L1.462|
;;;343          /* Can we cope with this failing? Just assert for now */
;;;344          LWIP_ASSERT("pbuf_header failed\n", 0);
0001c2  bf00              NOP      
0001c4  bf00              NOP      
;;;345          UDP_STATS_INC(udp.drop);
;;;346          snmp_inc_udpinerrors();
;;;347          pbuf_free(p);
0001c6  4630              MOV      r0,r6
0001c8  f7fffffe          BL       pbuf_free
;;;348          goto end;
0001cc  e030              B        |L1.560|
                  |L1.462|
;;;349        }
;;;350        if (pcb != NULL) {
0001ce  b174              CBZ      r4,|L1.494|
;;;351          snmp_inc_udpindatagrams();
;;;352    #if SO_REUSE && SO_REUSE_RXTOALL
;;;353          if ((broadcast || ip_addr_ismulticast(&current_iphdr_dest)) &&
;;;354              ip_get_option(pcb, SOF_REUSEADDR)) {
;;;355            /* pass broadcast- or multicast packets to all multicast pcbs
;;;356               if SOF_REUSEADDR is set on the first match */
;;;357            struct udp_pcb *mpcb;
;;;358            u8_t p_header_changed = 0;
;;;359            for (mpcb = udp_pcbs; mpcb != NULL; mpcb = mpcb->next) {
;;;360              if (mpcb != pcb) {
;;;361                /* compare PCB local addr+port to UDP destination addr+port */
;;;362                if ((mpcb->local_port == dest) &&
;;;363                    ((!broadcast && ip_addr_isany(&mpcb->local_ip)) ||
;;;364                     ip_addr_cmp(&(mpcb->local_ip), &current_iphdr_dest) ||
;;;365    #if LWIP_IGMP
;;;366                     ip_addr_ismulticast(&current_iphdr_dest) ||
;;;367    #endif /* LWIP_IGMP */
;;;368    #if IP_SOF_BROADCAST_RECV
;;;369                     (broadcast && ip_get_option(mpcb, SOF_BROADCAST)))) {
;;;370    #else  /* IP_SOF_BROADCAST_RECV */
;;;371                     (broadcast))) {
;;;372    #endif /* IP_SOF_BROADCAST_RECV */
;;;373                  /* pass a copy of the packet to all local matches */
;;;374                  if (mpcb->recv != NULL) {
;;;375                    struct pbuf *q;
;;;376                    /* for that, move payload to IP header again */
;;;377                    if (p_header_changed == 0) {
;;;378                      pbuf_header(p, (s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
;;;379                      p_header_changed = 1;
;;;380                    }
;;;381                    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
;;;382                    if (q != NULL) {
;;;383                      err_t err = pbuf_copy(q, p);
;;;384                      if (err == ERR_OK) {
;;;385                        /* move payload to UDP data */
;;;386                        pbuf_header(q, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
;;;387                        mpcb->recv(mpcb->recv_arg, mpcb, q, ip_current_src_addr(), src);
;;;388                      }
;;;389                    }
;;;390                  }
;;;391                }
;;;392              }
;;;393            }
;;;394            if (p_header_changed) {
;;;395              /* and move payload to UDP data again */
;;;396              pbuf_header(p, -(s16_t)((IPH_HL(iphdr) * 4) + UDP_HLEN));
;;;397            }
;;;398          }
;;;399    #endif /* SO_REUSE && SO_REUSE_RXTOALL */
;;;400          /* callback */
;;;401          if (pcb->recv != NULL) {
0001d0  69e0              LDR      r0,[r4,#0x1c]
0001d2  b140              CBZ      r0,|L1.486|
;;;402            /* now the recv function is responsible for freeing p */
;;;403            pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
0001d4  f8cd9000          STR      r9,[sp,#0]
0001d8  4b89              LDR      r3,|L1.1024|
0001da  4632              MOV      r2,r6
0001dc  4621              MOV      r1,r4
0001de  e9d4c007          LDRD     r12,r0,[r4,#0x1c]
0001e2  47e0              BLX      r12
0001e4  e023              B        |L1.558|
                  |L1.486|
;;;404          } else {
;;;405            /* no recv function registered? then we have to free the pbuf! */
;;;406            pbuf_free(p);
0001e6  4630              MOV      r0,r6
0001e8  f7fffffe          BL       pbuf_free
;;;407            goto end;
0001ec  e020              B        |L1.560|
                  |L1.494|
;;;408          }
;;;409        } else {
;;;410          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
0001ee  bf00              NOP      
0001f0  bf00              NOP      
;;;411    
;;;412    #if LWIP_ICMP
;;;413          /* No match was found, send ICMP destination port unreachable unless
;;;414             destination address was broadcast/multicast. */
;;;415          if (!broadcast &&
0001f2  b9af              CBNZ     r7,|L1.544|
;;;416              !ip_addr_ismulticast(&current_iphdr_dest)) {
0001f4  4881              LDR      r0,|L1.1020|
0001f6  7800              LDRB     r0,[r0,#0]  ; current_iphdr_dest
0001f8  f00000f0          AND      r0,r0,#0xf0
0001fc  28e0              CMP      r0,#0xe0
0001fe  d00f              BEQ      |L1.544|
;;;417            /* move payload pointer back to ip header */
;;;418            pbuf_header(p, (IPH_HL(iphdr) * 4) + UDP_HLEN);
000200  9802              LDR      r0,[sp,#8]
000202  7800              LDRB     r0,[r0,#0]
000204  f000000f          AND      r0,r0,#0xf
000208  2208              MOVS     r2,#8
00020a  eb020180          ADD      r1,r2,r0,LSL #2
00020e  4630              MOV      r0,r6
000210  f7fffffe          BL       pbuf_header
;;;419            LWIP_ASSERT("p->payload == iphdr", (p->payload == iphdr));
000214  bf00              NOP      
000216  bf00              NOP      
;;;420            icmp_dest_unreach(p, ICMP_DUR_PORT);
000218  2103              MOVS     r1,#3
00021a  4630              MOV      r0,r6
00021c  f7fffffe          BL       icmp_dest_unreach
                  |L1.544|
;;;421          }
;;;422    #endif /* LWIP_ICMP */
;;;423          UDP_STATS_INC(udp.proterr);
;;;424          UDP_STATS_INC(udp.drop);
;;;425          snmp_inc_udpnoports();
;;;426          pbuf_free(p);
000220  4630              MOV      r0,r6
000222  f7fffffe          BL       pbuf_free
000226  e002              B        |L1.558|
                  |L1.552|
;;;427        }
;;;428      } else {
;;;429        pbuf_free(p);
000228  4630              MOV      r0,r6
00022a  f7fffffe          BL       pbuf_free
                  |L1.558|
;;;430      }
;;;431    end:
00022e  bf00              NOP      
                  |L1.560|
;;;432      PERF_STOP("udp_input");
;;;433    }
000230  e8bd9fff          POP      {r0-r12,pc}
;;;434    
                          ENDP

                  udp_bind PROC
;;;765    err_t
;;;766    udp_bind(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
000234  e92d41f0          PUSH     {r4-r8,lr}
;;;767    {
000238  4605              MOV      r5,r0
00023a  460e              MOV      r6,r1
00023c  4617              MOV      r7,r2
;;;768      struct udp_pcb *ipcb;
;;;769      u8_t rebind;
;;;770    
;;;771      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
00023e  bf00              NOP      
000240  bf00              NOP      
;;;772      ip_addr_debug_print(UDP_DEBUG, ipaddr);
000242  bf00              NOP      
000244  bf00              NOP      
;;;773      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
000246  bf00              NOP      
000248  bf00              NOP      
;;;774    
;;;775      rebind = 0;
00024a  f04f0800          MOV      r8,#0
;;;776      /* Check for double bind and rebind of the same pcb */
;;;777      for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
00024e  486a              LDR      r0,|L1.1016|
000250  6804              LDR      r4,[r0,#0]  ; udp_pcbs
000252  e01a              B        |L1.650|
                  |L1.596|
;;;778        /* is this UDP PCB already on active list? */
;;;779        if (pcb == ipcb) {
000254  42a5              CMP      r5,r4
000256  d104              BNE      |L1.610|
;;;780          /* pcb may occur at most once in active list */
;;;781          LWIP_ASSERT("rebind == 0", rebind == 0);
000258  bf00              NOP      
00025a  bf00              NOP      
;;;782          /* pcb already in list, just rebind */
;;;783          rebind = 1;
00025c  f04f0801          MOV      r8,#1
000260  e012              B        |L1.648|
                  |L1.610|
;;;784        }
;;;785    
;;;786        /* By default, we don't allow to bind to a port that any other udp
;;;787           PCB is alread bound to, unless *all* PCBs with that port have tha
;;;788           REUSEADDR flag set. */
;;;789    #if SO_REUSE
;;;790        else if (!ip_get_option(pcb, SOF_REUSEADDR) &&
;;;791                 !ip_get_option(ipcb, SOF_REUSEADDR)) {
;;;792    #else /* SO_REUSE */
;;;793        /* port matches that of PCB in list and REUSEADDR not set -> reject */
;;;794        else {
;;;795    #endif /* SO_REUSE */
;;;796          if ((ipcb->local_port == port) &&
000262  8a60              LDRH     r0,[r4,#0x12]
000264  42b8              CMP      r0,r7
000266  d10f              BNE      |L1.648|
;;;797              /* IP address matches, or one is IP_ADDR_ANY? */
;;;798              (ip_addr_isany(&(ipcb->local_ip)) ||
000268  b144              CBZ      r4,|L1.636|
00026a  6820              LDR      r0,[r4,#0]
00026c  b130              CBZ      r0,|L1.636|
;;;799               ip_addr_isany(ipaddr) ||
00026e  b12e              CBZ      r6,|L1.636|
000270  6830              LDR      r0,[r6,#0]
000272  b118              CBZ      r0,|L1.636|
;;;800               ip_addr_cmp(&(ipcb->local_ip), ipaddr))) {
000274  6820              LDR      r0,[r4,#0]
000276  6831              LDR      r1,[r6,#0]
000278  4288              CMP      r0,r1
00027a  d105              BNE      |L1.648|
                  |L1.636|
;;;801            /* other PCB already binds to this local IP and port */
;;;802            LWIP_DEBUGF(UDP_DEBUG,
00027c  bf00              NOP      
00027e  bf00              NOP      
;;;803                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
;;;804            return ERR_USE;
000280  f06f0007          MVN      r0,#7
                  |L1.644|
;;;805          }
;;;806        }
;;;807      }
;;;808    
;;;809      ip_addr_set(&pcb->local_ip, ipaddr);
;;;810    
;;;811      /* no port specified? */
;;;812      if (port == 0) {
;;;813        port = udp_new_port();
;;;814        if (port == 0) {
;;;815          /* no more ports available in local range */
;;;816          LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
;;;817          return ERR_USE;
;;;818        }
;;;819      }
;;;820      pcb->local_port = port;
;;;821      snmp_insert_udpidx_tree(pcb);
;;;822      /* pcb not active yet? */
;;;823      if (rebind == 0) {
;;;824        /* place the PCB on the active list if not already there */
;;;825        pcb->next = udp_pcbs;
;;;826        udp_pcbs = pcb;
;;;827      }
;;;828      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
;;;829                  ("udp_bind: bound to %"U16_F".%"U16_F".%"U16_F".%"U16_F", port %"U16_F"\n",
;;;830                   ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
;;;831                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
;;;832                   pcb->local_port));
;;;833      return ERR_OK;
;;;834    }
000284  e8bd81f0          POP      {r4-r8,pc}
                  |L1.648|
000288  68e4              LDR      r4,[r4,#0xc]          ;777
                  |L1.650|
00028a  2c00              CMP      r4,#0                 ;777
00028c  d1e2              BNE      |L1.596|
00028e  b90e              CBNZ     r6,|L1.660|
000290  2000              MOVS     r0,#0                 ;809
000292  e000              B        |L1.662|
                  |L1.660|
000294  6830              LDR      r0,[r6,#0]            ;809
                  |L1.662|
000296  6028              STR      r0,[r5,#0]            ;809
000298  b947              CBNZ     r7,|L1.684|
00029a  f7fffffe          BL       udp_new_port
00029e  4607              MOV      r7,r0                 ;813
0002a0  b927              CBNZ     r7,|L1.684|
0002a2  bf00              NOP                            ;816
0002a4  bf00              NOP                            ;816
0002a6  f06f0007          MVN      r0,#7                 ;817
0002aa  e7eb              B        |L1.644|
                  |L1.684|
0002ac  826f              STRH     r7,[r5,#0x12]         ;820
0002ae  f1b80f00          CMP      r8,#0                 ;823
0002b2  d104              BNE      |L1.702|
0002b4  4850              LDR      r0,|L1.1016|
0002b6  6800              LDR      r0,[r0,#0]            ;825  ; udp_pcbs
0002b8  60e8              STR      r0,[r5,#0xc]          ;825
0002ba  484f              LDR      r0,|L1.1016|
0002bc  6005              STR      r5,[r0,#0]            ;826  ; udp_pcbs
                  |L1.702|
0002be  bf00              NOP                            ;828
0002c0  bf00              NOP                            ;828
0002c2  2000              MOVS     r0,#0                 ;833
0002c4  e7de              B        |L1.644|
;;;835    /**
                          ENDP

                  udp_sendto_if PROC
;;;548    err_t
;;;549    udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
0002c6  e92d4fff          PUSH     {r0-r11,lr}
;;;550      ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
;;;551    {
0002ca  b083              SUB      sp,sp,#0xc
0002cc  4604              MOV      r4,r0
0002ce  460e              MOV      r6,r1
0002d0  4693              MOV      r11,r2
0002d2  f8dd8040          LDR      r8,[sp,#0x40]
;;;552    #if LWIP_CHECKSUM_ON_COPY
;;;553      return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, 0, 0);
;;;554    }
;;;555    
;;;556    /** Same as udp_sendto_if(), but with checksum */
;;;557    err_t
;;;558    udp_sendto_if_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
;;;559                         u16_t dst_port, struct netif *netif, u8_t have_chksum,
;;;560                         u16_t chksum)
;;;561    {
;;;562    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;563      struct udp_hdr *udphdr;
;;;564      ip_addr_t *src_ip;
;;;565      err_t err;
;;;566      struct pbuf *q; /* q will be sent down the stack */
;;;567    
;;;568    #if IP_SOF_BROADCAST
;;;569      /* broadcast filter? */
;;;570      if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(dst_ip, netif)) {
;;;571        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
;;;572          ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
;;;573        return ERR_VAL;
;;;574      }
;;;575    #endif /* IP_SOF_BROADCAST */
;;;576    
;;;577      /* if the PCB is not yet bound to a port, bind it here */
;;;578      if (pcb->local_port == 0) {
0002d6  8a60              LDRH     r0,[r4,#0x12]
0002d8  b980              CBNZ     r0,|L1.764|
;;;579        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
0002da  bf00              NOP      
0002dc  bf00              NOP      
;;;580        err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
0002de  8a62              LDRH     r2,[r4,#0x12]
0002e0  4621              MOV      r1,r4
0002e2  4620              MOV      r0,r4
0002e4  f7fffffe          BL       udp_bind
0002e8  4682              MOV      r10,r0
;;;581        if (err != ERR_OK) {
0002ea  f1ba0f00          CMP      r10,#0
0002ee  d005              BEQ      |L1.764|
;;;582          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
0002f0  bf00              NOP      
0002f2  bf00              NOP      
;;;583          return err;
0002f4  4650              MOV      r0,r10
                  |L1.758|
;;;584        }
;;;585      }
;;;586    
;;;587      /* not enough space to add an UDP header to first pbuf in given p chain? */
;;;588      if (pbuf_header(p, UDP_HLEN)) {
;;;589        /* allocate header in a separate new pbuf */
;;;590        q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
;;;591        /* new header pbuf could not be allocated? */
;;;592        if (q == NULL) {
;;;593          LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
;;;594          return ERR_MEM;
;;;595        }
;;;596        if (p->tot_len != 0) {
;;;597          /* chain header q in front of given pbuf p (only if p contains data) */
;;;598          pbuf_chain(q, p);
;;;599        }
;;;600        /* first pbuf q points to header pbuf */
;;;601        LWIP_DEBUGF(UDP_DEBUG,
;;;602                    ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
;;;603      } else {
;;;604        /* adding space for header within p succeeded */
;;;605        /* first pbuf q equals given pbuf */
;;;606        q = p;
;;;607        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
;;;608      }
;;;609      LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
;;;610                  (q->len >= sizeof(struct udp_hdr)));
;;;611      /* q now represents the packet to be sent */
;;;612      udphdr = (struct udp_hdr *)q->payload;
;;;613      udphdr->src = htons(pcb->local_port);
;;;614      udphdr->dest = htons(dst_port);
;;;615      /* in UDP, 0 checksum means 'no checksum' */
;;;616      udphdr->chksum = 0x0000; 
;;;617    
;;;618      /* Multicast Loop? */
;;;619    #if LWIP_IGMP
;;;620      if (ip_addr_ismulticast(dst_ip) && ((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0)) {
;;;621        q->flags |= PBUF_FLAG_MCASTLOOP;
;;;622      }
;;;623    #endif /* LWIP_IGMP */
;;;624    
;;;625    
;;;626      /* PCB local address is IP_ANY_ADDR? */
;;;627      if (ip_addr_isany(&pcb->local_ip)) {
;;;628        /* use outgoing network interface IP address as source address */
;;;629        src_ip = &(netif->ip_addr);
;;;630      } else {
;;;631        /* check if UDP PCB local IP address is correct
;;;632         * this could be an old address if netif->ip_addr has changed */
;;;633        if (!ip_addr_cmp(&(pcb->local_ip), &(netif->ip_addr))) {
;;;634          /* local_ip doesn't match, drop the packet */
;;;635          if (q != p) {
;;;636            /* free the header pbuf */
;;;637            pbuf_free(q);
;;;638            q = NULL;
;;;639            /* p is still referenced by the caller, and will live on */
;;;640          }
;;;641          return ERR_VAL;
;;;642        }
;;;643        /* use UDP PCB local IP address as source address */
;;;644        src_ip = &(pcb->local_ip);
;;;645      }
;;;646    
;;;647      LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
;;;648    
;;;649    #if LWIP_UDPLITE
;;;650      /* UDP Lite protocol? */
;;;651      if (pcb->flags & UDP_FLAGS_UDPLITE) {
;;;652        u16_t chklen, chklen_hdr;
;;;653        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP LITE packet length %"U16_F"\n", q->tot_len));
;;;654        /* set UDP message length in UDP header */
;;;655        chklen_hdr = chklen = pcb->chksum_len_tx;
;;;656        if ((chklen < sizeof(struct udp_hdr)) || (chklen > q->tot_len)) {
;;;657          if (chklen != 0) {
;;;658            LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP LITE pcb->chksum_len is illegal: %"U16_F"\n", chklen));
;;;659          }
;;;660          /* For UDP-Lite, checksum length of 0 means checksum
;;;661             over the complete packet. (See RFC 3828 chap. 3.1)
;;;662             At least the UDP-Lite header must be covered by the
;;;663             checksum, therefore, if chksum_len has an illegal
;;;664             value, we generate the checksum over the complete
;;;665             packet to be safe. */
;;;666          chklen_hdr = 0;
;;;667          chklen = q->tot_len;
;;;668        }
;;;669        udphdr->len = htons(chklen_hdr);
;;;670        /* calculate checksum */
;;;671    #if CHECKSUM_GEN_UDP
;;;672        udphdr->chksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip,
;;;673          IP_PROTO_UDPLITE, q->tot_len,
;;;674    #if !LWIP_CHECKSUM_ON_COPY
;;;675          chklen);
;;;676    #else /* !LWIP_CHECKSUM_ON_COPY */
;;;677          (have_chksum ? UDP_HLEN : chklen));
;;;678        if (have_chksum) {
;;;679          u32_t acc;
;;;680          acc = udphdr->chksum + (u16_t)~(chksum);
;;;681          udphdr->chksum = FOLD_U32T(acc);
;;;682        }
;;;683    #endif /* !LWIP_CHECKSUM_ON_COPY */
;;;684    
;;;685        /* chksum zero must become 0xffff, as zero means 'no checksum' */
;;;686        if (udphdr->chksum == 0x0000) {
;;;687          udphdr->chksum = 0xffff;
;;;688        }
;;;689    #endif /* CHECKSUM_GEN_UDP */
;;;690        /* output to IP */
;;;691        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDPLITE,)\n"));
;;;692        NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
;;;693        err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDPLITE, netif);
;;;694        NETIF_SET_HWADDRHINT(netif, NULL);
;;;695      } else
;;;696    #endif /* LWIP_UDPLITE */
;;;697      {      /* UDP */
;;;698        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
;;;699        udphdr->len = htons(q->tot_len);
;;;700        /* calculate checksum */
;;;701    #if CHECKSUM_GEN_UDP
;;;702        if ((pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
;;;703          u16_t udpchksum;
;;;704    #if LWIP_CHECKSUM_ON_COPY
;;;705          if (have_chksum) {
;;;706            u32_t acc;
;;;707            udpchksum = inet_chksum_pseudo_partial(q, src_ip, dst_ip, IP_PROTO_UDP,
;;;708              q->tot_len, UDP_HLEN);
;;;709            acc = udpchksum + (u16_t)~(chksum);
;;;710            udpchksum = FOLD_U32T(acc);
;;;711          } else
;;;712    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;713          {
;;;714            udpchksum = inet_chksum_pseudo(q, src_ip, dst_ip, IP_PROTO_UDP, q->tot_len);
;;;715          }
;;;716    
;;;717          /* chksum zero must become 0xffff, as zero means 'no checksum' */
;;;718          if (udpchksum == 0x0000) {
;;;719            udpchksum = 0xffff;
;;;720          }
;;;721          udphdr->chksum = udpchksum;
;;;722        }
;;;723    #endif /* CHECKSUM_GEN_UDP */
;;;724        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
;;;725        LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,IP_PROTO_UDP,)\n"));
;;;726        /* output to IP */
;;;727        NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
;;;728        err = ip_output_if(q, src_ip, dst_ip, pcb->ttl, pcb->tos, IP_PROTO_UDP, netif);
;;;729        NETIF_SET_HWADDRHINT(netif, NULL);
;;;730      }
;;;731      /* TODO: must this be increased even if error occured? */
;;;732      snmp_inc_udpoutdatagrams();
;;;733    
;;;734      /* did we chain a separate header pbuf earlier? */
;;;735      if (q != p) {
;;;736        /* free the header pbuf */
;;;737        pbuf_free(q);
;;;738        q = NULL;
;;;739        /* p is still referenced by the caller, and will live on */
;;;740      }
;;;741    
;;;742      UDP_STATS_INC(udp.xmit);
;;;743      return err;
;;;744    }
0002f6  b007              ADD      sp,sp,#0x1c
0002f8  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.764|
0002fc  2108              MOVS     r1,#8                 ;588
0002fe  4630              MOV      r0,r6                 ;588
000300  f7fffffe          BL       pbuf_header
000304  b198              CBZ      r0,|L1.814|
000306  2200              MOVS     r2,#0                 ;590
000308  2108              MOVS     r1,#8                 ;590
00030a  2001              MOVS     r0,#1                 ;590
00030c  f7fffffe          BL       pbuf_alloc
000310  4605              MOV      r5,r0                 ;590
000312  b925              CBNZ     r5,|L1.798|
000314  bf00              NOP                            ;593
000316  bf00              NOP                            ;593
000318  f04f30ff          MOV      r0,#0xffffffff        ;594
00031c  e7eb              B        |L1.758|
                  |L1.798|
00031e  8930              LDRH     r0,[r6,#8]            ;596
000320  b118              CBZ      r0,|L1.810|
000322  4631              MOV      r1,r6                 ;598
000324  4628              MOV      r0,r5                 ;598
000326  f7fffffe          BL       pbuf_chain
                  |L1.810|
00032a  bf00              NOP                            ;601
00032c  e002              B        |L1.820|
                  |L1.814|
00032e  4635              MOV      r5,r6                 ;606
000330  bf00              NOP                            ;607
000332  bf00              NOP                            ;607
                  |L1.820|
000334  bf00              NOP                            ;609
000336  bf00              NOP                            ;609
000338  686f              LDR      r7,[r5,#4]            ;612
00033a  8a60              LDRH     r0,[r4,#0x12]         ;613
00033c  f7fffffe          BL       lwip_htons
000340  8038              STRH     r0,[r7,#0]            ;613
000342  9806              LDR      r0,[sp,#0x18]         ;614
000344  f7fffffe          BL       lwip_htons
000348  8078              STRH     r0,[r7,#2]            ;614
00034a  2000              MOVS     r0,#0                 ;616
00034c  80f8              STRH     r0,[r7,#6]            ;616
00034e  f89b0000          LDRB     r0,[r11,#0]           ;620
000352  f00000f0          AND      r0,r0,#0xf0           ;620
000356  28e0              CMP      r0,#0xe0              ;620
000358  d107              BNE      |L1.874|
00035a  7c20              LDRB     r0,[r4,#0x10]         ;620
00035c  f0000008          AND      r0,r0,#8              ;620
000360  b118              CBZ      r0,|L1.874|
000362  7b68              LDRB     r0,[r5,#0xd]          ;621
000364  f0400004          ORR      r0,r0,#4              ;621
000368  7368              STRB     r0,[r5,#0xd]          ;621
                  |L1.874|
00036a  b10c              CBZ      r4,|L1.880|
00036c  6820              LDR      r0,[r4,#0]            ;627
00036e  b910              CBNZ     r0,|L1.886|
                  |L1.880|
000370  f1080904          ADD      r9,r8,#4              ;629
000374  e00e              B        |L1.916|
                  |L1.886|
000376  6820              LDR      r0,[r4,#0]            ;633
000378  f8d81004          LDR      r1,[r8,#4]            ;633
00037c  4288              CMP      r0,r1                 ;633
00037e  d008              BEQ      |L1.914|
000380  42b5              CMP      r5,r6                 ;635
000382  d003              BEQ      |L1.908|
000384  4628              MOV      r0,r5                 ;637
000386  f7fffffe          BL       pbuf_free
00038a  2500              MOVS     r5,#0                 ;638
                  |L1.908|
00038c  f06f0005          MVN      r0,#5                 ;641
000390  e7b1              B        |L1.758|
                  |L1.914|
000392  46a1              MOV      r9,r4                 ;644
                  |L1.916|
000394  bf00              NOP                            ;647
000396  bf00              NOP                            ;647
000398  bf00              NOP                            ;698
00039a  bf00              NOP                            ;698
00039c  8928              LDRH     r0,[r5,#8]            ;699
00039e  f7fffffe          BL       lwip_htons
0003a2  80b8              STRH     r0,[r7,#4]            ;699
0003a4  bf00              NOP                            ;724
0003a6  bf00              NOP                            ;724
0003a8  bf00              NOP                            ;725
0003aa  bf00              NOP                            ;725
0003ac  2111              MOVS     r1,#0x11              ;728
0003ae  7a60              LDRB     r0,[r4,#9]            ;728
0003b0  e88d0103          STM      sp,{r0,r1,r8}         ;728
0003b4  7aa3              LDRB     r3,[r4,#0xa]          ;728
0003b6  465a              MOV      r2,r11                ;728
0003b8  4649              MOV      r1,r9                 ;728
0003ba  4628              MOV      r0,r5                 ;728
0003bc  f7fffffe          BL       ip_output_if
0003c0  4682              MOV      r10,r0                ;728
0003c2  42b5              CMP      r5,r6                 ;735
0003c4  d003              BEQ      |L1.974|
0003c6  4628              MOV      r0,r5                 ;737
0003c8  f7fffffe          BL       pbuf_free
0003cc  2500              MOVS     r5,#0                 ;738
                  |L1.974|
0003ce  4650              MOV      r0,r10                ;743
0003d0  e791              B        |L1.758|
;;;745    
                          ENDP

                  udp_sendto PROC
;;;490    err_t
;;;491    udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
0003d2  e92d43f8          PUSH     {r3-r9,lr}
;;;492      ip_addr_t *dst_ip, u16_t dst_port)
;;;493    {
0003d6  4605              MOV      r5,r0
0003d8  460f              MOV      r7,r1
0003da  4616              MOV      r6,r2
0003dc  4698              MOV      r8,r3
;;;494    #if LWIP_CHECKSUM_ON_COPY
;;;495      return udp_sendto_chksum(pcb, p, dst_ip, dst_port, 0, 0);
;;;496    }
;;;497    
;;;498    /** Same as udp_sendto(), but with checksum */
;;;499    err_t
;;;500    udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, ip_addr_t *dst_ip,
;;;501                      u16_t dst_port, u8_t have_chksum, u16_t chksum)
;;;502    {
;;;503    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;504      struct netif *netif;
;;;505    
;;;506      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
0003de  bf00              NOP      
0003e0  bf00              NOP      
;;;507    
;;;508      /* find the outgoing network interface for this packet */
;;;509    #if LWIP_IGMP
;;;510      netif = ip_route((ip_addr_ismulticast(dst_ip))?(&(pcb->multicast_ip)):(dst_ip));
0003e2  7831              LDRB     r1,[r6,#0]
0003e4  f00101f0          AND      r1,r1,#0xf0
0003e8  29e0              CMP      r1,#0xe0
0003ea  d10b              BNE      |L1.1028|
0003ec  f1050118          ADD      r1,r5,#0x18
0003f0  e009              B        |L1.1030|
0003f2  0000              DCW      0x0000
                  |L1.1012|
                          DCD      udp_port
                  |L1.1016|
                          DCD      udp_pcbs
                  |L1.1020|
                          DCD      current_iphdr_dest
                  |L1.1024|
                          DCD      current_iphdr_src
                  |L1.1028|
000404  4631              MOV      r1,r6
                  |L1.1030|
000406  4608              MOV      r0,r1
000408  f7fffffe          BL       ip_route
00040c  4604              MOV      r4,r0
;;;511    #else
;;;512      netif = ip_route(dst_ip);
;;;513    #endif /* LWIP_IGMP */
;;;514    
;;;515      /* no outgoing network interface could be found? */
;;;516      if (netif == NULL) {
00040e  b92c              CBNZ     r4,|L1.1052|
;;;517        LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
000410  bf00              NOP      
000412  bf00              NOP      
;;;518          ip4_addr1_16(dst_ip), ip4_addr2_16(dst_ip), ip4_addr3_16(dst_ip), ip4_addr4_16(dst_ip)));
;;;519        UDP_STATS_INC(udp.rterr);
;;;520        return ERR_RTE;
000414  f06f0003          MVN      r0,#3
                  |L1.1048|
;;;521      }
;;;522    #if LWIP_CHECKSUM_ON_COPY
;;;523      return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
;;;524    #else /* LWIP_CHECKSUM_ON_COPY */
;;;525      return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
;;;526    #endif /* LWIP_CHECKSUM_ON_COPY */
;;;527    }
000418  e8bd83f8          POP      {r3-r9,pc}
                  |L1.1052|
00041c  4643              MOV      r3,r8                 ;525
00041e  4632              MOV      r2,r6                 ;525
000420  4639              MOV      r1,r7                 ;525
000422  4628              MOV      r0,r5                 ;525
000424  9400              STR      r4,[sp,#0]            ;525
000426  f7fffffe          BL       udp_sendto_if
00042a  e7f5              B        |L1.1048|
;;;528    
                          ENDP

                  udp_send PROC
;;;453    err_t
;;;454    udp_send(struct udp_pcb *pcb, struct pbuf *p)
00042c  b570              PUSH     {r4-r6,lr}
;;;455    {
00042e  4604              MOV      r4,r0
000430  460d              MOV      r5,r1
;;;456      /* send to the packet using remote ip and port stored in the pcb */
;;;457      return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
000432  8aa3              LDRH     r3,[r4,#0x14]
000434  1d22              ADDS     r2,r4,#4
000436  4629              MOV      r1,r5
000438  4620              MOV      r0,r4
00043a  f7fffffe          BL       udp_sendto
;;;458    }
00043e  bd70              POP      {r4-r6,pc}
;;;459    
                          ENDP

                  udp_connect PROC
;;;852    err_t
;;;853    udp_connect(struct udp_pcb *pcb, ip_addr_t *ipaddr, u16_t port)
000440  e92d41f0          PUSH     {r4-r8,lr}
;;;854    {
000444  4604              MOV      r4,r0
000446  460e              MOV      r6,r1
000448  4617              MOV      r7,r2
;;;855      struct udp_pcb *ipcb;
;;;856    
;;;857      if (pcb->local_port == 0) {
00044a  8a60              LDRH     r0,[r4,#0x12]
00044c  b960              CBNZ     r0,|L1.1128|
;;;858        err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
00044e  8a62              LDRH     r2,[r4,#0x12]
000450  4621              MOV      r1,r4
000452  4620              MOV      r0,r4
000454  f7fffffe          BL       udp_bind
000458  4680              MOV      r8,r0
;;;859        if (err != ERR_OK) {
00045a  f1b80f00          CMP      r8,#0
00045e  d002              BEQ      |L1.1126|
;;;860          return err;
000460  4640              MOV      r0,r8
                  |L1.1122|
;;;861        }
;;;862      }
;;;863    
;;;864      ip_addr_set(&pcb->remote_ip, ipaddr);
;;;865      pcb->remote_port = port;
;;;866      pcb->flags |= UDP_FLAGS_CONNECTED;
;;;867    /** TODO: this functionality belongs in upper layers */
;;;868    #ifdef LWIP_UDP_TODO
;;;869      /* Nail down local IP for netconn_addr()/getsockname() */
;;;870      if (ip_addr_isany(&pcb->local_ip) && !ip_addr_isany(&pcb->remote_ip)) {
;;;871        struct netif *netif;
;;;872    
;;;873        if ((netif = ip_route(&(pcb->remote_ip))) == NULL) {
;;;874          LWIP_DEBUGF(UDP_DEBUG, ("udp_connect: No route to 0x%lx\n", pcb->remote_ip.addr));
;;;875          UDP_STATS_INC(udp.rterr);
;;;876          return ERR_RTE;
;;;877        }
;;;878        /** TODO: this will bind the udp pcb locally, to the interface which
;;;879            is used to route output packets to the remote address. However, we
;;;880            might want to accept incoming packets on any interface! */
;;;881        pcb->local_ip = netif->ip_addr;
;;;882      } else if (ip_addr_isany(&pcb->remote_ip)) {
;;;883        pcb->local_ip.addr = 0;
;;;884      }
;;;885    #endif
;;;886      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
;;;887                  ("udp_connect: connected to %"U16_F".%"U16_F".%"U16_F".%"U16_F",port %"U16_F"\n",
;;;888                   ip4_addr1_16(&pcb->local_ip), ip4_addr2_16(&pcb->local_ip),
;;;889                   ip4_addr3_16(&pcb->local_ip), ip4_addr4_16(&pcb->local_ip),
;;;890                   pcb->local_port));
;;;891    
;;;892      /* Insert UDP PCB into the list of active UDP PCBs. */
;;;893      for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
;;;894        if (pcb == ipcb) {
;;;895          /* already on the list, just return */
;;;896          return ERR_OK;
;;;897        }
;;;898      }
;;;899      /* PCB not yet on the list, add PCB now */
;;;900      pcb->next = udp_pcbs;
;;;901      udp_pcbs = pcb;
;;;902      return ERR_OK;
;;;903    }
000462  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1126|
000466  bf00              NOP                            ;862
                  |L1.1128|
000468  b90e              CBNZ     r6,|L1.1134|
00046a  2000              MOVS     r0,#0                 ;864
00046c  e000              B        |L1.1136|
                  |L1.1134|
00046e  6830              LDR      r0,[r6,#0]            ;864
                  |L1.1136|
000470  6060              STR      r0,[r4,#4]            ;864
000472  82a7              STRH     r7,[r4,#0x14]         ;865
000474  7c20              LDRB     r0,[r4,#0x10]         ;866
000476  f0400004          ORR      r0,r0,#4              ;866
00047a  7420              STRB     r0,[r4,#0x10]         ;866
00047c  bf00              NOP                            ;886
00047e  bf00              NOP                            ;886
000480  4823              LDR      r0,|L1.1296|
000482  6805              LDR      r5,[r0,#0]            ;893  ; udp_pcbs
000484  e004              B        |L1.1168|
                  |L1.1158|
000486  42ac              CMP      r4,r5                 ;894
000488  d101              BNE      |L1.1166|
00048a  2000              MOVS     r0,#0                 ;896
00048c  e7e9              B        |L1.1122|
                  |L1.1166|
00048e  68ed              LDR      r5,[r5,#0xc]          ;893
                  |L1.1168|
000490  2d00              CMP      r5,#0                 ;893
000492  d1f8              BNE      |L1.1158|
000494  481e              LDR      r0,|L1.1296|
000496  6800              LDR      r0,[r0,#0]            ;900  ; udp_pcbs
000498  60e0              STR      r0,[r4,#0xc]          ;900
00049a  481d              LDR      r0,|L1.1296|
00049c  6004              STR      r4,[r0,#0]            ;901  ; udp_pcbs
00049e  2000              MOVS     r0,#0                 ;902
0004a0  e7df              B        |L1.1122|
;;;904    
                          ENDP

                  udp_disconnect PROC
;;;910    void
;;;911    udp_disconnect(struct udp_pcb *pcb)
0004a2  2100              MOVS     r1,#0
;;;912    {
;;;913      /* reset remote address association */
;;;914      ip_addr_set_any(&pcb->remote_ip);
0004a4  6041              STR      r1,[r0,#4]
;;;915      pcb->remote_port = 0;
0004a6  8281              STRH     r1,[r0,#0x14]
;;;916      /* mark PCB as unconnected */
;;;917      pcb->flags &= ~UDP_FLAGS_CONNECTED;
0004a8  7c01              LDRB     r1,[r0,#0x10]
0004aa  f0210104          BIC      r1,r1,#4
0004ae  7401              STRB     r1,[r0,#0x10]
;;;918    }
0004b0  4770              BX       lr
;;;919    
                          ENDP

                  udp_recv PROC
;;;929    void
;;;930    udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
0004b2  61c1              STR      r1,[r0,#0x1c]
;;;931    {
;;;932      /* remember recv() callback and user data */
;;;933      pcb->recv = recv;
;;;934      pcb->recv_arg = recv_arg;
0004b4  6202              STR      r2,[r0,#0x20]
;;;935    }
0004b6  4770              BX       lr
;;;936    
                          ENDP

                  udp_remove PROC
;;;945    void
;;;946    udp_remove(struct udp_pcb *pcb)
0004b8  b570              PUSH     {r4-r6,lr}
;;;947    {
0004ba  4605              MOV      r5,r0
;;;948      struct udp_pcb *pcb2;
;;;949    
;;;950      snmp_delete_udpidx_tree(pcb);
;;;951      /* pcb to be removed is first in list? */
;;;952      if (udp_pcbs == pcb) {
0004bc  4814              LDR      r0,|L1.1296|
0004be  6800              LDR      r0,[r0,#0]  ; udp_pcbs
0004c0  42a8              CMP      r0,r5
0004c2  d105              BNE      |L1.1232|
;;;953        /* make list start at 2nd pcb */
;;;954        udp_pcbs = udp_pcbs->next;
0004c4  4812              LDR      r0,|L1.1296|
0004c6  6800              LDR      r0,[r0,#0]  ; udp_pcbs
0004c8  68c0              LDR      r0,[r0,#0xc]
0004ca  4911              LDR      r1,|L1.1296|
0004cc  6008              STR      r0,[r1,#0]  ; udp_pcbs
0004ce  e00c              B        |L1.1258|
                  |L1.1232|
;;;955        /* pcb not 1st in list */
;;;956      } else {
;;;957        for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
0004d0  480f              LDR      r0,|L1.1296|
0004d2  6804              LDR      r4,[r0,#0]  ; udp_pcbs
0004d4  e007              B        |L1.1254|
                  |L1.1238|
;;;958          /* find pcb in udp_pcbs list */
;;;959          if (pcb2->next != NULL && pcb2->next == pcb) {
0004d6  68e0              LDR      r0,[r4,#0xc]
0004d8  b120              CBZ      r0,|L1.1252|
0004da  68e0              LDR      r0,[r4,#0xc]
0004dc  42a8              CMP      r0,r5
0004de  d101              BNE      |L1.1252|
;;;960            /* remove pcb from list */
;;;961            pcb2->next = pcb->next;
0004e0  68e8              LDR      r0,[r5,#0xc]
0004e2  60e0              STR      r0,[r4,#0xc]
                  |L1.1252|
0004e4  68e4              LDR      r4,[r4,#0xc]          ;957
                  |L1.1254|
0004e6  2c00              CMP      r4,#0                 ;957
0004e8  d1f5              BNE      |L1.1238|
                  |L1.1258|
;;;962          }
;;;963        }
;;;964      }
;;;965      memp_free(MEMP_UDP_PCB, pcb);
0004ea  4629              MOV      r1,r5
0004ec  2001              MOVS     r0,#1
0004ee  f7fffffe          BL       memp_free
;;;966    }
0004f2  bd70              POP      {r4-r6,pc}
;;;967    
                          ENDP

                  udp_new PROC
;;;976    struct udp_pcb *
;;;977    udp_new(void)
0004f4  b510              PUSH     {r4,lr}
;;;978    {
;;;979      struct udp_pcb *pcb;
;;;980      pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
0004f6  2001              MOVS     r0,#1
0004f8  f7fffffe          BL       memp_malloc
0004fc  4604              MOV      r4,r0
;;;981      /* could allocate UDP PCB? */
;;;982      if (pcb != NULL) {
0004fe  b12c              CBZ      r4,|L1.1292|
;;;983        /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
;;;984         * which means checksum is generated over the whole datagram per default
;;;985         * (recommended as default by RFC 3828). */
;;;986        /* initialize PCB to all zeroes */
;;;987        memset(pcb, 0, sizeof(struct udp_pcb));
000500  2124              MOVS     r1,#0x24
000502  4620              MOV      r0,r4
000504  f7fffffe          BL       __aeabi_memclr4
;;;988        pcb->ttl = UDP_TTL;
000508  20ff              MOVS     r0,#0xff
00050a  72a0              STRB     r0,[r4,#0xa]
                  |L1.1292|
;;;989      }
;;;990      return pcb;
00050c  4620              MOV      r0,r4
;;;991    }
00050e  bd10              POP      {r4,pc}
;;;992    
                          ENDP

                  |L1.1296|
                          DCD      udp_pcbs

                          AREA ||.data||, DATA, ALIGN=2

                  udp_port
000000  c000              DCW      0xc000
000002  0000              DCB      0x00,0x00
                  udp_pcbs
                          DCD      0x00000000

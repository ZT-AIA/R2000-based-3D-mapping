; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\rt_membox.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\rt_membox.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\rt_membox.crf ..\..\libraries\rtx-v4.73\SRC\rt_MemBox.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  _init_box PROC
;;;47     
;;;48     int _init_box  (void *box_mem, U32 box_size, U32 blk_size) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
000004  460e              MOV      r6,r1
;;;49       /* Initialize memory block system, returns 0 if OK, 1 if fails. */
;;;50       void *end;
;;;51       void *blk;
;;;52       void *next;
;;;53       U32  sizeof_bm;
;;;54     
;;;55       /* Create memory structure. */
;;;56       if (blk_size & BOX_ALIGN_8) {
000006  f0024000          AND      r0,r2,#0x80000000
00000a  b130              CBZ      r0,|L1.26|
;;;57         /* Memory blocks 8-byte aligned. */ 
;;;58         blk_size = ((blk_size & ~BOX_ALIGN_8) + 7) & ~7;
00000c  f0224000          BIC      r0,r2,#0x80000000
000010  1dc0              ADDS     r0,r0,#7
000012  f0200207          BIC      r2,r0,#7
;;;59         sizeof_bm = (sizeof (struct OS_BM) + 7) & ~7;
000016  2510              MOVS     r5,#0x10
000018  e003              B        |L1.34|
                  |L1.26|
;;;60       }
;;;61       else {
;;;62         /* Memory blocks 4-byte aligned. */
;;;63         blk_size = (blk_size + 3) & ~3;
00001a  1cd0              ADDS     r0,r2,#3
00001c  f0200203          BIC      r2,r0,#3
;;;64         sizeof_bm = sizeof (struct OS_BM);
000020  250c              MOVS     r5,#0xc
                  |L1.34|
;;;65       }
;;;66       if (blk_size == 0) {
000022  b90a              CBNZ     r2,|L1.40|
;;;67         return (1);
000024  2001              MOVS     r0,#1
                  |L1.38|
;;;68       }
;;;69       if ((blk_size + sizeof_bm) > box_size) {
;;;70         return (1);
;;;71       }
;;;72       /* Create a Memory structure. */
;;;73       blk = ((U8 *) box_mem) + sizeof_bm;
;;;74       ((P_BM) box_mem)->free = blk;
;;;75       end = ((U8 *) box_mem) + box_size;
;;;76       ((P_BM) box_mem)->end      = end;
;;;77       ((P_BM) box_mem)->blk_size = blk_size;
;;;78     
;;;79       /* Link all free blocks using offsets. */
;;;80       end = ((U8 *) end) - blk_size;
;;;81       while (1)  {
;;;82         next = ((U8 *) blk) + blk_size;
;;;83         if (next > end)  break;
;;;84         *((void **)blk) = next;
;;;85         blk = next;
;;;86       }
;;;87       /* end marker */
;;;88       *((void **)blk) = 0;
;;;89       return (0);
;;;90     }
000026  bdf0              POP      {r4-r7,pc}
                  |L1.40|
000028  1950              ADDS     r0,r2,r5              ;69
00002a  42b0              CMP      r0,r6                 ;69
00002c  d901              BLS      |L1.50|
00002e  2001              MOVS     r0,#1                 ;70
000030  e7f9              B        |L1.38|
                  |L1.50|
000032  1959              ADDS     r1,r3,r5              ;73
000034  6019              STR      r1,[r3,#0]            ;74
000036  199f              ADDS     r7,r3,r6              ;75
000038  605f              STR      r7,[r3,#4]            ;76
00003a  609a              STR      r2,[r3,#8]            ;77
00003c  1abf              SUBS     r7,r7,r2              ;80
00003e  e005              B        |L1.76|
                  |L1.64|
000040  188c              ADDS     r4,r1,r2              ;82
000042  42bc              CMP      r4,r7                 ;83
000044  d900              BLS      |L1.72|
000046  e002              B        |L1.78|
                  |L1.72|
000048  600c              STR      r4,[r1,#0]            ;84
00004a  4621              MOV      r1,r4                 ;85
                  |L1.76|
00004c  e7f8              B        |L1.64|
                  |L1.78|
00004e  bf00              NOP                            ;83
000050  2000              MOVS     r0,#0                 ;88
000052  6008              STR      r0,[r1,#0]            ;88
000054  bf00              NOP                            ;89
000056  e7e6              B        |L1.38|
;;;91     
                          ENDP

                  rt_alloc_box PROC
;;;93     
;;;94     void *rt_alloc_box (void *box_mem) {
000058  4601              MOV      r1,r0
;;;95       /* Allocate a memory block and return start address. */
;;;96       void **free;
;;;97     #ifndef __USE_EXCLUSIVE_ACCESS
;;;98       int  irq_dis;
;;;99     
;;;100      irq_dis = __disable_irq ();
;;;101      free = ((P_BM) box_mem)->free;
;;;102      if (free) {
;;;103        ((P_BM) box_mem)->free = *free;
;;;104      }
;;;105      if (!irq_dis) __enable_irq ();
;;;106    #else
;;;107      do {
00005a  bf00              NOP      
                  |L1.92|
;;;108        if ((free = (void **)__ldrex(&((P_BM) box_mem)->free)) == 0) {
00005c  e8510f00          LDREX    r0,[r1,#0]
000060  b910              CBNZ     r0,|L1.104|
;;;109          __clrex();
000062  f3bf8f2f          CLREX    
;;;110          break;
000066  e004              B        |L1.114|
                  |L1.104|
;;;111        }
;;;112      } while (__strex((U32)*free, &((P_BM) box_mem)->free));
000068  6803              LDR      r3,[r0,#0]
00006a  e8413200          STREX    r2,r3,[r1,#0]
00006e  2a00              CMP      r2,#0
000070  d1f4              BNE      |L1.92|
                  |L1.114|
000072  bf00              NOP                            ;110
;;;113    #endif
;;;114      return (free);
;;;115    }
000074  4770              BX       lr
;;;116    
                          ENDP

                  _calloc_box PROC
;;;119    
;;;120    void *_calloc_box (void *box_mem)  {
000076  e92d41f0          PUSH     {r4-r8,lr}
00007a  4607              MOV      r7,r0
;;;121      /* Allocate a 0-initialized memory block and return start address. */
;;;122      void *free;
;;;123      U32 *p;
;;;124      U32 i;
;;;125    
;;;126      free = _alloc_box (box_mem);
00007c  4638              MOV      r0,r7
00007e  f7fffffe          BL       _alloc_box
000082  4604              MOV      r4,r0
;;;127      if (free)  {
000084  b144              CBZ      r4,|L1.152|
;;;128        p = free;
000086  4625              MOV      r5,r4
;;;129        for (i = ((P_BM) box_mem)->blk_size; i; i -= 4)  {
000088  68be              LDR      r6,[r7,#8]
00008a  e003              B        |L1.148|
                  |L1.140|
;;;130          *p = 0;
00008c  2000              MOVS     r0,#0
00008e  6028              STR      r0,[r5,#0]
;;;131          p++;
000090  1d2d              ADDS     r5,r5,#4
000092  1f36              SUBS     r6,r6,#4              ;129
                  |L1.148|
000094  2e00              CMP      r6,#0                 ;129
000096  d1f9              BNE      |L1.140|
                  |L1.152|
;;;132        }
;;;133      }
;;;134      return (free);
000098  4620              MOV      r0,r4
;;;135    }
00009a  e8bd81f0          POP      {r4-r8,pc}
;;;136    
                          ENDP

                  rt_free_box PROC
;;;139    
;;;140    int rt_free_box (void *box_mem, void *box) {
00009e  4602              MOV      r2,r0
;;;141      /* Free a memory block, returns 0 if OK, 1 if box does not belong to box_mem */
;;;142    #ifndef __USE_EXCLUSIVE_ACCESS
;;;143      int irq_dis;
;;;144    #endif
;;;145    
;;;146      if (box < box_mem || box >= ((P_BM) box_mem)->end) {
0000a0  4291              CMP      r1,r2
0000a2  d302              BCC      |L1.170|
0000a4  6850              LDR      r0,[r2,#4]
0000a6  4288              CMP      r0,r1
0000a8  d801              BHI      |L1.174|
                  |L1.170|
;;;147        return (1);
0000aa  2001              MOVS     r0,#1
                  |L1.172|
;;;148      }
;;;149    
;;;150    #ifndef __USE_EXCLUSIVE_ACCESS
;;;151      irq_dis = __disable_irq ();
;;;152      *((void **)box) = ((P_BM) box_mem)->free;
;;;153      ((P_BM) box_mem)->free = box;
;;;154      if (!irq_dis) __enable_irq ();
;;;155    #else
;;;156      do {
;;;157        *((void **)box) = (void *)__ldrex(&((P_BM) box_mem)->free);
;;;158      } while (__strex ((U32)box, &((P_BM) box_mem)->free));
;;;159    #endif
;;;160      return (0);
;;;161    }
0000ac  4770              BX       lr
                  |L1.174|
0000ae  bf00              NOP                            ;156
                  |L1.176|
0000b0  e8520f00          LDREX    r0,[r2,#0]            ;157
0000b4  6008              STR      r0,[r1,#0]            ;157
0000b6  e8421000          STREX    r0,r1,[r2,#0]         ;158
0000ba  2800              CMP      r0,#0                 ;158
0000bc  d1f8              BNE      |L1.176|
0000be  bf00              NOP                            ;160
0000c0  e7f4              B        |L1.172|
;;;162    
                          ENDP


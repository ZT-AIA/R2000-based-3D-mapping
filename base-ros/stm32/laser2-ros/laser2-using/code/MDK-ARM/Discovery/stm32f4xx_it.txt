; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\stm32f4xx_it.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\stm32f4xx_it.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\stm32f4xx_it.crf ..\src\stm32f4xx_it.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NMI_Handler PROC
;;;83       */
;;;84     void NMI_Handler(void)
000000  4770              BX       lr
;;;85     {
;;;86     }
;;;87     
                          ENDP

                  HardFault_Handler PROC
;;;92       */
;;;93     void HardFault_Handler(void)
000002  bf00              NOP      
                  |L1.4|
;;;94     {
;;;95       /* Go to infinite loop when Hard Fault exception occurs */
;;;96       while (1)
000004  e7fe              B        |L1.4|
;;;97       {
;;;98       }
;;;99     }
;;;100    
                          ENDP

                  MemManage_Handler PROC
;;;105      */
;;;106    void MemManage_Handler(void)
000006  bf00              NOP      
                  |L1.8|
;;;107    {
;;;108      /* Go to infinite loop when Memory Manage exception occurs */
;;;109      while (1)
000008  e7fe              B        |L1.8|
;;;110      {
;;;111      }
;;;112    }
;;;113    
                          ENDP

                  BusFault_Handler PROC
;;;118      */
;;;119    void BusFault_Handler(void)
00000a  bf00              NOP      
                  |L1.12|
;;;120    {
;;;121      /* Go to infinite loop when Bus Fault exception occurs */
;;;122      while (1)
00000c  e7fe              B        |L1.12|
;;;123      {
;;;124      }
;;;125    }
;;;126    
                          ENDP

                  UsageFault_Handler PROC
;;;131      */
;;;132    void UsageFault_Handler(void)
00000e  bf00              NOP      
                  |L1.16|
;;;133    {
;;;134      /* Go to infinite loop when Usage Fault exception occurs */
;;;135      while (1)
000010  e7fe              B        |L1.16|
;;;136      {
;;;137      }
;;;138    }
;;;139    
                          ENDP

                  DebugMon_Handler PROC
;;;144      */
;;;145    void DebugMon_Handler(void)
000012  4770              BX       lr
;;;146    {
;;;147    }
;;;148    
                          ENDP

                  ETH_IRQHandler PROC
;;;153      */
;;;154    void ETH_IRQHandler(void)
000014  b510              PUSH     {r4,lr}
;;;155    {
;;;156      /* Frame received */
;;;157      if (ETH_GetDMAFlagStatus(ETH_DMA_FLAG_R) == SET) 
000016  2040              MOVS     r0,#0x40
000018  f7fffffe          BL       ETH_GetDMAFlagStatus
00001c  2801              CMP      r0,#1
00001e  d102              BNE      |L1.38|
;;;158      {
;;;159        /* Give the semaphore to wakeup LwIP task */
;;;160    		sys_sem_signal(&s_xRxSemaphore);
000020  4863              LDR      r0,|L1.432|
000022  f7fffffe          BL       sys_sem_signal
                  |L1.38|
;;;161      }
;;;162    	
;;;163      /* Clear the interrupt flags. */
;;;164      /* Clear the Eth DMA Rx IT pending bits */
;;;165      ETH_DMAClearITPendingBit(ETH_DMA_IT_R);
000026  2040              MOVS     r0,#0x40
000028  f7fffffe          BL       ETH_DMAClearITPendingBit
;;;166      ETH_DMAClearITPendingBit(ETH_DMA_IT_NIS);
00002c  f44f3080          MOV      r0,#0x10000
000030  f7fffffe          BL       ETH_DMAClearITPendingBit
;;;167    	//curPluseCnt = TIM3->CNT+(TIM2->CNT<<16);
;;;168    }
000034  bd10              POP      {r4,pc}
;;;169    
                          ENDP

                  USART3_IRQHandler PROC
;;;186    /* Navigation message receive handler */
;;;187    void USART3_IRQHandler(void)
000036  b570              PUSH     {r4-r6,lr}
;;;188    {
;;;189    	static int16_t tim3_cnt, tim4_cnt;
;;;190    	uint16_t uart_data;
;;;191    	struct ptptime_t *time;
;;;192    	uart_data = USART3->DR & 0x00ffu; // Do not put this line at the last line!!! 
000038  485e              LDR      r0,|L1.436|
00003a  8800              LDRH     r0,[r0,#0]
00003c  b2c4              UXTB     r4,r0
;;;193    	
;;;194    	if(TIM7->CNT < INTERFRAME_GAP)
00003e  485e              LDR      r0,|L1.440|
000040  6800              LDR      r0,[r0,#0]
000042  f5b07ffa          CMP      r0,#0x1f4
000046  d219              BCS      |L1.124|
;;;195    	{
;;;196    		if(HNMsg_Buf.index >= H_NAV_MSG_SIZE)
000048  485c              LDR      r0,|L1.444|
00004a  f8b001b4          LDRH     r0,[r0,#0x1b4]  ; HNMsg_Buf
00004e  2880              CMP      r0,#0x80
000050  db03              BLT      |L1.90|
;;;197    			HNMsg_Buf.index = H_NAV_MSG_SIZE - 1;
000052  207f              MOVS     r0,#0x7f
000054  4959              LDR      r1,|L1.444|
000056  f8a101b4          STRH     r0,[r1,#0x1b4]
                  |L1.90|
;;;198    		HNMsg_Buf.msg[HNMsg_Buf.rear].hybrid_nav_data[HNMsg_Buf.index++] = uart_data;
00005a  4958              LDR      r1,|L1.444|
00005c  f8b101b4          LDRH     r0,[r1,#0x1b4]  ; HNMsg_Buf
000060  1c41              ADDS     r1,r0,#1
000062  4b56              LDR      r3,|L1.444|
000064  f8a311b4          STRH     r1,[r3,#0x1b4]
000068  4619              MOV      r1,r3
00006a  f8b111b2          LDRH     r1,[r1,#0x1b2]  ; HNMsg_Buf
00006e  eb0101c1          ADD      r1,r1,r1,LSL #3
000072  eb031101          ADD      r1,r3,r1,LSL #4
000076  3110              ADDS     r1,r1,#0x10
000078  540c              STRB     r4,[r1,r0]
00007a  e071              B        |L1.352|
                  |L1.124|
;;;199    	}
;;;200    	else
;;;201    	{
;;;202    		if((HNMsg_Buf.rear + 1)%H_NAV_MSG_NUM != HNMsg_Buf.front) // Buffer Not Full?
00007c  484f              LDR      r0,|L1.444|
00007e  f8b001b2          LDRH     r0,[r0,#0x1b2]  ; HNMsg_Buf
000082  1c40              ADDS     r0,r0,#1
000084  2103              MOVS     r1,#3
000086  fb90f2f1          SDIV     r2,r0,r1
00008a  fb010012          MLS      r0,r1,r2,r0
00008e  494b              LDR      r1,|L1.444|
000090  f8b111b0          LDRH     r1,[r1,#0x1b0]  ; HNMsg_Buf
000094  4288              CMP      r0,r1
000096  d01c              BEQ      |L1.210|
;;;203    		{
;;;204    			HNMsg_Buf.index = 0;
000098  2000              MOVS     r0,#0
00009a  4948              LDR      r1,|L1.444|
00009c  f8a101b4          STRH     r0,[r1,#0x1b4]
;;;205    			HNMsg_Buf.rear = (HNMsg_Buf.rear + 1)%H_NAV_MSG_NUM;
0000a0  4608              MOV      r0,r1
0000a2  f8b001b2          LDRH     r0,[r0,#0x1b2]  ; HNMsg_Buf
0000a6  1c40              ADDS     r0,r0,#1
0000a8  2103              MOVS     r1,#3
0000aa  fb90f2f1          SDIV     r2,r0,r1
0000ae  fb010012          MLS      r0,r1,r2,r0
0000b2  4942              LDR      r1,|L1.444|
0000b4  f8a101b2          STRH     r0,[r1,#0x1b2]
;;;206    			//new data received and record new timestamp
;;;207    			time=&(HNMsg_Buf.msg[HNMsg_Buf.rear].timestamp);
0000b8  4608              MOV      r0,r1
0000ba  f8b001b2          LDRH     r0,[r0,#0x1b2]  ; HNMsg_Buf
0000be  eb0000c0          ADD      r0,r0,r0,LSL #3
0000c2  eb011000          ADD      r0,r1,r0,LSL #4
0000c6  f1000508          ADD      r5,r0,#8
;;;208    			ETH_PTPTime_GetTime(time);
0000ca  4628              MOV      r0,r5
0000cc  f7fffffe          BL       ETH_PTPTime_GetTime
0000d0  e006              B        |L1.224|
                  |L1.210|
;;;209    		}
;;;210    		else
;;;211    		{
;;;212    			/* overflow here */
;;;213    			HNMsg_Buf.err_info++;
0000d2  483a              LDR      r0,|L1.444|
0000d4  f8b001b6          LDRH     r0,[r0,#0x1b6]  ; HNMsg_Buf
0000d8  1c40              ADDS     r0,r0,#1
0000da  4938              LDR      r1,|L1.444|
0000dc  f8a101b6          STRH     r0,[r1,#0x1b6]
                  |L1.224|
;;;214    		}
;;;215    		HNMsg_Buf.msg[HNMsg_Buf.rear].left_position =  (int16_t)TIM3->CNT - tim3_cnt;
0000e0  4837              LDR      r0,|L1.448|
0000e2  6800              LDR      r0,[r0,#0]
0000e4  4937              LDR      r1,|L1.452|
0000e6  8809              LDRH     r1,[r1,#0]  ; tim3_cnt
0000e8  1a40              SUBS     r0,r0,r1
0000ea  b200              SXTH     r0,r0
0000ec  4933              LDR      r1,|L1.444|
0000ee  f8b111b2          LDRH     r1,[r1,#0x1b2]  ; HNMsg_Buf
0000f2  eb0101c1          ADD      r1,r1,r1,LSL #3
0000f6  4a31              LDR      r2,|L1.444|
0000f8  eb021101          ADD      r1,r2,r1,LSL #4
0000fc  8088              STRH     r0,[r1,#4]
;;;216    		HNMsg_Buf.msg[HNMsg_Buf.rear].right_position = (int16_t)TIM4->CNT - tim4_cnt;
0000fe  4832              LDR      r0,|L1.456|
000100  6800              LDR      r0,[r0,#0]
000102  4932              LDR      r1,|L1.460|
000104  8809              LDRH     r1,[r1,#0]  ; tim4_cnt
000106  1a40              SUBS     r0,r0,r1
000108  b200              SXTH     r0,r0
00010a  4611              MOV      r1,r2
00010c  f8b111b2          LDRH     r1,[r1,#0x1b2]  ; HNMsg_Buf
000110  eb0101c1          ADD      r1,r1,r1,LSL #3
000114  eb021101          ADD      r1,r2,r1,LSL #4
000118  80c8              STRH     r0,[r1,#6]
;;;217    		if(HNMsg_Buf.index >= H_NAV_MSG_SIZE)
00011a  4610              MOV      r0,r2
00011c  f8b001b4          LDRH     r0,[r0,#0x1b4]  ; HNMsg_Buf
000120  2880              CMP      r0,#0x80
000122  db03              BLT      |L1.300|
;;;218    			HNMsg_Buf.index = H_NAV_MSG_SIZE - 1;
000124  207f              MOVS     r0,#0x7f
000126  4611              MOV      r1,r2
000128  f8a101b4          STRH     r0,[r1,#0x1b4]
                  |L1.300|
;;;219    		HNMsg_Buf.msg[HNMsg_Buf.rear].hybrid_nav_data[HNMsg_Buf.index++] = uart_data;
00012c  4923              LDR      r1,|L1.444|
00012e  f8b101b4          LDRH     r0,[r1,#0x1b4]  ; HNMsg_Buf
000132  1c41              ADDS     r1,r0,#1
000134  4b21              LDR      r3,|L1.444|
000136  f8a311b4          STRH     r1,[r3,#0x1b4]
00013a  4619              MOV      r1,r3
00013c  f8b111b2          LDRH     r1,[r1,#0x1b2]  ; HNMsg_Buf
000140  eb0101c1          ADD      r1,r1,r1,LSL #3
000144  eb031101          ADD      r1,r3,r1,LSL #4
000148  3110              ADDS     r1,r1,#0x10
00014a  540c              STRB     r4,[r1,r0]
;;;220    		tim3_cnt = TIM3->CNT;
00014c  481c              LDR      r0,|L1.448|
00014e  6800              LDR      r0,[r0,#0]
000150  b200              SXTH     r0,r0
000152  491c              LDR      r1,|L1.452|
000154  8008              STRH     r0,[r1,#0]
;;;221    		tim4_cnt = TIM4->CNT;
000156  481c              LDR      r0,|L1.456|
000158  6800              LDR      r0,[r0,#0]
00015a  b200              SXTH     r0,r0
00015c  491b              LDR      r1,|L1.460|
00015e  8008              STRH     r0,[r1,#0]
                  |L1.352|
;;;222    	}
;;;223    	TIM7->CNT = 0;
000160  2000              MOVS     r0,#0
000162  4915              LDR      r1,|L1.440|
000164  6008              STR      r0,[r1,#0]
;;;224    }
000166  bd70              POP      {r4-r6,pc}
;;;225    
                          ENDP

                  EXTI15_10_IRQHandler PROC
;;;230    ********************************************************************************/
;;;231    void EXTI15_10_IRQHandler(void)
000168  b510              PUSH     {r4,lr}
;;;232    {
;;;233    	if(EXTI_GetITStatus(EXTI_Line15)==SET)
00016a  f44f4000          MOV      r0,#0x8000
00016e  f7fffffe          BL       EXTI_GetITStatus
000172  2801              CMP      r0,#1
000174  d108              BNE      |L1.392|
;;;234    	{
;;;235    		EXTI_ClearFlag(EXTI_Line15);
000176  03c0              LSLS     r0,r0,#15
000178  f7fffffe          BL       EXTI_ClearFlag
;;;236    		/*
;;;237    		if(DM9000_INT==0)
;;;238    		{
;;;239    			DM9000_ISRHandler();
;;;240    		}
;;;241    		*/
;;;242    		TIM4->CNT = 0;
00017c  2000              MOVS     r0,#0
00017e  4912              LDR      r1,|L1.456|
000180  6008              STR      r0,[r1,#0]
;;;243    		TIM5->CNT = 0;
000182  4913              LDR      r1,|L1.464|
000184  6008              STR      r0,[r1,#0]
000186  e008              B        |L1.410|
                  |L1.392|
;;;244    	}
;;;245    	else if(EXTI_GetITStatus(EXTI_Line14)==SET)
000188  f44f4080          MOV      r0,#0x4000
00018c  f7fffffe          BL       EXTI_GetITStatus
000190  2801              CMP      r0,#1
000192  d102              BNE      |L1.410|
;;;246    	{
;;;247    		EXTI_ClearITPendingBit(EXTI_Line14);
000194  0380              LSLS     r0,r0,#14
000196  f7fffffe          BL       EXTI_ClearITPendingBit
                  |L1.410|
;;;248    	}
;;;249    }
00019a  bd10              POP      {r4,pc}
;;;250    
                          ENDP

                  EXTI3_IRQHandler PROC
;;;251    
;;;252    void EXTI3_IRQHandler(void)
00019c  b510              PUSH     {r4,lr}
;;;253    {
;;;254    	EXTI_ClearITPendingBit(EXTI_Line3);
00019e  2008              MOVS     r0,#8
0001a0  f7fffffe          BL       EXTI_ClearITPendingBit
;;;255    	TIM3->CNT = 0;
0001a4  2000              MOVS     r0,#0
0001a6  4906              LDR      r1,|L1.448|
0001a8  6008              STR      r0,[r1,#0]
;;;256    	TIM2->CNT = 0;
0001aa  0709              LSLS     r1,r1,#28
0001ac  6248              STR      r0,[r1,#0x24]
;;;257    }
0001ae  bd10              POP      {r4,pc}
;;;258    
                          ENDP

                  |L1.432|
                          DCD      s_xRxSemaphore
                  |L1.436|
                          DCD      0x40004804
                  |L1.440|
                          DCD      0x40001424
                  |L1.444|
                          DCD      HNMsg_Buf
                  |L1.448|
                          DCD      0x40000424
                  |L1.452|
                          DCD      tim3_cnt
                  |L1.456|
                          DCD      0x40000824
                  |L1.460|
                          DCD      tim4_cnt
                  |L1.464|
                          DCD      0x40000c24

                          AREA ||.data||, DATA, ALIGN=1

                  tim3_cnt
000000  0000              DCB      0x00,0x00
                  tim4_cnt
000002  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\src\\stm32f4xx_it.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REV16|
#line 114 "..\\..\\libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_stm32f4xx_it_c_bb8ca80c____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH|
#line 128
|__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\misc.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\misc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\misc.crf ..\..\libraries\STM32F4xx_StdPeriph_Driver\src\misc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  NVIC_PriorityGroupConfig PROC
;;;117      */
;;;118    void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
000000  4932              LDR      r1,|L1.204|
;;;119    {
;;;120      /* Check the parameters */
;;;121      assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
;;;122      
;;;123      /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
;;;124      SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
000002  4301              ORRS     r1,r1,r0
000004  4a32              LDR      r2,|L1.208|
000006  6011              STR      r1,[r2,#0]
;;;125    }
000008  4770              BX       lr
;;;126    
                          ENDP

                  NVIC_Init PROC
;;;135      */
;;;136    void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
00000a  b570              PUSH     {r4-r6,lr}
;;;137    {
;;;138      uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
00000c  2100              MOVS     r1,#0
00000e  2300              MOVS     r3,#0
000010  220f              MOVS     r2,#0xf
;;;139      
;;;140      /* Check the parameters */
;;;141      assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
;;;142      assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
;;;143      assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
;;;144        
;;;145      if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
000012  78c4              LDRB     r4,[r0,#3]
000014  b31c              CBZ      r4,|L1.94|
;;;146      {
;;;147        /* Compute the Corresponding IRQ Priority --------------------------------*/    
;;;148        tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
000016  4c2e              LDR      r4,|L1.208|
000018  6824              LDR      r4,[r4,#0]
00001a  f40464e0          AND      r4,r4,#0x700
00001e  f5c464e0          RSB      r4,r4,#0x700
000022  f3c42107          UBFX     r1,r4,#8,#8
;;;149        tmppre = (0x4 - tmppriority);
000026  f1c10404          RSB      r4,r1,#4
00002a  b2e3              UXTB     r3,r4
;;;150        tmpsub = tmpsub >> tmppriority;
00002c  410a              ASRS     r2,r2,r1
;;;151    
;;;152        tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
00002e  7844              LDRB     r4,[r0,#1]
000030  409c              LSLS     r4,r4,r3
000032  b2e1              UXTB     r1,r4
;;;153        tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
000034  7884              LDRB     r4,[r0,#2]
000036  4014              ANDS     r4,r4,r2
000038  4321              ORRS     r1,r1,r4
;;;154            
;;;155        tmppriority = tmppriority << 0x04;
00003a  070c              LSLS     r4,r1,#28
00003c  0e21              LSRS     r1,r4,#24
;;;156            
;;;157        NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
00003e  4c25              LDR      r4,|L1.212|
000040  7805              LDRB     r5,[r0,#0]
000042  5561              STRB     r1,[r4,r5]
;;;158        
;;;159        /* Enable the Selected IRQ Channels --------------------------------------*/
;;;160        NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
000044  7804              LDRB     r4,[r0,#0]
000046  f004051f          AND      r5,r4,#0x1f
00004a  2401              MOVS     r4,#1
00004c  40ac              LSLS     r4,r4,r5
00004e  7805              LDRB     r5,[r0,#0]
000050  116d              ASRS     r5,r5,#5
000052  00ad              LSLS     r5,r5,#2
000054  f10525e0          ADD      r5,r5,#0xe000e000
000058  f8c54100          STR      r4,[r5,#0x100]
00005c  e009              B        |L1.114|
                  |L1.94|
;;;161          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;162      }
;;;163      else
;;;164      {
;;;165        /* Disable the Selected IRQ Channels -------------------------------------*/
;;;166        NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
00005e  7804              LDRB     r4,[r0,#0]
000060  f004051f          AND      r5,r4,#0x1f
000064  2401              MOVS     r4,#1
000066  40ac              LSLS     r4,r4,r5
000068  4d1b              LDR      r5,|L1.216|
00006a  7806              LDRB     r6,[r0,#0]
00006c  1176              ASRS     r6,r6,#5
00006e  f8454026          STR      r4,[r5,r6,LSL #2]
                  |L1.114|
;;;167          (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
;;;168      }
;;;169    }
000072  bd70              POP      {r4-r6,pc}
;;;170    
                          ENDP

                  NVIC_SetVectorTable PROC
;;;179      */
;;;180    void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
000074  4a19              LDR      r2,|L1.220|
;;;181    { 
;;;182      /* Check the parameters */
;;;183      assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
;;;184      assert_param(IS_NVIC_OFFSET(Offset));  
;;;185       
;;;186      SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
000076  400a              ANDS     r2,r2,r1
000078  4302              ORRS     r2,r2,r0
00007a  4b15              LDR      r3,|L1.208|
00007c  1f1b              SUBS     r3,r3,#4
00007e  601a              STR      r2,[r3,#0]
;;;187    }
000080  4770              BX       lr
;;;188    
                          ENDP

                  NVIC_SystemLPConfig PROC
;;;198      */
;;;199    void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
000082  b139              CBZ      r1,|L1.148|
;;;200    {
;;;201      /* Check the parameters */
;;;202      assert_param(IS_NVIC_LP(LowPowerMode));
;;;203      assert_param(IS_FUNCTIONAL_STATE(NewState));  
;;;204      
;;;205      if (NewState != DISABLE)
;;;206      {
;;;207        SCB->SCR |= LowPowerMode;
000084  4a12              LDR      r2,|L1.208|
000086  1d12              ADDS     r2,r2,#4
000088  6812              LDR      r2,[r2,#0]
00008a  4302              ORRS     r2,r2,r0
00008c  4b10              LDR      r3,|L1.208|
00008e  1d1b              ADDS     r3,r3,#4
000090  601a              STR      r2,[r3,#0]
000092  e006              B        |L1.162|
                  |L1.148|
;;;208      }
;;;209      else
;;;210      {
;;;211        SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
000094  4a0e              LDR      r2,|L1.208|
000096  1d12              ADDS     r2,r2,#4
000098  6812              LDR      r2,[r2,#0]
00009a  4382              BICS     r2,r2,r0
00009c  4b0c              LDR      r3,|L1.208|
00009e  1d1b              ADDS     r3,r3,#4
0000a0  601a              STR      r2,[r3,#0]
                  |L1.162|
;;;212      }
;;;213    }
0000a2  4770              BX       lr
;;;214    
                          ENDP

                  SysTick_CLKSourceConfig PROC
;;;222      */
;;;223    void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
0000a4  2804              CMP      r0,#4
;;;224    {
;;;225      /* Check the parameters */
;;;226      assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
;;;227      if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
0000a6  d108              BNE      |L1.186|
;;;228      {
;;;229        SysTick->CTRL |= SysTick_CLKSource_HCLK;
0000a8  f04f21e0          MOV      r1,#0xe000e000
0000ac  6909              LDR      r1,[r1,#0x10]
0000ae  f0410104          ORR      r1,r1,#4
0000b2  f04f22e0          MOV      r2,#0xe000e000
0000b6  6111              STR      r1,[r2,#0x10]
0000b8  e007              B        |L1.202|
                  |L1.186|
;;;230      }
;;;231      else
;;;232      {
;;;233        SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
0000ba  f04f21e0          MOV      r1,#0xe000e000
0000be  6909              LDR      r1,[r1,#0x10]
0000c0  f0210104          BIC      r1,r1,#4
0000c4  f04f22e0          MOV      r2,#0xe000e000
0000c8  6111              STR      r1,[r2,#0x10]
                  |L1.202|
;;;234      }
;;;235    }
0000ca  4770              BX       lr
;;;236    
                          ENDP

                  |L1.204|
                          DCD      0x05fa0000
                  |L1.208|
                          DCD      0xe000ed0c
                  |L1.212|
                          DCD      0xe000e400
                  |L1.216|
                          DCD      0xe000e180
                  |L1.220|
                          DCD      0x1fffff80

;*** Start embedded assembler ***

#line 1 "..\\..\\libraries\\STM32F4xx_StdPeriph_Driver\\src\\misc.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REV16|
#line 114 "..\\..\\libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_misc_c_d0fc1254____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___6_misc_c_d0fc1254____REVSH|
#line 128
|__asm___6_misc_c_d0fc1254____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

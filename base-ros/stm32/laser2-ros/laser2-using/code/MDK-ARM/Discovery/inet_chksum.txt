; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\discovery\inet_chksum.o --asm_dir=.\Discovery\ --list_dir=.\Discovery\ --depend=.\discovery\inet_chksum.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\inc -I..\src -I..\..\libraries\CMSIS\Include -I..\..\libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\libraries\STM32F4x7_ETH_Driver\inc -I..\..\libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\libraries\STM32F4-Discovery -I..\..\libraries\lwip-1.4.1\port\STM32F4x7 -I..\..\libraries\lwip-1.4.1\src\include -I..\..\libraries\lwip-1.4.1\src\include\ipv4 -I..\..\libraries\lwip-1.4.1\src\include\lwip -I..\..\libraries\lwip-1.4.1\src\include\netif -I..\..\libraries\lwip-1.4.1\port\STM32F4x7\arch -I..\..\libraries\rtx-v4.73\INC -I..\..\libraries\rtx-v4.73\SRC -I..\..\libraries\ptpd-2.0.0\src -I..\inc\system -I..\inc\laser -I..\inc\motorCtrl -I..\..\libraries\lwip-1.4.1\src\include\ipv4\lwip -Id:\Keil_v5\ARM\RV31\INC -Id:\Keil_v5\ARM\CMSIS\Include -Id:\Keil_v5\ARM\Inc\ST\STM32F4xx -D__MICROLIB -D__UVISION_VERSION=520 -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -D__CORTEX_M4F -D__FPU_PRESENT -D__CMSIS_RTOS -DSTM32F40_41xxx --omf_browse=.\discovery\inet_chksum.crf ..\..\libraries\lwip-1.4.1\src\core\ipv4\inet_chksum.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  lwip_standard_chksum PROC
;;;134    static u16_t
;;;135    lwip_standard_chksum(void *dataptr, int len)
000000  b5f8              PUSH     {r3-r7,lr}
;;;136    {
000002  4605              MOV      r5,r0
000004  460a              MOV      r2,r1
;;;137      u8_t *pb = (u8_t *)dataptr;
000006  462b              MOV      r3,r5
;;;138      u16_t *ps, t = 0;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;139      u32_t sum = 0;
00000c  2100              MOVS     r1,#0
;;;140      int odd = ((mem_ptr_t)pb & 1);
00000e  f0030601          AND      r6,r3,#1
;;;141    
;;;142      /* Get aligned to u16_t */
;;;143      if (odd && len > 0) {
000012  b136              CBZ      r6,|L1.34|
000014  2a00              CMP      r2,#0
000016  dd04              BLE      |L1.34|
;;;144        ((u8_t *)&t)[1] = *pb++;
000018  f8130b01          LDRB     r0,[r3],#1
00001c  f88d0001          STRB     r0,[sp,#1]
;;;145        len--;
000020  1e52              SUBS     r2,r2,#1
                  |L1.34|
;;;146      }
;;;147    
;;;148      /* Add the bulk of the data */
;;;149      ps = (u16_t *)(void *)pb;
000022  461c              MOV      r4,r3
;;;150      while (len > 1) {
000024  e003              B        |L1.46|
                  |L1.38|
;;;151        sum += *ps++;
000026  f8347b02          LDRH     r7,[r4],#2
00002a  4439              ADD      r1,r1,r7
;;;152        len -= 2;
00002c  1e92              SUBS     r2,r2,#2
                  |L1.46|
00002e  2a01              CMP      r2,#1                 ;150
000030  dcf9              BGT      |L1.38|
;;;153      }
;;;154    
;;;155      /* Consume left-over byte, if any */
;;;156      if (len > 0) {
000032  2a00              CMP      r2,#0
000034  dd02              BLE      |L1.60|
;;;157        ((u8_t *)&t)[0] = *(u8_t *)ps;
000036  7820              LDRB     r0,[r4,#0]
000038  f88d0000          STRB     r0,[sp,#0]
                  |L1.60|
;;;158      }
;;;159    
;;;160      /* Add end bytes */
;;;161      sum += t;
00003c  f8bd0000          LDRH     r0,[sp,#0]
000040  4401              ADD      r1,r1,r0
;;;162    
;;;163      /* Fold 32-bit sum to 16 bits
;;;164         calling this twice is propably faster than if statements... */
;;;165      sum = FOLD_U32T(sum);
000042  b288              UXTH     r0,r1
000044  eb004111          ADD      r1,r0,r1,LSR #16
;;;166      sum = FOLD_U32T(sum);
000048  b288              UXTH     r0,r1
00004a  eb004111          ADD      r1,r0,r1,LSR #16
;;;167    
;;;168      /* Swap if alignment was odd */
;;;169      if (odd) {
00004e  b126              CBZ      r6,|L1.90|
;;;170        sum = SWAP_BYTES_IN_WORD(sum);
000050  b2c8              UXTB     r0,r1
000052  f3c12707          UBFX     r7,r1,#8,#8
000056  ea472100          ORR      r1,r7,r0,LSL #8
                  |L1.90|
;;;171      }
;;;172    
;;;173      return (u16_t)sum;
00005a  b288              UXTH     r0,r1
;;;174    }
00005c  bdf8              POP      {r3-r7,pc}
;;;175    #endif
                          ENDP

                  inet_chksum_pseudo PROC
;;;271    u16_t
;;;272    inet_chksum_pseudo(struct pbuf *p,
00005e  e92d5ff0          PUSH     {r4-r12,lr}
;;;273           ip_addr_t *src, ip_addr_t *dest,
;;;274           u8_t proto, u16_t proto_len)
;;;275    {
000062  4607              MOV      r7,r0
000064  4688              MOV      r8,r1
000066  4691              MOV      r9,r2
000068  469a              MOV      r10,r3
;;;276      u32_t acc;
;;;277      u32_t addr;
;;;278      struct pbuf *q;
;;;279      u8_t swapped;
;;;280    
;;;281      acc = 0;
00006a  2400              MOVS     r4,#0
;;;282      swapped = 0;
00006c  46a3              MOV      r11,r4
;;;283      /* iterate through all pbuf in chain */
;;;284      for(q = p; q != NULL; q = q->next) {
00006e  463d              MOV      r5,r7
000070  e01a              B        |L1.168|
                  |L1.114|
;;;285        LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
000072  bf00              NOP      
000074  bf00              NOP      
;;;286          (void *)q, (void *)q->next));
;;;287        acc += LWIP_CHKSUM(q->payload, q->len);
000076  8969              LDRH     r1,[r5,#0xa]
000078  6868              LDR      r0,[r5,#4]
00007a  f7fffffe          BL       lwip_standard_chksum
00007e  4404              ADD      r4,r4,r0
;;;288        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;289        /* just executing this next line is probably faster that the if statement needed
;;;290           to check whether we really need to execute it, and does no harm */
;;;291        acc = FOLD_U32T(acc);
000080  b2a0              UXTH     r0,r4
000082  eb004414          ADD      r4,r0,r4,LSR #16
;;;292        if (q->len % 2 != 0) {
000086  8968              LDRH     r0,[r5,#0xa]
000088  eb0071d0          ADD      r1,r0,r0,LSR #31
00008c  1049              ASRS     r1,r1,#1
00008e  eba00141          SUB      r1,r0,r1,LSL #1
000092  b141              CBZ      r1,|L1.166|
;;;293          swapped = 1 - swapped;
000094  f1cb0001          RSB      r0,r11,#1
000098  f0000bff          AND      r11,r0,#0xff
;;;294          acc = SWAP_BYTES_IN_WORD(acc);
00009c  b2e0              UXTB     r0,r4
00009e  f3c42107          UBFX     r1,r4,#8,#8
0000a2  ea412400          ORR      r4,r1,r0,LSL #8
                  |L1.166|
0000a6  682d              LDR      r5,[r5,#0]            ;284
                  |L1.168|
0000a8  2d00              CMP      r5,#0                 ;284
0000aa  d1e2              BNE      |L1.114|
;;;295        }
;;;296        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;297      }
;;;298    
;;;299      if (swapped) {
0000ac  f1bb0f00          CMP      r11,#0
0000b0  d004              BEQ      |L1.188|
;;;300        acc = SWAP_BYTES_IN_WORD(acc);
0000b2  b2e0              UXTB     r0,r4
0000b4  f3c42107          UBFX     r1,r4,#8,#8
0000b8  ea412400          ORR      r4,r1,r0,LSL #8
                  |L1.188|
;;;301      }
;;;302      addr = ip4_addr_get_u32(src);
0000bc  f8d86000          LDR      r6,[r8,#0]
;;;303      acc += (addr & 0xffffUL);
0000c0  b2b0              UXTH     r0,r6
0000c2  4404              ADD      r4,r4,r0
;;;304      acc += ((addr >> 16) & 0xffffUL);
0000c4  f64f70ff          MOV      r0,#0xffff
0000c8  ea004016          AND      r0,r0,r6,LSR #16
0000cc  4404              ADD      r4,r4,r0
;;;305      addr = ip4_addr_get_u32(dest);
0000ce  f8d96000          LDR      r6,[r9,#0]
;;;306      acc += (addr & 0xffffUL);
0000d2  b2b0              UXTH     r0,r6
0000d4  4404              ADD      r4,r4,r0
;;;307      acc += ((addr >> 16) & 0xffffUL);
0000d6  f64f70ff          MOV      r0,#0xffff
0000da  ea004016          AND      r0,r0,r6,LSR #16
0000de  4404              ADD      r4,r4,r0
;;;308      acc += (u32_t)htons((u16_t)proto);
0000e0  4650              MOV      r0,r10
0000e2  f7fffffe          BL       lwip_htons
0000e6  4404              ADD      r4,r4,r0
;;;309      acc += (u32_t)htons(proto_len);
0000e8  980a              LDR      r0,[sp,#0x28]
0000ea  f7fffffe          BL       lwip_htons
0000ee  4404              ADD      r4,r4,r0
;;;310    
;;;311      /* Fold 32-bit sum to 16 bits
;;;312         calling this twice is propably faster than if statements... */
;;;313      acc = FOLD_U32T(acc);
0000f0  b2a0              UXTH     r0,r4
0000f2  eb004414          ADD      r4,r0,r4,LSR #16
;;;314      acc = FOLD_U32T(acc);
0000f6  b2a0              UXTH     r0,r4
0000f8  eb004414          ADD      r4,r0,r4,LSR #16
;;;315      LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
0000fc  bf00              NOP      
0000fe  bf00              NOP      
;;;316      return (u16_t)~(acc & 0xffffUL);
000100  43e0              MVNS     r0,r4
000102  b280              UXTH     r0,r0
;;;317    }
000104  e8bd9ff0          POP      {r4-r12,pc}
;;;318    
                          ENDP

                  inet_chksum_pseudo_partial PROC
;;;331    u16_t
;;;332    inet_chksum_pseudo_partial(struct pbuf *p,
000108  e92d5fff          PUSH     {r0-r12,lr}
;;;333           ip_addr_t *src, ip_addr_t *dest,
;;;334           u8_t proto, u16_t proto_len, u16_t chksum_len)
;;;335    {
00010c  4681              MOV      r9,r0
00010e  468a              MOV      r10,r1
000110  9e0f              LDR      r6,[sp,#0x3c]
;;;336      u32_t acc;
;;;337      u32_t addr;
;;;338      struct pbuf *q;
;;;339      u8_t swapped;
;;;340      u16_t chklen;
;;;341    
;;;342      acc = 0;
000112  2400              MOVS     r4,#0
;;;343      swapped = 0;
000114  46a3              MOV      r11,r4
;;;344      /* iterate through all pbuf in chain */
;;;345      for(q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
000116  464d              MOV      r5,r9
000118  e024              B        |L1.356|
                  |L1.282|
;;;346        LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
00011a  bf00              NOP      
00011c  bf00              NOP      
;;;347          (void *)q, (void *)q->next));
;;;348        chklen = q->len;
00011e  f8b5800a          LDRH     r8,[r5,#0xa]
;;;349        if (chklen > chksum_len) {
000122  45b0              CMP      r8,r6
000124  dd00              BLE      |L1.296|
;;;350          chklen = chksum_len;
000126  46b0              MOV      r8,r6
                  |L1.296|
;;;351        }
;;;352        acc += LWIP_CHKSUM(q->payload, chklen);
000128  4641              MOV      r1,r8
00012a  6868              LDR      r0,[r5,#4]
00012c  f7fffffe          BL       lwip_standard_chksum
000130  4404              ADD      r4,r4,r0
;;;353        chksum_len -= chklen;
000132  eba60008          SUB      r0,r6,r8
000136  b286              UXTH     r6,r0
;;;354        LWIP_ASSERT("delete me", chksum_len < 0x7fff);
000138  bf00              NOP      
00013a  bf00              NOP      
;;;355        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;356        /* fold the upper bit down */
;;;357        acc = FOLD_U32T(acc);
00013c  b2a0              UXTH     r0,r4
00013e  eb004414          ADD      r4,r0,r4,LSR #16
;;;358        if (q->len % 2 != 0) {
000142  8968              LDRH     r0,[r5,#0xa]
000144  eb0071d0          ADD      r1,r0,r0,LSR #31
000148  1049              ASRS     r1,r1,#1
00014a  eba00141          SUB      r1,r0,r1,LSL #1
00014e  b141              CBZ      r1,|L1.354|
;;;359          swapped = 1 - swapped;
000150  f1cb0001          RSB      r0,r11,#1
000154  f0000bff          AND      r11,r0,#0xff
;;;360          acc = SWAP_BYTES_IN_WORD(acc);
000158  b2e0              UXTB     r0,r4
00015a  f3c42107          UBFX     r1,r4,#8,#8
00015e  ea412400          ORR      r4,r1,r0,LSL #8
                  |L1.354|
000162  682d              LDR      r5,[r5,#0]            ;345
                  |L1.356|
000164  b10d              CBZ      r5,|L1.362|
000166  2e00              CMP      r6,#0                 ;345
000168  dcd7              BGT      |L1.282|
                  |L1.362|
;;;361        }
;;;362        /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
;;;363      }
;;;364    
;;;365      if (swapped) {
00016a  f1bb0f00          CMP      r11,#0
00016e  d004              BEQ      |L1.378|
;;;366        acc = SWAP_BYTES_IN_WORD(acc);
000170  b2e0              UXTB     r0,r4
000172  f3c42107          UBFX     r1,r4,#8,#8
000176  ea412400          ORR      r4,r1,r0,LSL #8
                  |L1.378|
;;;367      }
;;;368      addr = ip4_addr_get_u32(src);
00017a  f8da7000          LDR      r7,[r10,#0]
;;;369      acc += (addr & 0xffffUL);
00017e  b2b8              UXTH     r0,r7
000180  4404              ADD      r4,r4,r0
;;;370      acc += ((addr >> 16) & 0xffffUL);
000182  f64f70ff          MOV      r0,#0xffff
000186  ea004017          AND      r0,r0,r7,LSR #16
00018a  4404              ADD      r4,r4,r0
;;;371      addr = ip4_addr_get_u32(dest);
00018c  9802              LDR      r0,[sp,#8]
00018e  6807              LDR      r7,[r0,#0]
;;;372      acc += (addr & 0xffffUL);
000190  b2b8              UXTH     r0,r7
000192  4404              ADD      r4,r4,r0
;;;373      acc += ((addr >> 16) & 0xffffUL);
000194  f64f70ff          MOV      r0,#0xffff
000198  ea004017          AND      r0,r0,r7,LSR #16
00019c  4404              ADD      r4,r4,r0
;;;374      acc += (u32_t)htons((u16_t)proto);
00019e  9803              LDR      r0,[sp,#0xc]
0001a0  f7fffffe          BL       lwip_htons
0001a4  4404              ADD      r4,r4,r0
;;;375      acc += (u32_t)htons(proto_len);
0001a6  980e              LDR      r0,[sp,#0x38]
0001a8  f7fffffe          BL       lwip_htons
0001ac  4404              ADD      r4,r4,r0
;;;376    
;;;377      /* Fold 32-bit sum to 16 bits
;;;378         calling this twice is propably faster than if statements... */
;;;379      acc = FOLD_U32T(acc);
0001ae  b2a0              UXTH     r0,r4
0001b0  eb004414          ADD      r4,r0,r4,LSR #16
;;;380      acc = FOLD_U32T(acc);
0001b4  b2a0              UXTH     r0,r4
0001b6  eb004414          ADD      r4,r0,r4,LSR #16
;;;381      LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
0001ba  bf00              NOP      
0001bc  bf00              NOP      
;;;382      return (u16_t)~(acc & 0xffffUL);
0001be  43e0              MVNS     r0,r4
0001c0  b280              UXTH     r0,r0
;;;383    }
0001c2  b004              ADD      sp,sp,#0x10
0001c4  e8bd9ff0          POP      {r4-r12,pc}
;;;384    
                          ENDP

                  inet_chksum PROC
;;;395    u16_t
;;;396    inet_chksum(void *dataptr, u16_t len)
0001c8  b570              PUSH     {r4-r6,lr}
;;;397    {
0001ca  4604              MOV      r4,r0
0001cc  460d              MOV      r5,r1
;;;398      return ~LWIP_CHKSUM(dataptr, len);
0001ce  4629              MOV      r1,r5
0001d0  4620              MOV      r0,r4
0001d2  f7fffffe          BL       lwip_standard_chksum
0001d6  43c0              MVNS     r0,r0
0001d8  b280              UXTH     r0,r0
;;;399    }
0001da  bd70              POP      {r4-r6,pc}
;;;400    
                          ENDP

                  inet_chksum_pbuf PROC
;;;408    u16_t
;;;409    inet_chksum_pbuf(struct pbuf *p)
0001dc  e92d41f0          PUSH     {r4-r8,lr}
;;;410    {
0001e0  4606              MOV      r6,r0
;;;411      u32_t acc;
;;;412      struct pbuf *q;
;;;413      u8_t swapped;
;;;414    
;;;415      acc = 0;
0001e2  2400              MOVS     r4,#0
;;;416      swapped = 0;
0001e4  2700              MOVS     r7,#0
;;;417      for(q = p; q != NULL; q = q->next) {
0001e6  4635              MOV      r5,r6
0001e8  e017              B        |L1.538|
                  |L1.490|
;;;418        acc += LWIP_CHKSUM(q->payload, q->len);
0001ea  8969              LDRH     r1,[r5,#0xa]
0001ec  6868              LDR      r0,[r5,#4]
0001ee  f7fffffe          BL       lwip_standard_chksum
0001f2  4404              ADD      r4,r4,r0
;;;419        acc = FOLD_U32T(acc);
0001f4  b2a0              UXTH     r0,r4
0001f6  eb004414          ADD      r4,r0,r4,LSR #16
;;;420        if (q->len % 2 != 0) {
0001fa  8968              LDRH     r0,[r5,#0xa]
0001fc  eb0071d0          ADD      r1,r0,r0,LSR #31
000200  1049              ASRS     r1,r1,#1
000202  eba00141          SUB      r1,r0,r1,LSL #1
000206  b139              CBZ      r1,|L1.536|
;;;421          swapped = 1 - swapped;
000208  f1c70001          RSB      r0,r7,#1
00020c  b2c7              UXTB     r7,r0
;;;422          acc = SWAP_BYTES_IN_WORD(acc);
00020e  b2e0              UXTB     r0,r4
000210  f3c42107          UBFX     r1,r4,#8,#8
000214  ea412400          ORR      r4,r1,r0,LSL #8
                  |L1.536|
000218  682d              LDR      r5,[r5,#0]            ;417
                  |L1.538|
00021a  2d00              CMP      r5,#0                 ;417
00021c  d1e5              BNE      |L1.490|
;;;423        }
;;;424      }
;;;425    
;;;426      if (swapped) {
00021e  b127              CBZ      r7,|L1.554|
;;;427        acc = SWAP_BYTES_IN_WORD(acc);
000220  b2e0              UXTB     r0,r4
000222  f3c42107          UBFX     r1,r4,#8,#8
000226  ea412400          ORR      r4,r1,r0,LSL #8
                  |L1.554|
;;;428      }
;;;429      return (u16_t)~(acc & 0xffffUL);
00022a  43e0              MVNS     r0,r4
00022c  b280              UXTH     r0,r0
;;;430    }
00022e  e8bd81f0          POP      {r4-r8,pc}
;;;431    
                          ENDP

